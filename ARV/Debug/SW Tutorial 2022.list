
SW Tutorial 2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f14  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e00  08007e00  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e08  08007e08  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          000058a4  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005950  20005950  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001664e  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000344e  00000000  00000000  0003672a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00039b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c0  00000000  00000000  0003ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002243d  00000000  00000000  0003c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019930  00000000  00000000  0005e47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9e7b  00000000  00000000  00077dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141c28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fa0  00000000  00000000  00141c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ed4 	.word	0x08006ed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	08006ed4 	.word	0x08006ed4

080001c8 <__aeabi_d2f>:
 80001c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80001cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80001d0:	bf24      	itt	cs
 80001d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80001d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80001da:	d90d      	bls.n	80001f8 <__aeabi_d2f+0x30>
 80001dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80001e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80001e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80001e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80001ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80001f0:	bf08      	it	eq
 80001f2:	f020 0001 	biceq.w	r0, r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80001fc:	d121      	bne.n	8000242 <__aeabi_d2f+0x7a>
 80001fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000202:	bfbc      	itt	lt
 8000204:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000208:	4770      	bxlt	lr
 800020a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000212:	f1c2 0218 	rsb	r2, r2, #24
 8000216:	f1c2 0c20 	rsb	ip, r2, #32
 800021a:	fa10 f30c 	lsls.w	r3, r0, ip
 800021e:	fa20 f002 	lsr.w	r0, r0, r2
 8000222:	bf18      	it	ne
 8000224:	f040 0001 	orrne.w	r0, r0, #1
 8000228:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800022c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000230:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000234:	ea40 000c 	orr.w	r0, r0, ip
 8000238:	fa23 f302 	lsr.w	r3, r3, r2
 800023c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000240:	e7cc      	b.n	80001dc <__aeabi_d2f+0x14>
 8000242:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000246:	d107      	bne.n	8000258 <__aeabi_d2f+0x90>
 8000248:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800024c:	bf1e      	ittt	ne
 800024e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000252:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000256:	4770      	bxne	lr
 8000258:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800025c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b974 	b.w	8000568 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9d08      	ldr	r5, [sp, #32]
 800029e:	4604      	mov	r4, r0
 80002a0:	468e      	mov	lr, r1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d14d      	bne.n	8000342 <__udivmoddi4+0xaa>
 80002a6:	428a      	cmp	r2, r1
 80002a8:	4694      	mov	ip, r2
 80002aa:	d969      	bls.n	8000380 <__udivmoddi4+0xe8>
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	b152      	cbz	r2, 80002c8 <__udivmoddi4+0x30>
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	f1c2 0120 	rsb	r1, r2, #32
 80002ba:	fa20 f101 	lsr.w	r1, r0, r1
 80002be:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c2:	ea41 0e03 	orr.w	lr, r1, r3
 80002c6:	4094      	lsls	r4, r2
 80002c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002cc:	0c21      	lsrs	r1, r4, #16
 80002ce:	fbbe f6f8 	udiv	r6, lr, r8
 80002d2:	fa1f f78c 	uxth.w	r7, ip
 80002d6:	fb08 e316 	mls	r3, r8, r6, lr
 80002da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002de:	fb06 f107 	mul.w	r1, r6, r7
 80002e2:	4299      	cmp	r1, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x64>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ee:	f080 811f 	bcs.w	8000530 <__udivmoddi4+0x298>
 80002f2:	4299      	cmp	r1, r3
 80002f4:	f240 811c 	bls.w	8000530 <__udivmoddi4+0x298>
 80002f8:	3e02      	subs	r6, #2
 80002fa:	4463      	add	r3, ip
 80002fc:	1a5b      	subs	r3, r3, r1
 80002fe:	b2a4      	uxth	r4, r4
 8000300:	fbb3 f0f8 	udiv	r0, r3, r8
 8000304:	fb08 3310 	mls	r3, r8, r0, r3
 8000308:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800030c:	fb00 f707 	mul.w	r7, r0, r7
 8000310:	42a7      	cmp	r7, r4
 8000312:	d90a      	bls.n	800032a <__udivmoddi4+0x92>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 33ff 	add.w	r3, r0, #4294967295
 800031c:	f080 810a 	bcs.w	8000534 <__udivmoddi4+0x29c>
 8000320:	42a7      	cmp	r7, r4
 8000322:	f240 8107 	bls.w	8000534 <__udivmoddi4+0x29c>
 8000326:	4464      	add	r4, ip
 8000328:	3802      	subs	r0, #2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	1be4      	subs	r4, r4, r7
 8000330:	2600      	movs	r6, #0
 8000332:	b11d      	cbz	r5, 800033c <__udivmoddi4+0xa4>
 8000334:	40d4      	lsrs	r4, r2
 8000336:	2300      	movs	r3, #0
 8000338:	e9c5 4300 	strd	r4, r3, [r5]
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0xc2>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80ef 	beq.w	800052a <__udivmoddi4+0x292>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x160>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xd4>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80f9 	bhi.w	800055e <__udivmoddi4+0x2c6>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0303 	sbc.w	r3, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	469e      	mov	lr, r3
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e0      	beq.n	800033c <__udivmoddi4+0xa4>
 800037a:	e9c5 4e00 	strd	r4, lr, [r5]
 800037e:	e7dd      	b.n	800033c <__udivmoddi4+0xa4>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xec>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	2a00      	cmp	r2, #0
 800038a:	f040 8092 	bne.w	80004b2 <__udivmoddi4+0x21a>
 800038e:	eba1 010c 	sub.w	r1, r1, ip
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2601      	movs	r6, #1
 800039c:	0c20      	lsrs	r0, r4, #16
 800039e:	fbb1 f3f7 	udiv	r3, r1, r7
 80003a2:	fb07 1113 	mls	r1, r7, r3, r1
 80003a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003aa:	fb0e f003 	mul.w	r0, lr, r3
 80003ae:	4288      	cmp	r0, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x12c>
 80003b2:	eb1c 0101 	adds.w	r1, ip, r1
 80003b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x12a>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2c0>
 80003c2:	4643      	mov	r3, r8
 80003c4:	1a09      	subs	r1, r1, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003cc:	fb07 1110 	mls	r1, r7, r0, r1
 80003d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x156>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x154>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2ca>
 80003ec:	4608      	mov	r0, r1
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f6:	e79c      	b.n	8000332 <__udivmoddi4+0x9a>
 80003f8:	f1c6 0720 	rsb	r7, r6, #32
 80003fc:	40b3      	lsls	r3, r6
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa20 f407 	lsr.w	r4, r0, r7
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	431c      	orrs	r4, r3
 8000410:	40f9      	lsrs	r1, r7
 8000412:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000416:	fa00 f306 	lsl.w	r3, r0, r6
 800041a:	fbb1 f8f9 	udiv	r8, r1, r9
 800041e:	0c20      	lsrs	r0, r4, #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fb09 1118 	mls	r1, r9, r8, r1
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	fb08 f00e 	mul.w	r0, r8, lr
 8000430:	4288      	cmp	r0, r1
 8000432:	fa02 f206 	lsl.w	r2, r2, r6
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b8>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2bc>
 8000444:	4288      	cmp	r0, r1
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2bc>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4461      	add	r1, ip
 8000450:	1a09      	subs	r1, r1, r0
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb1 f0f9 	udiv	r0, r1, r9
 8000458:	fb09 1110 	mls	r1, r9, r0, r1
 800045c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	458e      	cmp	lr, r1
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1e2>
 8000468:	eb1c 0101 	adds.w	r1, ip, r1
 800046c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2b4>
 8000472:	458e      	cmp	lr, r1
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2b4>
 8000476:	3802      	subs	r0, #2
 8000478:	4461      	add	r1, ip
 800047a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047e:	fba0 9402 	umull	r9, r4, r0, r2
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	42a1      	cmp	r1, r4
 8000488:	46c8      	mov	r8, r9
 800048a:	46a6      	mov	lr, r4
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x2a4>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x2a0>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x212>
 8000492:	ebb3 0208 	subs.w	r2, r3, r8
 8000496:	eb61 010e 	sbc.w	r1, r1, lr
 800049a:	fa01 f707 	lsl.w	r7, r1, r7
 800049e:	fa22 f306 	lsr.w	r3, r2, r6
 80004a2:	40f1      	lsrs	r1, r6
 80004a4:	431f      	orrs	r7, r3
 80004a6:	e9c5 7100 	strd	r7, r1, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	40d8      	lsrs	r0, r3
 80004b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004bc:	fa21 f303 	lsr.w	r3, r1, r3
 80004c0:	4091      	lsls	r1, r2
 80004c2:	4301      	orrs	r1, r0
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d0:	fb07 3610 	mls	r6, r7, r0, r3
 80004d4:	0c0b      	lsrs	r3, r1, #16
 80004d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004da:	fb00 f60e 	mul.w	r6, r0, lr
 80004de:	429e      	cmp	r6, r3
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x260>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b8>
 80004f0:	429e      	cmp	r6, r3
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b8>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	1b9b      	subs	r3, r3, r6
 80004fa:	b289      	uxth	r1, r1
 80004fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000500:	fb07 3316 	mls	r3, r7, r6, r3
 8000504:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000508:	fb06 f30e 	mul.w	r3, r6, lr
 800050c:	428b      	cmp	r3, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x28a>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f106 38ff 	add.w	r8, r6, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2b0>
 800051a:	428b      	cmp	r3, r1
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2b0>
 800051e:	3e02      	subs	r6, #2
 8000520:	4461      	add	r1, ip
 8000522:	1ac9      	subs	r1, r1, r3
 8000524:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0x104>
 800052a:	462e      	mov	r6, r5
 800052c:	4628      	mov	r0, r5
 800052e:	e705      	b.n	800033c <__udivmoddi4+0xa4>
 8000530:	4606      	mov	r6, r0
 8000532:	e6e3      	b.n	80002fc <__udivmoddi4+0x64>
 8000534:	4618      	mov	r0, r3
 8000536:	e6f8      	b.n	800032a <__udivmoddi4+0x92>
 8000538:	454b      	cmp	r3, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f8>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000544:	3801      	subs	r0, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f8>
 8000548:	4646      	mov	r6, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x28a>
 800054c:	4620      	mov	r0, r4
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1e2>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x260>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b8>
 8000558:	3b02      	subs	r3, #2
 800055a:	4461      	add	r1, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x12c>
 800055e:	4630      	mov	r0, r6
 8000560:	e709      	b.n	8000376 <__udivmoddi4+0xde>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x156>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <FIFO_GPIO_init>:
};

#define IMG_WIDTH  cam_sizes[cam_framesize].width
#define IMG_HEIGHT cam_sizes[cam_framesize].height

static void FIFO_GPIO_init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	4b38      	ldr	r3, [pc, #224]	; (8000658 <FIFO_GPIO_init+0xec>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a37      	ldr	r2, [pc, #220]	; (8000658 <FIFO_GPIO_init+0xec>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b35      	ldr	r3, [pc, #212]	; (8000658 <FIFO_GPIO_init+0xec>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b31      	ldr	r3, [pc, #196]	; (8000658 <FIFO_GPIO_init+0xec>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a30      	ldr	r2, [pc, #192]	; (8000658 <FIFO_GPIO_init+0xec>)
 8000598:	f043 0302 	orr.w	r3, r3, #2
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <FIFO_GPIO_init+0xec>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0302 	and.w	r3, r3, #2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <FIFO_GPIO_init+0xec>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a29      	ldr	r2, [pc, #164]	; (8000658 <FIFO_GPIO_init+0xec>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b27      	ldr	r3, [pc, #156]	; (8000658 <FIFO_GPIO_init+0xec>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pin = OV7725_OE_PIN;
 80005ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005d2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_OE_PORT, &GPIO_InitStructure);
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	4619      	mov	r1, r3
 80005da:	4820      	ldr	r0, [pc, #128]	; (800065c <FIFO_GPIO_init+0xf0>)
 80005dc:	f003 fe9c 	bl	8004318 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_WRST_PIN;
 80005e0:	2310      	movs	r3, #16
 80005e2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_WRST_PORT, &GPIO_InitStructure);
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	4619      	mov	r1, r3
 80005ea:	481c      	ldr	r0, [pc, #112]	; (800065c <FIFO_GPIO_init+0xf0>)
 80005ec:	f003 fe94 	bl	8004318 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_RRST_PIN;
 80005f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_RRST_PORT, &GPIO_InitStructure);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <FIFO_GPIO_init+0xf0>)
 80005fe:	f003 fe8b 	bl	8004318 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_RCLK_PIN;
 8000602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000606:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_RCLK_PORT, &GPIO_InitStructure);
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	4619      	mov	r1, r3
 800060e:	4814      	ldr	r0, [pc, #80]	; (8000660 <FIFO_GPIO_init+0xf4>)
 8000610:	f003 fe82 	bl	8004318 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_WE_PIN;
 8000614:	2302      	movs	r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_WE_PORT, &GPIO_InitStructure);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	4810      	ldr	r0, [pc, #64]	; (8000660 <FIFO_GPIO_init+0xf4>)
 8000620:	f003 fe7a 	bl	8004318 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_D0_PIN | OV7725_D1_PIN | OV7725_D2_PIN | OV7725_D3_PIN | OV7725_D4_PIN
 8000624:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8000628:	60fb      	str	r3, [r7, #12]
							 | OV7725_D5_PIN | OV7725_D6_PIN | OV7725_D7_PIN;
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(OV7725_DATA_PORT, &GPIO_InitStructure);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <FIFO_GPIO_init+0xf8>)
 800063e:	f003 fe6b 	bl	8004318 <HAL_GPIO_Init>

	FIFO_OE_L;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <FIFO_GPIO_init+0xf0>)
 8000644:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000648:	619a      	str	r2, [r3, #24]
	FIFO_WE_H;
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <FIFO_GPIO_init+0xf4>)
 800064c:	2202      	movs	r2, #2
 800064e:	619a      	str	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40020000 	.word	0x40020000
 8000660:	40020400 	.word	0x40020400
 8000664:	40020800 	.word	0x40020800

08000668 <VSYNC_GPIO_init>:

static void VSYNC_GPIO_init(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <VSYNC_GPIO_init+0x58>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <VSYNC_GPIO_init+0x58>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <VSYNC_GPIO_init+0x58>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Pin = OV7725_VSYNC_PIN;
 800068a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800068e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000690:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000694:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(OV7725_VSYNC_PORT, &GPIO_InitStructure);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <VSYNC_GPIO_init+0x5c>)
 80006a4:	f003 fe38 	bl	8004318 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(OV7725_VSYNC_EXTI_IRQ, 0, 3);
 80006a8:	2203      	movs	r2, #3
 80006aa:	2100      	movs	r1, #0
 80006ac:	2028      	movs	r0, #40	; 0x28
 80006ae:	f003 fa6a 	bl	8003b86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7725_VSYNC_EXTI_IRQ);
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f003 fa83 	bl	8003bbe <HAL_NVIC_EnableIRQ>
}
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020400 	.word	0x40020400

080006c8 <camera_GPIO_init>:

void camera_GPIO_init(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	SCCB_GPIO_init();
 80006cc:	f002 fa78 	bl	8002bc0 <SCCB_GPIO_init>
	FIFO_GPIO_init();
 80006d0:	f7ff ff4c 	bl	800056c <FIFO_GPIO_init>
	VSYNC_GPIO_init();
 80006d4:	f7ff ffc8 	bl	8000668 <VSYNC_GPIO_init>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <camera_init_internal>:

static CameraState camera_init_internal(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	uint8_t dev_id = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71fb      	strb	r3, [r7, #7]

	if (SCCB_send_byte(REG_COM7, COM7_REGISTER_RESET) == SCCB_FAIL) {
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	2012      	movs	r0, #18
 80006ea:	f002 fbf1 	bl	8002ed0 <SCCB_send_byte>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d101      	bne.n	80006f8 <camera_init_internal+0x1c>
		return CAM_NOT_FOUND;
 80006f4:	2302      	movs	r3, #2
 80006f6:	e035      	b.n	8000764 <camera_init_internal+0x88>
	}

	if (SCCB_read_byte(REG_VER, &dev_id, 1) == SCCB_FAIL) {
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	2201      	movs	r2, #1
 80006fc:	4619      	mov	r1, r3
 80006fe:	200b      	movs	r0, #11
 8000700:	f002 fc15 	bl	8002f2e <SCCB_read_byte>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <camera_init_internal+0x32>
		return CAM_NOT_FOUND;
 800070a:	2302      	movs	r3, #2
 800070c:	e02a      	b.n	8000764 <camera_init_internal+0x88>
	}

	if (dev_id == OV7725_ID) {
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b21      	cmp	r3, #33	; 0x21
 8000712:	d124      	bne.n	800075e <camera_init_internal+0x82>
		for (volatile uint16_t i = 0; i < INIT_REG_NUM; ++i) {
 8000714:	2300      	movs	r3, #0
 8000716:	80bb      	strh	r3, [r7, #4]
 8000718:	e01a      	b.n	8000750 <camera_init_internal+0x74>
			if (SCCB_send_byte(init_config[i].address, init_config[i].value) == SCCB_FAIL) {
 800071a:	88bb      	ldrh	r3, [r7, #4]
 800071c:	b29b      	uxth	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <camera_init_internal+0x90>)
 8000722:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000726:	b29a      	uxth	r2, r3
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	b29b      	uxth	r3, r3
 800072c:	490f      	ldr	r1, [pc, #60]	; (800076c <camera_init_internal+0x90>)
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	440b      	add	r3, r1
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	4619      	mov	r1, r3
 8000736:	4610      	mov	r0, r2
 8000738:	f002 fbca 	bl	8002ed0 <SCCB_send_byte>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d101      	bne.n	8000746 <camera_init_internal+0x6a>
				return CAM_INIT_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00e      	b.n	8000764 <camera_init_internal+0x88>
		for (volatile uint16_t i = 0; i < INIT_REG_NUM; ++i) {
 8000746:	88bb      	ldrh	r3, [r7, #4]
 8000748:	b29b      	uxth	r3, r3
 800074a:	3301      	adds	r3, #1
 800074c:	b29b      	uxth	r3, r3
 800074e:	80bb      	strh	r3, [r7, #4]
 8000750:	234d      	movs	r3, #77	; 0x4d
 8000752:	b29a      	uxth	r2, r3
 8000754:	88bb      	ldrh	r3, [r7, #4]
 8000756:	b29b      	uxth	r3, r3
 8000758:	429a      	cmp	r2, r3
 800075a:	d8de      	bhi.n	800071a <camera_init_internal+0x3e>
 800075c:	e001      	b.n	8000762 <camera_init_internal+0x86>
			}
		}
	} else {
		return CAM_NOT_FOUND;
 800075e:	2302      	movs	r3, #2
 8000760:	e000      	b.n	8000764 <camera_init_internal+0x88>
	}
	return CAM_CONFIGURED;
 8000762:	2303      	movs	r3, #3
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000000 	.word	0x20000000

08000770 <camera_init>:

CameraState camera_init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	volatile uint8_t retry = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
	while (camera_init_internal() != CAM_CONFIGURED) {
 800077a:	e00a      	b.n	8000792 <camera_init+0x22>
		++retry;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	3301      	adds	r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	71fb      	strb	r3, [r7, #7]
		if (retry > 5) {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b05      	cmp	r3, #5
 800078c:	d901      	bls.n	8000792 <camera_init+0x22>
			return CAM_NOT_INITED;
 800078e:	2300      	movs	r3, #0
 8000790:	e029      	b.n	80007e6 <camera_init+0x76>
	while (camera_init_internal() != CAM_CONFIGURED) {
 8000792:	f7ff ffa3 	bl	80006dc <camera_init_internal>
 8000796:	4603      	mov	r3, r0
 8000798:	2b03      	cmp	r3, #3
 800079a:	d1ef      	bne.n	800077c <camera_init+0xc>
		}
	}

	cam_set_effect(CAM_FX_NORMAL);
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fa2d 	bl	8000bfc <cam_set_effect>
	cam_set_lightmode(CAM_LIGHT_HOME);
 80007a2:	2004      	movs	r0, #4
 80007a4:	f000 f900 	bl	80009a8 <cam_set_lightmode>
	cam_set_saturation(0);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 f9e7 	bl	8000b7c <cam_set_saturation>
	cam_set_brightness(0);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f996 	bl	8000ae0 <cam_set_brightness>
	cam_set_contrast(2);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 fa05 	bl	8000bc4 <cam_set_contrast>
	// cam_set_frameoffset((240 - 120) / 2, (320 - 160) / 2);
	// cam_set_framesize(QQVGA_120x160);
	cam_set_window(IMG_WIDTH / 2, IMG_HEIGHT / 2, cam_framesize);
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <camera_init+0x80>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <camera_init+0x84>)
 80007c2:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80007c6:	085b      	lsrs	r3, r3, #1
 80007c8:	b298      	uxth	r0, r3
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <camera_init+0x80>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <camera_init+0x84>)
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	885b      	ldrh	r3, [r3, #2]
 80007d6:	085b      	lsrs	r3, r3, #1
 80007d8:	b29b      	uxth	r3, r3
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <camera_init+0x80>)
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	4619      	mov	r1, r3
 80007e0:	f000 f82c 	bl	800083c <cam_set_window>

	return CAM_CONFIGURED;
 80007e4:	2303      	movs	r3, #3
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000009b 	.word	0x2000009b
 80007f4:	08006f48 	.word	0x08006f48

080007f8 <cam_set_state>:
void cam_set_state(CameraState state) { cam_state = state; }
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <cam_set_state+0x1c>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	7013      	strb	r3, [r2, #0]
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	200000c8 	.word	0x200000c8

08000818 <cam_set_colormode>:

void cam_set_colormode(CamColorMode mode) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	// if (SCCB_send_byte(REG_COM7, cam_color_mode[mode]))
	// 	;
	cam_set_effect(CAM_FX_BW);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 f9ea 	bl	8000bfc <cam_set_effect>
	cam_colormode = mode;
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <cam_set_colormode+0x20>)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	7013      	strb	r3, [r2, #0]
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000009a 	.word	0x2000009a

0800083c <cam_set_window>:
	SCCB_send_byte(REG_HREF, temp);

	SCCB_send_byte(REG_DSPAuto, 0xff);
}

void cam_set_window(uint16_t off_x, uint16_t off_y, CamFrameSize size) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
 8000846:	460b      	mov	r3, r1
 8000848:	80bb      	strh	r3, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	70fb      	strb	r3, [r7, #3]
	uint8_t reg_raw, cal_temp;
	uint16_t width = cam_sizes[size].width;
 800084e:	78fb      	ldrb	r3, [r7, #3]
 8000850:	4a53      	ldr	r2, [pc, #332]	; (80009a0 <cam_set_window+0x164>)
 8000852:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000856:	81fb      	strh	r3, [r7, #14]
	uint16_t height = cam_sizes[size].height;
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	4a51      	ldr	r2, [pc, #324]	; (80009a0 <cam_set_window+0x164>)
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	885b      	ldrh	r3, [r3, #2]
 8000862:	81bb      	strh	r3, [r7, #12]

	SCCB_send_byte(REG_COM7, COM7_SELECT_QVGA | COM7_FORMAT_RGB565 | COM7_OUTPUT_RGB);
 8000864:	2146      	movs	r1, #70	; 0x46
 8000866:	2012      	movs	r0, #18
 8000868:	f002 fb32 	bl	8002ed0 <SCCB_send_byte>

	SCCB_read_byte(REG_HSTART, &reg_raw, 1);
 800086c:	f107 030a 	add.w	r3, r7, #10
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	2017      	movs	r0, #23
 8000876:	f002 fb5a 	bl	8002f2e <SCCB_read_byte>
	// MSB 8 bit stored in HSTART, LSB 2 bit stored in HREF
	cal_temp = (reg_raw + (off_x >> 2));
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	089b      	lsrs	r3, r3, #2
 800087e:	b29b      	uxth	r3, r3
 8000880:	b2da      	uxtb	r2, r3
 8000882:	7abb      	ldrb	r3, [r7, #10]
 8000884:	4413      	add	r3, r2
 8000886:	72fb      	strb	r3, [r7, #11]
	SCCB_send_byte(REG_HSTART, cal_temp);
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	4619      	mov	r1, r3
 800088c:	2017      	movs	r0, #23
 800088e:	f002 fb1f 	bl	8002ed0 <SCCB_send_byte>

	SCCB_read_byte(REG_VSTRT, &reg_raw, 1);
 8000892:	f107 030a 	add.w	r3, r7, #10
 8000896:	2201      	movs	r2, #1
 8000898:	4619      	mov	r1, r3
 800089a:	2019      	movs	r0, #25
 800089c:	f002 fb47 	bl	8002f2e <SCCB_read_byte>
	// MSB 8 bit stored in VSTART, LSB 1 bit stored in HREF
	cal_temp = (reg_raw + (off_y >> 1));
 80008a0:	88bb      	ldrh	r3, [r7, #4]
 80008a2:	085b      	lsrs	r3, r3, #1
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	7abb      	ldrb	r3, [r7, #10]
 80008aa:	4413      	add	r3, r2
 80008ac:	72fb      	strb	r3, [r7, #11]
	SCCB_send_byte(REG_VSTRT, cal_temp);
 80008ae:	7afb      	ldrb	r3, [r7, #11]
 80008b0:	4619      	mov	r1, r3
 80008b2:	2019      	movs	r0, #25
 80008b4:	f002 fb0c 	bl	8002ed0 <SCCB_send_byte>

	// horizontal sensor width, MSB 8 bit stored in HSIZE, LSB 2bit stored in HREF
	SCCB_send_byte(REG_HSIZE, width >> 2);
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	089b      	lsrs	r3, r3, #2
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4619      	mov	r1, r3
 80008c2:	2018      	movs	r0, #24
 80008c4:	f002 fb04 	bl	8002ed0 <SCCB_send_byte>
	// vertical sensor height, MSB 8 bit stored in VSIZE, LSB 1 bit stored in HREF
	SCCB_send_byte(REG_VSIZE, height >> 1);
 80008c8:	89bb      	ldrh	r3, [r7, #12]
 80008ca:	085b      	lsrs	r3, r3, #1
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4619      	mov	r1, r3
 80008d2:	201a      	movs	r0, #26
 80008d4:	f002 fafc 	bl	8002ed0 <SCCB_send_byte>

	SCCB_read_byte(REG_HREF, &reg_raw, 1);
 80008d8:	f107 030a 	add.w	r3, r7, #10
 80008dc:	2201      	movs	r2, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f002 fb24 	bl	8002f2e <SCCB_read_byte>
	// store width LSB, height LSB, offset x LSB, offset y LSB in HREF
	cal_temp = (reg_raw | (width & 0x03) | ((height & 0x01) << 2) | ((off_x & 0x03) << 4) | ((off_y & 0x01) << 6));
 80008e6:	89fb      	ldrh	r3, [r7, #14]
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	b25a      	sxtb	r2, r3
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b25a      	sxtb	r2, r3
 80008f8:	89bb      	ldrh	r3, [r7, #12]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	b25b      	sxtb	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b25a      	sxtb	r2, r3
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	011b      	lsls	r3, r3, #4
 800090c:	b25b      	sxtb	r3, r3
 800090e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000912:	b25b      	sxtb	r3, r3
 8000914:	4313      	orrs	r3, r2
 8000916:	b25a      	sxtb	r2, r3
 8000918:	88bb      	ldrh	r3, [r7, #4]
 800091a:	019b      	lsls	r3, r3, #6
 800091c:	b25b      	sxtb	r3, r3
 800091e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	72fb      	strb	r3, [r7, #11]
	SCCB_send_byte(REG_HREF, cal_temp);
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	4619      	mov	r1, r3
 800092e:	2032      	movs	r0, #50	; 0x32
 8000930:	f002 face 	bl	8002ed0 <SCCB_send_byte>

	// output size
	SCCB_send_byte(REG_HOutSize, width >> 2);
 8000934:	89fb      	ldrh	r3, [r7, #14]
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	b29b      	uxth	r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4619      	mov	r1, r3
 800093e:	2029      	movs	r0, #41	; 0x29
 8000940:	f002 fac6 	bl	8002ed0 <SCCB_send_byte>
	SCCB_send_byte(REG_VOutSize, height >> 1);
 8000944:	89bb      	ldrh	r3, [r7, #12]
 8000946:	085b      	lsrs	r3, r3, #1
 8000948:	b29b      	uxth	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4619      	mov	r1, r3
 800094e:	202c      	movs	r0, #44	; 0x2c
 8000950:	f002 fabe 	bl	8002ed0 <SCCB_send_byte>
	SCCB_read_byte(REG_EXHCH, &reg_raw, 1);
 8000954:	f107 030a 	add.w	r3, r7, #10
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	202a      	movs	r0, #42	; 0x2a
 800095e:	f002 fae6 	bl	8002f2e <SCCB_read_byte>
	cal_temp = (reg_raw | (width & 0x03) | ((height & 0x01) << 2));
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	b25a      	sxtb	r2, r3
 800096c:	7abb      	ldrb	r3, [r7, #10]
 800096e:	b25b      	sxtb	r3, r3
 8000970:	4313      	orrs	r3, r2
 8000972:	b25a      	sxtb	r2, r3
 8000974:	89bb      	ldrh	r3, [r7, #12]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	b25b      	sxtb	r3, r3
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	b25b      	sxtb	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b25b      	sxtb	r3, r3
 8000984:	72fb      	strb	r3, [r7, #11]

	SCCB_send_byte(REG_EXHCH, cal_temp);
 8000986:	7afb      	ldrb	r3, [r7, #11]
 8000988:	4619      	mov	r1, r3
 800098a:	202a      	movs	r0, #42	; 0x2a
 800098c:	f002 faa0 	bl	8002ed0 <SCCB_send_byte>

	cam_framesize = size;
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <cam_set_window+0x168>)
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	7013      	strb	r3, [r2, #0]
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	08006f48 	.word	0x08006f48
 80009a4:	2000009b 	.word	0x2000009b

080009a8 <cam_set_lightmode>:
	SCCB_send_byte(REG_EDGE1, EDGE1_THRESHOLD(thresh));
	SCCB_send_byte(REG_EDGE2, upperlim);
	SCCB_send_byte(REG_EDGE3, lowerlim);
}

void cam_set_lightmode(CamLightMode mode) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b05      	cmp	r3, #5
 80009b6:	f200 808d 	bhi.w	8000ad4 <cam_set_lightmode+0x12c>
 80009ba:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <cam_set_lightmode+0x18>)
 80009bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c0:	080009d9 	.word	0x080009d9
 80009c4:	080009fb 	.word	0x080009fb
 80009c8:	08000a2d 	.word	0x08000a2d
 80009cc:	08000a5f 	.word	0x08000a5f
 80009d0:	08000a91 	.word	0x08000a91
 80009d4:	08000ac3 	.word	0x08000ac3
		case CAM_LIGHT_AUTO:				// Auto
			SCCB_send_byte(REG_COM8, 0xff); // AWB on
 80009d8:	21ff      	movs	r1, #255	; 0xff
 80009da:	2013      	movs	r0, #19
 80009dc:	f002 fa78 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 80009e0:	2165      	movs	r1, #101	; 0x65
 80009e2:	200e      	movs	r0, #14
 80009e4:	f002 fa74 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 80009e8:	2100      	movs	r1, #0
 80009ea:	202d      	movs	r0, #45	; 0x2d
 80009ec:	f002 fa70 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 80009f0:	2100      	movs	r1, #0
 80009f2:	202e      	movs	r0, #46	; 0x2e
 80009f4:	f002 fa6c 	bl	8002ed0 <SCCB_send_byte>
			break;
 80009f8:	e06d      	b.n	8000ad6 <cam_set_lightmode+0x12e>
		case CAM_LIGHT_SUNNY:				// sunny
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 80009fa:	21fd      	movs	r1, #253	; 0xfd
 80009fc:	2013      	movs	r0, #19
 80009fe:	f002 fa67 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x5a);
 8000a02:	215a      	movs	r1, #90	; 0x5a
 8000a04:	2001      	movs	r0, #1
 8000a06:	f002 fa63 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x5c);
 8000a0a:	215c      	movs	r1, #92	; 0x5c
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f002 fa5f 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 8000a12:	2165      	movs	r1, #101	; 0x65
 8000a14:	200e      	movs	r0, #14
 8000a16:	f002 fa5b 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	202d      	movs	r0, #45	; 0x2d
 8000a1e:	f002 fa57 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8000a22:	2100      	movs	r1, #0
 8000a24:	202e      	movs	r0, #46	; 0x2e
 8000a26:	f002 fa53 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000a2a:	e054      	b.n	8000ad6 <cam_set_lightmode+0x12e>
		case CAM_LIGHT_CLOUDY:				// cloudy
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8000a2c:	21fd      	movs	r1, #253	; 0xfd
 8000a2e:	2013      	movs	r0, #19
 8000a30:	f002 fa4e 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x58);
 8000a34:	2158      	movs	r1, #88	; 0x58
 8000a36:	2001      	movs	r0, #1
 8000a38:	f002 fa4a 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x60);
 8000a3c:	2160      	movs	r1, #96	; 0x60
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f002 fa46 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 8000a44:	2165      	movs	r1, #101	; 0x65
 8000a46:	200e      	movs	r0, #14
 8000a48:	f002 fa42 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	202d      	movs	r0, #45	; 0x2d
 8000a50:	f002 fa3e 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8000a54:	2100      	movs	r1, #0
 8000a56:	202e      	movs	r0, #46	; 0x2e
 8000a58:	f002 fa3a 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000a5c:	e03b      	b.n	8000ad6 <cam_set_lightmode+0x12e>
		case CAM_LIGHT_OFFICE:				// office
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8000a5e:	21fd      	movs	r1, #253	; 0xfd
 8000a60:	2013      	movs	r0, #19
 8000a62:	f002 fa35 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x84);
 8000a66:	2184      	movs	r1, #132	; 0x84
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f002 fa31 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x4c);
 8000a6e:	214c      	movs	r1, #76	; 0x4c
 8000a70:	2002      	movs	r0, #2
 8000a72:	f002 fa2d 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 8000a76:	2165      	movs	r1, #101	; 0x65
 8000a78:	200e      	movs	r0, #14
 8000a7a:	f002 fa29 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	202d      	movs	r0, #45	; 0x2d
 8000a82:	f002 fa25 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8000a86:	2100      	movs	r1, #0
 8000a88:	202e      	movs	r0, #46	; 0x2e
 8000a8a:	f002 fa21 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000a8e:	e022      	b.n	8000ad6 <cam_set_lightmode+0x12e>
		case CAM_LIGHT_HOME:				// home
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8000a90:	21fd      	movs	r1, #253	; 0xfd
 8000a92:	2013      	movs	r0, #19
 8000a94:	f002 fa1c 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x96);
 8000a98:	2196      	movs	r1, #150	; 0x96
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f002 fa18 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x40);
 8000aa0:	2140      	movs	r1, #64	; 0x40
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f002 fa14 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 8000aa8:	2165      	movs	r1, #101	; 0x65
 8000aaa:	200e      	movs	r0, #14
 8000aac:	f002 fa10 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	202d      	movs	r0, #45	; 0x2d
 8000ab4:	f002 fa0c 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	202e      	movs	r0, #46	; 0x2e
 8000abc:	f002 fa08 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000ac0:	e009      	b.n	8000ad6 <cam_set_lightmode+0x12e>

		case CAM_LIGHT_NIGHT:				// night
			SCCB_send_byte(REG_COM8, 0xff); // AWB on
 8000ac2:	21ff      	movs	r1, #255	; 0xff
 8000ac4:	2013      	movs	r0, #19
 8000ac6:	f002 fa03 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0xe5);
 8000aca:	21e5      	movs	r1, #229	; 0xe5
 8000acc:	200e      	movs	r0, #14
 8000ace:	f002 f9ff 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000ad2:	e000      	b.n	8000ad6 <cam_set_lightmode+0x12e>
		default: break;
 8000ad4:	bf00      	nop
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop

08000ae0 <cam_set_brightness>:

void cam_set_brightness(int8_t brightness) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t _sign = (brightness >= 0) ? 0x06 : 0x0E;
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db01      	blt.n	8000af6 <cam_set_brightness+0x16>
 8000af2:	2306      	movs	r3, #6
 8000af4:	e000      	b.n	8000af8 <cam_set_brightness+0x18>
 8000af6:	230e      	movs	r3, #14
 8000af8:	73fb      	strb	r3, [r7, #15]
	uint8_t _brightness;

	switch (brightness) {
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	3304      	adds	r3, #4
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d827      	bhi.n	8000b54 <cam_set_brightness+0x74>
 8000b04:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <cam_set_brightness+0x2c>)
 8000b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0a:	bf00      	nop
 8000b0c:	08000b37 	.word	0x08000b37
 8000b10:	08000b3d 	.word	0x08000b3d
 8000b14:	08000b43 	.word	0x08000b43
 8000b18:	08000b4f 	.word	0x08000b4f
 8000b1c:	08000b49 	.word	0x08000b49
 8000b20:	08000b43 	.word	0x08000b43
 8000b24:	08000b3d 	.word	0x08000b3d
 8000b28:	08000b37 	.word	0x08000b37
 8000b2c:	08000b31 	.word	0x08000b31
		case 4: _brightness = 0x48; break;
 8000b30:	2348      	movs	r3, #72	; 0x48
 8000b32:	73bb      	strb	r3, [r7, #14]
 8000b34:	e013      	b.n	8000b5e <cam_set_brightness+0x7e>
		case 3:
		case -4: _brightness = 0x38; break;
 8000b36:	2338      	movs	r3, #56	; 0x38
 8000b38:	73bb      	strb	r3, [r7, #14]
 8000b3a:	e010      	b.n	8000b5e <cam_set_brightness+0x7e>
		case 2:
		case -3: _brightness = 0x28; break;
 8000b3c:	2328      	movs	r3, #40	; 0x28
 8000b3e:	73bb      	strb	r3, [r7, #14]
 8000b40:	e00d      	b.n	8000b5e <cam_set_brightness+0x7e>
		case 1:
		case -2: _brightness = 0x18; break;
 8000b42:	2318      	movs	r3, #24
 8000b44:	73bb      	strb	r3, [r7, #14]
 8000b46:	e00a      	b.n	8000b5e <cam_set_brightness+0x7e>
		case 0: _brightness = 0x00; break;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73bb      	strb	r3, [r7, #14]
 8000b4c:	e007      	b.n	8000b5e <cam_set_brightness+0x7e>
		case -1: _brightness = 0x08; break;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	73bb      	strb	r3, [r7, #14]
 8000b52:	e004      	b.n	8000b5e <cam_set_brightness+0x7e>
		default: _brightness = _sign = 0; break;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	73bb      	strb	r3, [r7, #14]
 8000b5c:	bf00      	nop
	}

	SCCB_send_byte(REG_BRIGHT, _brightness);
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	4619      	mov	r1, r3
 8000b62:	209b      	movs	r0, #155	; 0x9b
 8000b64:	f002 f9b4 	bl	8002ed0 <SCCB_send_byte>
	SCCB_send_byte(REG_SIGN, _sign);
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	20ab      	movs	r0, #171	; 0xab
 8000b6e:	f002 f9af 	bl	8002ed0 <SCCB_send_byte>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop

08000b7c <cam_set_saturation>:

void cam_set_saturation(int8_t sat) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	if (sat >= -4 && sat <= 4) {
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	f113 0f04 	cmn.w	r3, #4
 8000b8e:	db15      	blt.n	8000bbc <cam_set_saturation+0x40>
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	dc11      	bgt.n	8000bbc <cam_set_saturation+0x40>
		SCCB_send_byte(REG_USAT, (sat + 4) << 4);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	20a7      	movs	r0, #167	; 0xa7
 8000ba6:	f002 f993 	bl	8002ed0 <SCCB_send_byte>
		SCCB_send_byte(REG_VSAT, (sat + 4) << 4);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	3304      	adds	r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	20a8      	movs	r0, #168	; 0xa8
 8000bb8:	f002 f98a 	bl	8002ed0 <SCCB_send_byte>
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <cam_set_contrast>:

void cam_set_contrast(int8_t contrast) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	if (contrast >= -4 && contrast <= 4)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	f113 0f04 	cmn.w	r3, #4
 8000bd6:	db0d      	blt.n	8000bf4 <cam_set_contrast+0x30>
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	dc09      	bgt.n	8000bf4 <cam_set_contrast+0x30>
		SCCB_send_byte(REG_CNST, (0x30 - (4 - contrast) * 4));
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	3308      	adds	r3, #8
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	209c      	movs	r0, #156	; 0x9c
 8000bf0:	f002 f96e 	bl	8002ed0 <SCCB_send_byte>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <cam_set_effect>:

void cam_set_effect(CamEffect effect) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	switch (effect) {
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d864      	bhi.n	8000cd6 <cam_set_effect+0xda>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <cam_set_effect+0x18>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000c31 	.word	0x08000c31
 8000c18:	08000c4b 	.word	0x08000c4b
 8000c1c:	08000c65 	.word	0x08000c65
 8000c20:	08000c7f 	.word	0x08000c7f
 8000c24:	08000c99 	.word	0x08000c99
 8000c28:	08000cb3 	.word	0x08000cb3
 8000c2c:	08000ccd 	.word	0x08000ccd
		case CAM_FX_NORMAL: // normal
			SCCB_send_byte(REG_SDE, 0x06);
 8000c30:	2106      	movs	r1, #6
 8000c32:	20a6      	movs	r0, #166	; 0xa6
 8000c34:	f002 f94c 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x80);
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	2060      	movs	r0, #96	; 0x60
 8000c3c:	f002 f948 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x80);
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	2061      	movs	r0, #97	; 0x61
 8000c44:	f002 f944 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000c48:	e046      	b.n	8000cd8 <cam_set_effect+0xdc>

		case CAM_FX_BW: // Black and white
			SCCB_send_byte(REG_SDE, 0x26);
 8000c4a:	2126      	movs	r1, #38	; 0x26
 8000c4c:	20a6      	movs	r0, #166	; 0xa6
 8000c4e:	f002 f93f 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x80);
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	2060      	movs	r0, #96	; 0x60
 8000c56:	f002 f93b 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x80);
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	2061      	movs	r0, #97	; 0x61
 8000c5e:	f002 f937 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000c62:	e039      	b.n	8000cd8 <cam_set_effect+0xdc>

		case CAM_FX_BLUE: // blue
			SCCB_send_byte(REG_SDE, 0x1e);
 8000c64:	211e      	movs	r1, #30
 8000c66:	20a6      	movs	r0, #166	; 0xa6
 8000c68:	f002 f932 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0xa0);
 8000c6c:	21a0      	movs	r1, #160	; 0xa0
 8000c6e:	2060      	movs	r0, #96	; 0x60
 8000c70:	f002 f92e 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x40);
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	2061      	movs	r0, #97	; 0x61
 8000c78:	f002 f92a 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000c7c:	e02c      	b.n	8000cd8 <cam_set_effect+0xdc>

		case CAM_FX_SEPIA: // Sepia
			SCCB_send_byte(REG_SDE, 0x1e);
 8000c7e:	211e      	movs	r1, #30
 8000c80:	20a6      	movs	r0, #166	; 0xa6
 8000c82:	f002 f925 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x40);
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	2060      	movs	r0, #96	; 0x60
 8000c8a:	f002 f921 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0xa0);
 8000c8e:	21a0      	movs	r1, #160	; 0xa0
 8000c90:	2061      	movs	r0, #97	; 0x61
 8000c92:	f002 f91d 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000c96:	e01f      	b.n	8000cd8 <cam_set_effect+0xdc>

		case CAM_FX_RED: // red
			SCCB_send_byte(REG_SDE, 0x1e);
 8000c98:	211e      	movs	r1, #30
 8000c9a:	20a6      	movs	r0, #166	; 0xa6
 8000c9c:	f002 f918 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x80);
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	2060      	movs	r0, #96	; 0x60
 8000ca4:	f002 f914 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0xc0);
 8000ca8:	21c0      	movs	r1, #192	; 0xc0
 8000caa:	2061      	movs	r0, #97	; 0x61
 8000cac:	f002 f910 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000cb0:	e012      	b.n	8000cd8 <cam_set_effect+0xdc>

		case CAM_FX_GREEN: // green
			SCCB_send_byte(REG_SDE, 0x1e);
 8000cb2:	211e      	movs	r1, #30
 8000cb4:	20a6      	movs	r0, #166	; 0xa6
 8000cb6:	f002 f90b 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x60);
 8000cba:	2160      	movs	r1, #96	; 0x60
 8000cbc:	2060      	movs	r0, #96	; 0x60
 8000cbe:	f002 f907 	bl	8002ed0 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x60);
 8000cc2:	2160      	movs	r1, #96	; 0x60
 8000cc4:	2061      	movs	r0, #97	; 0x61
 8000cc6:	f002 f903 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000cca:	e005      	b.n	8000cd8 <cam_set_effect+0xdc>

		case CAM_FX_NEGATIVE: // negative
			SCCB_send_byte(REG_SDE, 0x46);
 8000ccc:	2146      	movs	r1, #70	; 0x46
 8000cce:	20a6      	movs	r0, #166	; 0xa6
 8000cd0:	f002 f8fe 	bl	8002ed0 <SCCB_send_byte>
			break;
 8000cd4:	e000      	b.n	8000cd8 <cam_set_effect+0xdc>

		default: break;
 8000cd6:	bf00      	nop
	}
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <cam_is_frame_ready>:
CameraState cam_get_state(void) { return cam_state; }
uint8_t cam_is_frame_ready(void) { return cam_state >= CAM_FRAME_READY; }
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <cam_is_frame_ready+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf8c      	ite	hi
 8000cee:	2301      	movhi	r3, #1
 8000cf0:	2300      	movls	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200000c8 	.word	0x200000c8

08000d04 <cam_get_rgb565>:
	FIFO_RCLK_L;
	*rgb565 |= (OV7725_DATA_PORT->IDR >> 6) & 0x00FF;
	FIFO_RCLK_H;
}

void cam_get_rgb565(uint16_t* image) {
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	FIFO_PREPARE;
 8000d0c:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <cam_get_rgb565+0xe4>)
 8000d0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d12:	619a      	str	r2, [r3, #24]
 8000d14:	4b35      	ldr	r3, [pc, #212]	; (8000dec <cam_get_rgb565+0xe8>)
 8000d16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d1a:	619a      	str	r2, [r3, #24]
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <cam_get_rgb565+0xe8>)
 8000d1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d22:	619a      	str	r2, [r3, #24]
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <cam_get_rgb565+0xe4>)
 8000d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <cam_get_rgb565+0xe8>)
 8000d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d32:	619a      	str	r2, [r3, #24]
 8000d34:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <cam_get_rgb565+0xe8>)
 8000d36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d3a:	619a      	str	r2, [r3, #24]
	uint16_t pixel = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 8000d40:	2300      	movs	r3, #0
 8000d42:	82fb      	strh	r3, [r7, #22]
 8000d44:	e034      	b.n	8000db0 <cam_get_rgb565+0xac>
 8000d46:	f107 030e 	add.w	r3, r7, #14
 8000d4a:	613b      	str	r3, [r7, #16]
	*rgb565 = 0;
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
	FIFO_RCLK_L;
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <cam_get_rgb565+0xe8>)
 8000d54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d58:	619a      	str	r2, [r3, #24]
	*rgb565 = (OV7725_DATA_PORT->IDR << 2) & 0xFF00;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <cam_get_rgb565+0xec>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	801a      	strh	r2, [r3, #0]
	FIFO_RCLK_H;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <cam_get_rgb565+0xe8>)
 8000d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d74:	619a      	str	r2, [r3, #24]
	FIFO_RCLK_L;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <cam_get_rgb565+0xe8>)
 8000d78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d7c:	619a      	str	r2, [r3, #24]
	*rgb565 |= (OV7725_DATA_PORT->IDR >> 6) & 0x00FF;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <cam_get_rgb565+0xec>)
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	099b      	lsrs	r3, r3, #6
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	881a      	ldrh	r2, [r3, #0]
 8000d8a:	b28b      	uxth	r3, r1
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	801a      	strh	r2, [r3, #0]
	FIFO_RCLK_H;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <cam_get_rgb565+0xe8>)
 8000d96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d9a:	619a      	str	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
		read_fifo_pixel(&pixel);
		image[i] = pixel;
 8000d9e:	8afb      	ldrh	r3, [r7, #22]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	89fa      	ldrh	r2, [r7, #14]
 8000da8:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 8000daa:	8afb      	ldrh	r3, [r7, #22]
 8000dac:	3301      	adds	r3, #1
 8000dae:	82fb      	strh	r3, [r7, #22]
 8000db0:	8afa      	ldrh	r2, [r7, #22]
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <cam_get_rgb565+0xf0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4619      	mov	r1, r3
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <cam_get_rgb565+0xf4>)
 8000dba:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <cam_get_rgb565+0xf0>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <cam_get_rgb565+0xf4>)
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	885b      	ldrh	r3, [r3, #2]
 8000dcc:	fb00 f303 	mul.w	r3, r0, r3
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbb8      	blt.n	8000d46 <cam_get_rgb565+0x42>
	}
	cam_state = CAM_CAPTURING;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <cam_get_rgb565+0xf8>)
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	701a      	strb	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40020800 	.word	0x40020800
 8000df4:	2000009b 	.word	0x2000009b
 8000df8:	08006f48 	.word	0x08006f48
 8000dfc:	200000c8 	.word	0x200000c8

08000e00 <cam_rgb2printable>:

void cam_rgb2printable(uint16_t* image, uint16_t* printable) {
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	81fb      	strh	r3, [r7, #14]
 8000e0e:	e013      	b.n	8000e38 <cam_rgb2printable+0x38>
		printable[i] = __REVSH(image[i]);
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	81bb      	strh	r3, [r7, #12]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8000e1e:	89bb      	ldrh	r3, [r7, #12]
 8000e20:	ba5b      	rev16	r3, r3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b219      	sxth	r1, r3
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b28a      	uxth	r2, r1
 8000e30:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	3301      	adds	r3, #1
 8000e36:	81fb      	strh	r3, [r7, #14]
 8000e38:	89fa      	ldrh	r2, [r7, #14]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <cam_rgb2printable+0x6c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <cam_rgb2printable+0x70>)
 8000e42:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8000e46:	4618      	mov	r0, r3
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <cam_rgb2printable+0x6c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4908      	ldr	r1, [pc, #32]	; (8000e70 <cam_rgb2printable+0x70>)
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	885b      	ldrh	r3, [r3, #2]
 8000e54:	fb00 f303 	mul.w	r3, r0, r3
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbd9      	blt.n	8000e10 <cam_rgb2printable+0x10>
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	2000009b 	.word	0x2000009b
 8000e70:	08006f48 	.word	0x08006f48

08000e74 <HAL_GPIO_EXTI_Callback>:
#pragma GCC pop_options

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OV7725_VSYNC_PIN) {
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e84:	d121      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x56>
		if (cam_state == CAM_CAPTURING) {
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x64>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d110      	bne.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x3e>
			FIFO_WRST_L;
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_GPIO_EXTI_Callback+0x68>)
 8000e92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e96:	619a      	str	r2, [r3, #24]
			FIFO_WE_H;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	619a      	str	r2, [r3, #24]

			cam_state = CAM_FRAME_READY;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	701a      	strb	r2, [r3, #0]

			FIFO_WE_H;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	619a      	str	r2, [r3, #24]
			FIFO_WRST_H;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_GPIO_EXTI_Callback+0x68>)
 8000eac:	2210      	movs	r2, #16
 8000eae:	619a      	str	r2, [r3, #24]
		} else if (cam_state == CAM_FRAME_READY) {
			FIFO_WE_L;
			cam_state = CAM_MISSED_FRAME;
		}
	}
}
 8000eb0:	e00b      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x56>
		} else if (cam_state == CAM_FRAME_READY) {
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x64>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d106      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x56>
			FIFO_WE_L;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec2:	619a      	str	r2, [r3, #24]
			cam_state = CAM_MISSED_FRAME;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ec6:	2206      	movs	r2, #6
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200000c8 	.word	0x200000c8
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000eea:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <MX_CAN1_Init+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000f02:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000f06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000f0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f0e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_CAN1_Init+0x64>)
 8000f36:	f002 fc4f 	bl	80037d8 <HAL_CAN_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f40:	f001 fe38 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000cc 	.word	0x200000cc
 8000f4c:	40006400 	.word	0x40006400

08000f50 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <MX_CAN2_Init+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f6e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000f72:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f7a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_CAN2_Init+0x64>)
 8000fa2:	f002 fc19 	bl	80037d8 <HAL_CAN_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000fac:	f001 fe02 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000f4 	.word	0x200000f4
 8000fb8:	40006800 	.word	0x40006800

08000fbc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a43      	ldr	r2, [pc, #268]	; (80010e8 <HAL_CAN_MspInit+0x12c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d136      	bne.n	800104c <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fde:	4b43      	ldr	r3, [pc, #268]	; (80010ec <HAL_CAN_MspInit+0x130>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a41      	ldr	r2, [pc, #260]	; (80010ec <HAL_CAN_MspInit+0x130>)
 8000fe6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fe8:	4b40      	ldr	r3, [pc, #256]	; (80010ec <HAL_CAN_MspInit+0x130>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10d      	bne.n	800100c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
 8000ff4:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a3d      	ldr	r2, [pc, #244]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 8000ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8001000:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a36      	ldr	r2, [pc, #216]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001028:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800103a:	2309      	movs	r3, #9
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	482b      	ldr	r0, [pc, #172]	; (80010f4 <HAL_CAN_MspInit+0x138>)
 8001046:	f003 f967 	bl	8004318 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800104a:	e048      	b.n	80010de <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a29      	ldr	r2, [pc, #164]	; (80010f8 <HAL_CAN_MspInit+0x13c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d143      	bne.n	80010de <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 8001060:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HAL_CAN_MspInit+0x130>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HAL_CAN_MspInit+0x130>)
 800107a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_CAN_MspInit+0x130>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d10d      	bne.n	80010a0 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 800108e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_CAN_MspInit+0x134>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80010ce:	2309      	movs	r3, #9
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4808      	ldr	r0, [pc, #32]	; (80010fc <HAL_CAN_MspInit+0x140>)
 80010da:	f003 f91d 	bl	8004318 <HAL_GPIO_Init>
}
 80010de:	bf00      	nop
 80010e0:	3730      	adds	r7, #48	; 0x30
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40006400 	.word	0x40006400
 80010ec:	2000011c 	.word	0x2000011c
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40006800 	.word	0x40006800
 80010fc:	40020400 	.word	0x40020400

08001100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_DMA_Init+0x3c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <MX_DMA_Init+0x3c>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_DMA_Init+0x3c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	203b      	movs	r0, #59	; 0x3b
 8001128:	f002 fd2d 	bl	8003b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800112c:	203b      	movs	r0, #59	; 0x3b
 800112e:	f002 fd46 	bl	8003bbe <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800

08001140 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b6c      	ldr	r3, [pc, #432]	; (800130c <MX_GPIO_Init+0x1cc>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a6b      	ldr	r2, [pc, #428]	; (800130c <MX_GPIO_Init+0x1cc>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b69      	ldr	r3, [pc, #420]	; (800130c <MX_GPIO_Init+0x1cc>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b65      	ldr	r3, [pc, #404]	; (800130c <MX_GPIO_Init+0x1cc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a64      	ldr	r2, [pc, #400]	; (800130c <MX_GPIO_Init+0x1cc>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b62      	ldr	r3, [pc, #392]	; (800130c <MX_GPIO_Init+0x1cc>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b5e      	ldr	r3, [pc, #376]	; (800130c <MX_GPIO_Init+0x1cc>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a5d      	ldr	r2, [pc, #372]	; (800130c <MX_GPIO_Init+0x1cc>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b5b      	ldr	r3, [pc, #364]	; (800130c <MX_GPIO_Init+0x1cc>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b57      	ldr	r3, [pc, #348]	; (800130c <MX_GPIO_Init+0x1cc>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a56      	ldr	r2, [pc, #344]	; (800130c <MX_GPIO_Init+0x1cc>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <MX_GPIO_Init+0x1cc>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <MX_GPIO_Init+0x1cc>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a4f      	ldr	r2, [pc, #316]	; (800130c <MX_GPIO_Init+0x1cc>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b4d      	ldr	r3, [pc, #308]	; (800130c <MX_GPIO_Init+0x1cc>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f248 0150 	movw	r1, #32848	; 0x8050
 80011e8:	4849      	ldr	r0, [pc, #292]	; (8001310 <MX_GPIO_Init+0x1d0>)
 80011ea:	f003 fa49 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2130      	movs	r1, #48	; 0x30
 80011f2:	4848      	ldr	r0, [pc, #288]	; (8001314 <MX_GPIO_Init+0x1d4>)
 80011f4:	f003 fa44 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 80011f8:	2200      	movs	r2, #0
 80011fa:	f248 01f3 	movw	r1, #33011	; 0x80f3
 80011fe:	4846      	ldr	r0, [pc, #280]	; (8001318 <MX_GPIO_Init+0x1d8>)
 8001200:	f003 fa3e 	bl	8004680 <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PC0 PC1 PC2
                           PC3 PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAM_D7_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001204:	f643 73cf 	movw	r3, #16335	; 0x3fcf
 8001208:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|CAM_D0_Pin|CAM_D1_Pin|CAM_D2_Pin
                          |CAM_D3_Pin|CAM_D4_Pin|CAM_D5_Pin|CAM_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	483e      	ldr	r0, [pc, #248]	; (8001314 <MX_GPIO_Init+0x1d4>)
 800121a:	f003 f87d 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_HREF_Pin|CAM_RRST_Pin;
 800121e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4837      	ldr	r0, [pc, #220]	; (8001310 <MX_GPIO_Init+0x1d0>)
 8001234:	f003 f870 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin;
 8001238:	f248 0350 	movw	r3, #32848	; 0x8050
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	482f      	ldr	r0, [pc, #188]	; (8001310 <MX_GPIO_Init+0x1d0>)
 8001252:	f003 f861 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8001256:	2330      	movs	r3, #48	; 0x30
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4829      	ldr	r0, [pc, #164]	; (8001314 <MX_GPIO_Init+0x1d4>)
 800126e:	f003 f853 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 8001272:	f248 03f3 	movw	r3, #33011	; 0x80f3
 8001276:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4823      	ldr	r0, [pc, #140]	; (8001318 <MX_GPIO_Init+0x1d8>)
 800128c:	f003 f844 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8001290:	2304      	movs	r3, #4
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	481d      	ldr	r0, [pc, #116]	; (8001318 <MX_GPIO_Init+0x1d8>)
 80012a4:	f003 f838 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 80012a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4816      	ldr	r0, [pc, #88]	; (8001318 <MX_GPIO_Init+0x1d8>)
 80012c0:	f003 f82a 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 80012c4:	2304      	movs	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_GPIO_Init+0x1dc>)
 80012d8:	f003 f81e 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80012dc:	2308      	movs	r3, #8
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	480a      	ldr	r0, [pc, #40]	; (8001318 <MX_GPIO_Init+0x1d8>)
 80012f0:	f003 f812 	bl	8004318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2028      	movs	r0, #40	; 0x28
 80012fa:	f002 fc44 	bl	8003b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012fe:	2028      	movs	r0, #40	; 0x28
 8001300:	f002 fc5d 	bl	8003bbe <HAL_NVIC_EnableIRQ>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020800 	.word	0x40020800
 8001318:	40020400 	.word	0x40020400
 800131c:	40020c00 	.word	0x40020c00

08001320 <tft_char_is_changed>:
/* Macro */
#define TFT_XY(x, y) ((y)*char_max_x + (x))  // 2D to 1D index

// Useful function to improve performance
static inline bool tft_char_is_changed(const TFTBuffer buf, uint8_t x,
        uint8_t y) {
 8001320:	b490      	push	{r4, r7}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
 800132c:	4613      	mov	r3, r2
 800132e:	70bb      	strb	r3, [r7, #2]
    const uint16_t idx = TFT_XY(x, y);
 8001330:	78bb      	ldrb	r3, [r7, #2]
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <tft_char_is_changed+0x110>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	fb12 f303 	smulbb	r3, r2, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4413      	add	r3, r2
 8001346:	81fb      	strh	r3, [r7, #14]
    return ((buf->text_buf[buf->curr_screen][idx]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	89fa      	ldrh	r2, [r7, #14]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4603      	mov	r3, r0
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4403      	add	r3, r0
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	440b      	add	r3, r1
 800135c:	4413      	add	r3, r2
 800135e:	3301      	adds	r3, #1
 8001360:	781a      	ldrb	r2, [r3, #0]
            != buf->text_buf[!buf->curr_screen][idx])
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	bf0c      	ite	eq
 800136a:	2301      	moveq	r3, #1
 800136c:	2300      	movne	r3, #0
 800136e:	b2db      	uxtb	r3, r3
 8001370:	461c      	mov	r4, r3
 8001372:	89f9      	ldrh	r1, [r7, #14]
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	4623      	mov	r3, r4
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4423      	add	r3, r4
 800137c:	015b      	lsls	r3, r3, #5
 800137e:	4403      	add	r3, r0
 8001380:	440b      	add	r3, r1
 8001382:	3301      	adds	r3, #1
 8001384:	781b      	ldrb	r3, [r3, #0]
            || (buf->text_color_buf[buf->curr_screen][idx]
                    != buf->text_color_buf[!buf->curr_screen][idx])
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001386:	429a      	cmp	r2, r3
 8001388:	d147      	bne.n	800141a <tft_char_is_changed+0xfa>
            || (buf->text_color_buf[buf->curr_screen][idx]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	89f9      	ldrh	r1, [r7, #14]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4603      	mov	r3, r0
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4403      	add	r3, r0
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	440b      	add	r3, r1
 800139e:	33a0      	adds	r3, #160	; 0xa0
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	885a      	ldrh	r2, [r3, #2]
                    != buf->text_color_buf[!buf->curr_screen][idx])
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	461c      	mov	r4, r3
 80013b6:	89f8      	ldrh	r0, [r7, #14]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4623      	mov	r3, r4
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4423      	add	r3, r4
 80013c0:	015b      	lsls	r3, r3, #5
 80013c2:	4403      	add	r3, r0
 80013c4:	33a0      	adds	r3, #160	; 0xa0
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	440b      	add	r3, r1
 80013ca:	885b      	ldrh	r3, [r3, #2]
            || (buf->text_color_buf[buf->curr_screen][idx]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d124      	bne.n	800141a <tft_char_is_changed+0xfa>
            || (buf->bg_color_buf[buf->curr_screen][idx]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	89f9      	ldrh	r1, [r7, #14]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4603      	mov	r3, r0
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4403      	add	r3, r0
 80013e0:	015b      	lsls	r3, r3, #5
 80013e2:	440b      	add	r3, r1
 80013e4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	885a      	ldrh	r2, [r3, #2]
                    != buf->bg_color_buf[!buf->curr_screen][idx]));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf0c      	ite	eq
 80013f6:	2301      	moveq	r3, #1
 80013f8:	2300      	movne	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461c      	mov	r4, r3
 80013fe:	89f8      	ldrh	r0, [r7, #14]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4623      	mov	r3, r4
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4423      	add	r3, r4
 8001408:	015b      	lsls	r3, r3, #5
 800140a:	4403      	add	r3, r0
 800140c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	440b      	add	r3, r1
 8001414:	885b      	ldrh	r3, [r3, #2]
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <tft_char_is_changed+0xfe>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <tft_char_is_changed+0x100>
 800141e:	2300      	movs	r3, #0
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bc90      	pop	{r4, r7}
 800142e:	4770      	bx	lr
 8001430:	20000129 	.word	0x20000129

08001434 <itos>:
 * @param      data  The string to write to
 * @param[in]  i     The signed integer to convert
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* itos(char *data, int32_t i) {
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
    if (i < 0) {
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da07      	bge.n	8001454 <itos+0x20>
        i = -i;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	425b      	negs	r3, r3
 8001448:	603b      	str	r3, [r7, #0]
        *data++ = '-';
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	222d      	movs	r2, #45	; 0x2d
 8001452:	701a      	strb	r2, [r3, #0]
    }
    char buf[14] = { 0 };
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	811a      	strh	r2, [r3, #8]
    char *ptr = &buf[1];
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	3301      	adds	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
    do {
        *ptr++ = '0' + (i % 10);
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <itos+0xa8>)
 8001470:	fb83 1302 	smull	r1, r3, r3, r2
 8001474:	1099      	asrs	r1, r3, #2
 8001476:	17d3      	asrs	r3, r2, #31
 8001478:	1ac9      	subs	r1, r1, r3
 800147a:	460b      	mov	r3, r1
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	1ad1      	subs	r1, r2, r3
 8001484:	b2ca      	uxtb	r2, r1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	61f9      	str	r1, [r7, #28]
 800148c:	3230      	adds	r2, #48	; 0x30
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <itos+0xa8>)
 8001496:	fb82 1203 	smull	r1, r2, r2, r3
 800149a:	1092      	asrs	r2, r2, #2
 800149c:	17db      	asrs	r3, r3, #31
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	603b      	str	r3, [r7, #0]
    } while (i);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e1      	bne.n	800146c <itos+0x38>
    ptr--;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
    while (*ptr) {
 80014ae:	e007      	b.n	80014c0 <itos+0x8c>
        *data++ = *ptr--;
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	1e53      	subs	r3, r2, #1
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	1c59      	adds	r1, r3, #1
 80014ba:	6079      	str	r1, [r7, #4]
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f3      	bne.n	80014b0 <itos+0x7c>
    }
    *data = '\0';
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
    return data;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3724      	adds	r7, #36	; 0x24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	66666667 	.word	0x66666667

080014e0 <utos0>:
 * @param[in]  i       The unsigned integer
 * @param[in]  digits  The number of digits
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* utos0(char *data, uint32_t i, uint32_t digits) {
 80014e0:	b480      	push	{r7}
 80014e2:	b08d      	sub	sp, #52	; 0x34
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
    char buf[20] = { 0 };
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
    char *ptr = &buf[1];
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	3301      	adds	r3, #1
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
    digits--;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3b01      	subs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
    uint32_t n = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
        *ptr++ = '0' + (i % 10);
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <utos0+0xb8>)
 8001514:	fba3 2301 	umull	r2, r3, r3, r1
 8001518:	08da      	lsrs	r2, r3, #3
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	1aca      	subs	r2, r1, r3
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001528:	1c59      	adds	r1, r3, #1
 800152a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800152c:	3230      	adds	r2, #48	; 0x30
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <utos0+0xb8>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	60bb      	str	r3, [r7, #8]
        n++;
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	3301      	adds	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (i);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1e2      	bne.n	8001510 <utos0+0x30>
    ptr--;
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	3b01      	subs	r3, #1
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (n++ <= digits) {
 8001550:	e004      	b.n	800155c <utos0+0x7c>
        *data++ = '0';
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60fa      	str	r2, [r7, #12]
 8001558:	2230      	movs	r2, #48	; 0x30
 800155a:	701a      	strb	r2, [r3, #0]
    while (n++ <= digits) {
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	62ba      	str	r2, [r7, #40]	; 0x28
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	d2f4      	bcs.n	8001552 <utos0+0x72>
    }
    while (*ptr) {
 8001568:	e007      	b.n	800157a <utos0+0x9a>
        *data++ = *ptr--;
 800156a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800156c:	1e53      	subs	r3, r2, #1
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1c59      	adds	r1, r3, #1
 8001574:	60f9      	str	r1, [r7, #12]
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f3      	bne.n	800156a <utos0+0x8a>
    }
    *data = '\0';
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
    return data;
 8001588:	68fb      	ldr	r3, [r7, #12]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3734      	adds	r7, #52	; 0x34
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	cccccccd 	.word	0xcccccccd

0800159c <ftos>:
 * @param[in]  i       The float
 * @param[in]  digits  The number of decimal places
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* ftos(char *data, float a, uint32_t dp) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80015a8:	6079      	str	r1, [r7, #4]
    int32_t i = a;
 80015aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b2:	ee17 3a90 	vmov	r3, s15
 80015b6:	61fb      	str	r3, [r7, #28]
    if (a < 0) {
 80015b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d515      	bpl.n	80015f2 <ftos+0x56>
        *data++ = '-';
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	60fa      	str	r2, [r7, #12]
 80015cc:	222d      	movs	r2, #45	; 0x2d
 80015ce:	701a      	strb	r2, [r3, #0]
        i = -i;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	425b      	negs	r3, r3
 80015d4:	61fb      	str	r3, [r7, #28]
        a = -a - i;
 80015d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015da:	eeb1 7a67 	vneg.f32	s14, s15
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ec:	edc7 7a02 	vstr	s15, [r7, #8]
 80015f0:	e00a      	b.n	8001608 <ftos+0x6c>
    } else {
        a = a - i;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001604:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    data = itos(data, i);
 8001608:	69f9      	ldr	r1, [r7, #28]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff ff12 	bl	8001434 <itos>
 8001610:	60f8      	str	r0, [r7, #12]
    *data++ = '.';
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	60fa      	str	r2, [r7, #12]
 8001618:	222e      	movs	r2, #46	; 0x2e
 800161a:	701a      	strb	r2, [r3, #0]
    float d = a;
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	61bb      	str	r3, [r7, #24]
    uint32_t __dp = dp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	617b      	str	r3, [r7, #20]
    while (dp--) {
 8001624:	e007      	b.n	8001636 <ftos+0x9a>
        d *= 10;
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800162e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001632:	edc7 7a06 	vstr	s15, [r7, #24]
    while (dp--) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f2      	bne.n	8001626 <ftos+0x8a>
    }
    if (__dp != 0)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00e      	beq.n	8001664 <ftos+0xc8>
        data = utos0(data, (uint32_t) (d + 0.5f), __dp);
 8001646:	edd7 7a06 	vldr	s15, [r7, #24]
 800164a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800164e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	ee17 1a90 	vmov	r1, s15
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff ff3f 	bl	80014e0 <utos0>
 8001662:	60f8      	str	r0, [r7, #12]
    return data;
 8001664:	68fb      	ldr	r3, [r7, #12]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3720      	adds	r7, #32
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <prints>:
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad) {
 800166e:	b4f0      	push	{r4, r5, r6, r7}
 8001670:	b08a      	sub	sp, #40	; 0x28
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	603b      	str	r3, [r7, #0]
    register int pc = 0, padchar = ' ';
 800167c:	2400      	movs	r4, #0
 800167e:	2320      	movs	r3, #32
 8001680:	4619      	mov	r1, r3

    if (width > 0) {
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	dd17      	ble.n	80016b8 <prints+0x4a>
        register int len = 0;
 8001688:	2500      	movs	r5, #0
        register const char *ptr;
        for (ptr = string; *ptr; ++ptr)
 800168a:	68be      	ldr	r6, [r7, #8]
 800168c:	e001      	b.n	8001692 <prints+0x24>
            ++len;
 800168e:	3501      	adds	r5, #1
        for (ptr = string; *ptr; ++ptr)
 8001690:	3601      	adds	r6, #1
 8001692:	7833      	ldrb	r3, [r6, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1fa      	bne.n	800168e <prints+0x20>
        if (len >= width)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	429d      	cmp	r5, r3
 800169c:	db02      	blt.n	80016a4 <prints+0x36>
            width = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	e002      	b.n	80016aa <prints+0x3c>
        else
            width -= len;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	1b5b      	subs	r3, r3, r5
 80016a8:	607b      	str	r3, [r7, #4]
        if (pad & PAD_ZERO)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <prints+0x4a>
            padchar = '0';
 80016b4:	2330      	movs	r3, #48	; 0x30
 80016b6:	4619      	mov	r1, r3
    }
    if (!(pad & PAD_RIGHT)) {
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d12c      	bne.n	800171c <prints+0xae>
        for (; width > 0; --width) {
 80016c2:	e012      	b.n	80016ea <prints+0x7c>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	460b      	mov	r3, r1
 80016ca:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a3a      	ldr	r2, [r7, #32]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
    ++(*str);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	601a      	str	r2, [r3, #0]
}
 80016e0:	bf00      	nop
            printchar(out, padchar);
            ++pc;
 80016e2:	3401      	adds	r4, #1
        for (; width > 0; --width) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	dce9      	bgt.n	80016c4 <prints+0x56>
        }
    }
    for (; *string; ++string) {
 80016f0:	e014      	b.n	800171c <prints+0xae>
        printchar(out, *string);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	601a      	str	r2, [r3, #0]
}
 8001712:	bf00      	nop
        ++pc;
 8001714:	3401      	adds	r4, #1
    for (; *string; ++string) {
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3301      	adds	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1e6      	bne.n	80016f2 <prints+0x84>
    }
    for (; width > 0; --width) {
 8001724:	e012      	b.n	800174c <prints+0xde>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	460b      	mov	r3, r1
 800172c:	613b      	str	r3, [r7, #16]
    **str = (char) c;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
        printchar(out, padchar);
        ++pc;
 8001744:	3401      	adds	r4, #1
    for (; width > 0; --width) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3b01      	subs	r3, #1
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	dce9      	bgt.n	8001726 <prints+0xb8>
    }

    return pc;
 8001752:	4623      	mov	r3, r4
}
 8001754:	4618      	mov	r0, r3
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bcf0      	pop	{r4, r5, r6, r7}
 800175c:	4770      	bx	lr

0800175e <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad,
        int letbase) {
 800175e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001762:	b08b      	sub	sp, #44	; 0x2c
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
    char print_buf[PRINT_BUF_LEN];
    register char *s;
    register int t, neg = 0, pc = 0;
 800176e:	f04f 0900 	mov.w	r9, #0
 8001772:	2600      	movs	r6, #0
    register unsigned int u = (unsigned int) i;
 8001774:	68bd      	ldr	r5, [r7, #8]

    if (i == 0) {
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10c      	bne.n	8001796 <printi+0x38>
        print_buf[0] = '0';
 800177c:	2330      	movs	r3, #48	; 0x30
 800177e:	753b      	strb	r3, [r7, #20]
        print_buf[1] = '\0';
 8001780:	2300      	movs	r3, #0
 8001782:	757b      	strb	r3, [r7, #21]
        return prints(out, print_buf, width, pad);
 8001784:	f107 0114 	add.w	r1, r7, #20
 8001788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff ff6e 	bl	800166e <prints>
 8001792:	4603      	mov	r3, r0
 8001794:	e055      	b.n	8001842 <printi+0xe4>
    }

    if (sg && b == 10 && i < 0) {
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00a      	beq.n	80017b2 <printi+0x54>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b0a      	cmp	r3, #10
 80017a0:	d107      	bne.n	80017b2 <printi+0x54>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da04      	bge.n	80017b2 <printi+0x54>
        neg = 1;
 80017a8:	f04f 0901 	mov.w	r9, #1
        u = (unsigned int) -i;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	425b      	negs	r3, r3
 80017b0:	461d      	mov	r5, r3
    }

    s = print_buf + PRINT_BUF_LEN - 1;
 80017b2:	f107 0414 	add.w	r4, r7, #20
 80017b6:	340b      	adds	r4, #11
    *s = '\0';
 80017b8:	2300      	movs	r3, #0
 80017ba:	7023      	strb	r3, [r4, #0]

    while (u) {
 80017bc:	e015      	b.n	80017ea <printi+0x8c>
        t = (unsigned int) u % b;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	fbb5 f2f3 	udiv	r2, r5, r3
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	1aeb      	subs	r3, r5, r3
 80017ca:	4698      	mov	r8, r3
        if (t >= 10)
 80017cc:	f1b8 0f09 	cmp.w	r8, #9
 80017d0:	dd02      	ble.n	80017d8 <printi+0x7a>
            t += letbase - '0' - 10;
 80017d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d4:	3b3a      	subs	r3, #58	; 0x3a
 80017d6:	4498      	add	r8, r3
        *--s = (char) (t + '0');
 80017d8:	fa5f f388 	uxtb.w	r3, r8
 80017dc:	3c01      	subs	r4, #1
 80017de:	3330      	adds	r3, #48	; 0x30
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	7023      	strb	r3, [r4, #0]
        u /= b;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	fbb5 f5f3 	udiv	r5, r5, r3
    while (u) {
 80017ea:	2d00      	cmp	r5, #0
 80017ec:	d1e7      	bne.n	80017be <printi+0x60>
    }

    if (neg) {
 80017ee:	f1b9 0f00 	cmp.w	r9, #0
 80017f2:	d01e      	beq.n	8001832 <printi+0xd4>
        if (width && (pad & PAD_ZERO)) {
 80017f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d018      	beq.n	800182c <printi+0xce>
 80017fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <printi+0xce>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
 8001808:	232d      	movs	r3, #45	; 0x2d
 800180a:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	601a      	str	r2, [r3, #0]
}
 8001820:	bf00      	nop
            printchar(out, '-');
            ++pc;
 8001822:	3601      	adds	r6, #1
            --width;
 8001824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001826:	3b01      	subs	r3, #1
 8001828:	64bb      	str	r3, [r7, #72]	; 0x48
 800182a:	e002      	b.n	8001832 <printi+0xd4>
        } else {
            *--s = '-';
 800182c:	3c01      	subs	r4, #1
 800182e:	232d      	movs	r3, #45	; 0x2d
 8001830:	7023      	strb	r3, [r4, #0]
        }
    }

    return pc + prints(out, s, width, pad);
 8001832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001836:	4621      	mov	r1, r4
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff ff18 	bl	800166e <prints>
 800183e:	4603      	mov	r3, r0
 8001840:	4433      	add	r3, r6
}
 8001842:	4618      	mov	r0, r3
 8001844:	372c      	adds	r7, #44	; 0x2c
 8001846:	46bd      	mov	sp, r7
 8001848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800184c <printf_>:

static int printf_(char **out, float f, int width, int dp, int pad) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	; 0x40
 8001850:	af00      	add	r7, sp, #0
 8001852:	6178      	str	r0, [r7, #20]
 8001854:	ed87 0a04 	vstr	s0, [r7, #16]
 8001858:	60f9      	str	r1, [r7, #12]
 800185a:	60ba      	str	r2, [r7, #8]
 800185c:	607b      	str	r3, [r7, #4]
    char buf[40] = { 0 };
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	2224      	movs	r2, #36	; 0x24
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f005 fb2a 	bl	8006ec4 <memset>
    ftos(buf, f, dp);
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	4611      	mov	r1, r2
 8001878:	ed97 0a04 	vldr	s0, [r7, #16]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fe8d 	bl	800159c <ftos>
    return prints(out, buf, width, pad);
 8001882:	f107 0118 	add.w	r1, r7, #24
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff feef 	bl	800166e <prints>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3740      	adds	r7, #64	; 0x40
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <print>:
 * @param out pointer to Output string
 * @param format Format string
 * @param args Arguments
 * @return length of string
 */
static int print(char **out, const char *format, va_list args) {
 800189c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a0:	b08c      	sub	sp, #48	; 0x30
 80018a2:	af04      	add	r7, sp, #16
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
    register int width, pad, dp;
    register int pc = 0;
 80018aa:	2400      	movs	r4, #0
    char scr[2];

    for (; *format != 0; ++format) {
 80018ac:	e109      	b.n	8001ac2 <print+0x226>
        if (*format == '%') {
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b25      	cmp	r3, #37	; 0x25
 80018b4:	f040 80ed 	bne.w	8001a92 <print+0x1f6>
            ++format;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	3301      	adds	r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
            width = pad = dp = 0;
 80018be:	f04f 0800 	mov.w	r8, #0
 80018c2:	4646      	mov	r6, r8
 80018c4:	4635      	mov	r5, r6
            if (*format == '\0')
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80ff 	beq.w	8001ace <print+0x232>
                break;
            if (*format == '%')
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b25      	cmp	r3, #37	; 0x25
 80018d6:	f000 80de 	beq.w	8001a96 <print+0x1fa>
                goto out;
            if (*format == '-') {
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b2d      	cmp	r3, #45	; 0x2d
 80018e0:	d109      	bne.n	80018f6 <print+0x5a>
                ++format;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3301      	adds	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
                pad = PAD_RIGHT;
 80018e8:	2601      	movs	r6, #1
            }
            while (*format == '0') {
 80018ea:	e004      	b.n	80018f6 <print+0x5a>
                ++format;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	3301      	adds	r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
                pad |= PAD_ZERO;
 80018f2:	f046 0602 	orr.w	r6, r6, #2
            while (*format == '0') {
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b30      	cmp	r3, #48	; 0x30
 80018fc:	d0f6      	beq.n	80018ec <print+0x50>
            }
            for (; *format >= '0' && *format <= '9'; ++format) {
 80018fe:	e00b      	b.n	8001918 <print+0x7c>
                width *= 10;
 8001900:	462b      	mov	r3, r5
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	442b      	add	r3, r5
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	461d      	mov	r5, r3
                width += *format - '0';
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	3b30      	subs	r3, #48	; 0x30
 8001910:	441d      	add	r5, r3
            for (; *format >= '0' && *format <= '9'; ++format) {
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	3301      	adds	r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b2f      	cmp	r3, #47	; 0x2f
 800191e:	d903      	bls.n	8001928 <print+0x8c>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b39      	cmp	r3, #57	; 0x39
 8001926:	d9eb      	bls.n	8001900 <print+0x64>
            }
            if (*format == '.') {
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b2e      	cmp	r3, #46	; 0x2e
 800192e:	d117      	bne.n	8001960 <print+0xc4>
                ++format;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3301      	adds	r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
                for (; *format >= '0' && *format <= '9'; ++format) {
 8001936:	e00b      	b.n	8001950 <print+0xb4>
                    dp *= 10;
 8001938:	4643      	mov	r3, r8
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4443      	add	r3, r8
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4698      	mov	r8, r3
                    dp += *format - '0';
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3b30      	subs	r3, #48	; 0x30
 8001948:	4498      	add	r8, r3
                for (; *format >= '0' && *format <= '9'; ++format) {
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b2f      	cmp	r3, #47	; 0x2f
 8001956:	d903      	bls.n	8001960 <print+0xc4>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b39      	cmp	r3, #57	; 0x39
 800195e:	d9eb      	bls.n	8001938 <print+0x9c>
                }
            }
            if (*format == 's') {
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b73      	cmp	r3, #115	; 0x73
 8001966:	d112      	bne.n	800198e <print+0xf2>
                register char *s = (char*) va_arg(args, int);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	1d1a      	adds	r2, r3, #4
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4698      	mov	r8, r3
                pc += prints(out, s ? s : "(null)", width, pad);
 8001972:	f1b8 0f00 	cmp.w	r8, #0
 8001976:	d001      	beq.n	800197c <print+0xe0>
 8001978:	4641      	mov	r1, r8
 800197a:	e000      	b.n	800197e <print+0xe2>
 800197c:	4957      	ldr	r1, [pc, #348]	; (8001adc <print+0x240>)
 800197e:	4633      	mov	r3, r6
 8001980:	462a      	mov	r2, r5
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7ff fe73 	bl	800166e <prints>
 8001988:	4603      	mov	r3, r0
 800198a:	441c      	add	r4, r3
                continue;
 800198c:	e096      	b.n	8001abc <print+0x220>
            }
            if (*format == 'd') {
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d10f      	bne.n	80019b6 <print+0x11a>
                pc += printi(out, va_arg(args, int), 10, 1, width, pad, 'a');
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	1d1a      	adds	r2, r3, #4
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	2361      	movs	r3, #97	; 0x61
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	9601      	str	r6, [sp, #4]
 80019a4:	9500      	str	r5, [sp, #0]
 80019a6:	2301      	movs	r3, #1
 80019a8:	220a      	movs	r2, #10
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fed7 	bl	800175e <printi>
 80019b0:	4603      	mov	r3, r0
 80019b2:	441c      	add	r4, r3
                continue;
 80019b4:	e082      	b.n	8001abc <print+0x220>
            }
            if (*format == 'x') {
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b78      	cmp	r3, #120	; 0x78
 80019bc:	d10f      	bne.n	80019de <print+0x142>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'a');
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	1d1a      	adds	r2, r3, #4
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	2361      	movs	r3, #97	; 0x61
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	9601      	str	r6, [sp, #4]
 80019cc:	9500      	str	r5, [sp, #0]
 80019ce:	2300      	movs	r3, #0
 80019d0:	2210      	movs	r2, #16
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f7ff fec3 	bl	800175e <printi>
 80019d8:	4603      	mov	r3, r0
 80019da:	441c      	add	r4, r3
                continue;
 80019dc:	e06e      	b.n	8001abc <print+0x220>
            }
            if (*format == 'X') {
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b58      	cmp	r3, #88	; 0x58
 80019e4:	d10f      	bne.n	8001a06 <print+0x16a>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'A');
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	1d1a      	adds	r2, r3, #4
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	2341      	movs	r3, #65	; 0x41
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	9601      	str	r6, [sp, #4]
 80019f4:	9500      	str	r5, [sp, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	2210      	movs	r2, #16
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff feaf 	bl	800175e <printi>
 8001a00:	4603      	mov	r3, r0
 8001a02:	441c      	add	r4, r3
                continue;
 8001a04:	e05a      	b.n	8001abc <print+0x220>
            }
            if (*format == 'u') {
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b75      	cmp	r3, #117	; 0x75
 8001a0c:	d10f      	bne.n	8001a2e <print+0x192>
                pc += printi(out, va_arg(args, int), 10, 0, width, pad, 'a');
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	1d1a      	adds	r2, r3, #4
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	2361      	movs	r3, #97	; 0x61
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	9601      	str	r6, [sp, #4]
 8001a1c:	9500      	str	r5, [sp, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	220a      	movs	r2, #10
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff fe9b 	bl	800175e <printi>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	441c      	add	r4, r3
                continue;
 8001a2c:	e046      	b.n	8001abc <print+0x220>
            }
            if (*format == 'c') {
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b63      	cmp	r3, #99	; 0x63
 8001a34:	d111      	bne.n	8001a5a <print+0x1be>
                /* char are converted to int then pushed on the stack */
                scr[0] = (char) va_arg(args, int);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	1d1a      	adds	r2, r3, #4
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	753b      	strb	r3, [r7, #20]
                scr[1] = '\0';
 8001a42:	2300      	movs	r3, #0
 8001a44:	757b      	strb	r3, [r7, #21]
                pc += prints(out, scr, width, pad);
 8001a46:	f107 0114 	add.w	r1, r7, #20
 8001a4a:	4633      	mov	r3, r6
 8001a4c:	462a      	mov	r2, r5
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f7ff fe0d 	bl	800166e <prints>
 8001a54:	4603      	mov	r3, r0
 8001a56:	441c      	add	r4, r3
                continue;
 8001a58:	e030      	b.n	8001abc <print+0x220>
            }
            if (*format == 'f') {
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b66      	cmp	r3, #102	; 0x66
 8001a60:	d12c      	bne.n	8001abc <print+0x220>
                pc += printf_(out, va_arg(args, double), width, dp, pad);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3307      	adds	r3, #7
 8001a66:	f023 0307 	bic.w	r3, r3, #7
 8001a6a:	f103 0208 	add.w	r2, r3, #8
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7fe fba6 	bl	80001c8 <__aeabi_d2f>
 8001a7c:	4633      	mov	r3, r6
 8001a7e:	4642      	mov	r2, r8
 8001a80:	4629      	mov	r1, r5
 8001a82:	ee00 0a10 	vmov	s0, r0
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fee0 	bl	800184c <printf_>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	441c      	add	r4, r3
                continue;
 8001a90:	e014      	b.n	8001abc <print+0x220>
            }
        } else {
            out: printchar(out, *format);
 8001a92:	bf00      	nop
 8001a94:	e000      	b.n	8001a98 <print+0x1fc>
                goto out;
 8001a96:	bf00      	nop
            out: printchar(out, *format);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	601a      	str	r2, [r3, #0]
}
 8001ab8:	bf00      	nop
            ++pc;
 8001aba:	3401      	adds	r4, #1
    for (; *format != 0; ++format) {
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f47f aef1 	bne.w	80018ae <print+0x12>
 8001acc:	e000      	b.n	8001ad0 <print+0x234>
                break;
 8001ace:	bf00      	nop
        }
    }
    va_end(args);
    return pc;
 8001ad0:	4623      	mov	r3, r4
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001adc:	08006eec 	.word	0x08006eec

08001ae0 <write_command>:
uint8_t buf_ptr = 0;
static uint8_t tft_dma_bufs[2][TFT_DMA_BUF_SIZE];
#define curr_tft_dma_buf tft_dma_bufs[buf_ptr]

/* TFT SPI communication - with MCU */
static inline void write_command(uint8_t command) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8001aea:	bf00      	nop
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <write_command+0x40>)
 8001aee:	f003 fe45 	bl	800577c <HAL_SPI_GetState>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d1f9      	bne.n	8001aec <write_command+0xc>
        // wait for the spi to be ready
        ;

    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET); // Data-Command Pin 0-Command 1-Data
 8001af8:	2200      	movs	r2, #0
 8001afa:	2110      	movs	r1, #16
 8001afc:	4809      	ldr	r0, [pc, #36]	; (8001b24 <write_command+0x44>)
 8001afe:	f002 fdbf 	bl	8004680 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) &command, 1, 1);
 8001b02:	1df9      	adds	r1, r7, #7
 8001b04:	2301      	movs	r3, #1
 8001b06:	2201      	movs	r2, #1
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <write_command+0x40>)
 8001b0a:	f003 fb26 	bl	800515a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2110      	movs	r1, #16
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <write_command+0x44>)
 8001b14:	f002 fdb4 	bl	8004680 <HAL_GPIO_WritePin>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000577c 	.word	0x2000577c
 8001b24:	40020800 	.word	0x40020800

08001b28 <write_data>:
static inline void write_data(uint8_t *data, uint16_t size) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) data, size, 1);
 8001b34:	887a      	ldrh	r2, [r7, #2]
 8001b36:	2301      	movs	r3, #1
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4803      	ldr	r0, [pc, #12]	; (8001b48 <write_data+0x20>)
 8001b3c:	f003 fb0d 	bl	800515a <HAL_SPI_Transmit>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000577c 	.word	0x2000577c

08001b4c <write_many>:
static inline void write_many(uint8_t command, uint8_t *data, uint16_t size) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ffbe 	bl	8001ae0 <write_command>
    write_data(data, size);
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	4619      	mov	r1, r3
 8001b68:	6838      	ldr	r0, [r7, #0]
 8001b6a:	f7ff ffdd 	bl	8001b28 <write_data>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <write_many_dma>:
static inline void write_many_dma(uint8_t command, uint8_t *data, uint16_t size) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	4613      	mov	r3, r2
 8001b86:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ffa8 	bl	8001ae0 <write_command>
    HAL_SPI_Transmit_DMA(&TFT_SPI, (uint8_t*) data, size);
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	461a      	mov	r2, r3
 8001b94:	6839      	ldr	r1, [r7, #0]
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <write_many_dma+0x2c>)
 8001b98:	f003 fc1c 	bl	80053d4 <HAL_SPI_Transmit_DMA>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	2000577c 	.word	0x2000577c

08001ba8 <write_byte>:
static inline void write_byte(uint8_t command, uint8_t data) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	71fb      	strb	r3, [r7, #7]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	71bb      	strb	r3, [r7, #6]
    write_command(command);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff90 	bl	8001ae0 <write_command>
    write_data(&data, 1);
 8001bc0:	1dbb      	adds	r3, r7, #6
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ffaf 	bl	8001b28 <write_data>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <write_2hword>:
static inline void write_2hword(uint8_t command, uint16_t a, uint16_t b) {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	80bb      	strh	r3, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	807b      	strh	r3, [r7, #2]
    write_command(command);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff7a 	bl	8001ae0 <write_command>
    uint8_t buf[4] = { a >> 8, a & 0xFF, b >> 8, b & 0xFF };
 8001bec:	88bb      	ldrh	r3, [r7, #4]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	733b      	strb	r3, [r7, #12]
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	737b      	strb	r3, [r7, #13]
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	73bb      	strb	r3, [r7, #14]
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	73fb      	strb	r3, [r7, #15]
    write_data(buf, 4);
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2104      	movs	r1, #4
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff88 	bl	8001b28 <write_data>
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <tft_clear>:

/**
 * @brief Clear the whole text buffer
 *
 */
static inline void tft_clear(void) {
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 8001c26:	2300      	movs	r3, #0
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	e023      	b.n	8001c74 <tft_clear+0x54>
        for (uint8_t x = 0; x < char_max_x; x++) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	71bb      	strb	r3, [r7, #6]
 8001c30:	e018      	b.n	8001c64 <tft_clear+0x44>
            curr_text_buf[TFT_XY(x, y)] = ' ';
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <tft_clear+0x6c>)
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <tft_clear+0x6c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <tft_clear+0x70>)
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	fb03 f202 	mul.w	r2, r3, r2
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	441a      	add	r2, r3
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4403      	add	r3, r0
 8001c52:	015b      	lsls	r3, r3, #5
 8001c54:	440b      	add	r3, r1
 8001c56:	4413      	add	r3, r2
 8001c58:	3301      	adds	r3, #1
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < char_max_x; x++) {
 8001c5e:	79bb      	ldrb	r3, [r7, #6]
 8001c60:	3301      	adds	r3, #1
 8001c62:	71bb      	strb	r3, [r7, #6]
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <tft_clear+0x70>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	79ba      	ldrb	r2, [r7, #6]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3e1      	bcc.n	8001c32 <tft_clear+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	3301      	adds	r3, #1
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <tft_clear+0x74>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	79fa      	ldrb	r2, [r7, #7]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d3d6      	bcc.n	8001c2c <tft_clear+0xc>
        }
    }
}
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	2000009c 	.word	0x2000009c
 8001c90:	20000129 	.word	0x20000129
 8001c94:	2000012a 	.word	0x2000012a

08001c98 <tft_clear_full>:

/**
 * @brief Clear the whole text buffer and color buffers
 *
 */
static inline void tft_clear_full(void) {
 8001c98:	b490      	push	{r4, r7}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	e050      	b.n	8001d46 <tft_clear_full+0xae>
        for (uint8_t x = 0; x < char_max_x; x++) {
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	71bb      	strb	r3, [r7, #6]
 8001ca8:	e045      	b.n	8001d36 <tft_clear_full+0x9e>
            uint16_t idx = TFT_XY(x, y);
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <tft_clear_full+0xc4>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	fb12 f303 	smulbb	r3, r2, r3
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	80bb      	strh	r3, [r7, #4]
            curr_text_buf[idx] = ' ';
 8001cc2:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <tft_clear_full+0xc8>)
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <tft_clear_full+0xc8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	88ba      	ldrh	r2, [r7, #4]
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4403      	add	r3, r0
 8001cd6:	015b      	lsls	r3, r3, #5
 8001cd8:	440b      	add	r3, r1
 8001cda:	4413      	add	r3, r2
 8001cdc:	3301      	adds	r3, #1
 8001cde:	2220      	movs	r2, #32
 8001ce0:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[idx] = curr_text_color;
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <tft_clear_full+0xc8>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <tft_clear_full+0xc8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	88b9      	ldrh	r1, [r7, #4]
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <tft_clear_full+0xcc>)
 8001cf2:	881c      	ldrh	r4, [r3, #0]
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4403      	add	r3, r0
 8001cfa:	015b      	lsls	r3, r3, #5
 8001cfc:	440b      	add	r3, r1
 8001cfe:	33a0      	adds	r3, #160	; 0xa0
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	4622      	mov	r2, r4
 8001d06:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[idx] = curr_bg_color;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <tft_clear_full+0xc8>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <tft_clear_full+0xc8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	88b9      	ldrh	r1, [r7, #4]
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <tft_clear_full+0xd0>)
 8001d18:	881c      	ldrh	r4, [r3, #0]
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4403      	add	r3, r0
 8001d20:	015b      	lsls	r3, r3, #5
 8001d22:	440b      	add	r3, r1
 8001d24:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4622      	mov	r2, r4
 8001d2e:	805a      	strh	r2, [r3, #2]
        for (uint8_t x = 0; x < char_max_x; x++) {
 8001d30:	79bb      	ldrb	r3, [r7, #6]
 8001d32:	3301      	adds	r3, #1
 8001d34:	71bb      	strb	r3, [r7, #6]
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <tft_clear_full+0xc4>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	79ba      	ldrb	r2, [r7, #6]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3b4      	bcc.n	8001caa <tft_clear_full+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	3301      	adds	r3, #1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <tft_clear_full+0xd4>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	79fa      	ldrb	r2, [r7, #7]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3a9      	bcc.n	8001ca4 <tft_clear_full+0xc>
        }
    }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc90      	pop	{r4, r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000129 	.word	0x20000129
 8001d60:	2000009c 	.word	0x2000009c
 8001d64:	20000124 	.word	0x20000124
 8001d68:	20000120 	.word	0x20000120
 8001d6c:	2000012a 	.word	0x2000012a

08001d70 <tft_set_region>:

static inline void tft_set_region(uint16_t x, uint16_t y, uint16_t w,
        uint16_t h) {
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	80fb      	strh	r3, [r7, #6]
 8001d82:	4603      	mov	r3, r0
 8001d84:	80bb      	strh	r3, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	807b      	strh	r3, [r7, #2]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	803b      	strh	r3, [r7, #0]
    uint16_t startx = x;
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	81fb      	strh	r3, [r7, #14]
    uint16_t starty = y;
 8001d92:	88bb      	ldrh	r3, [r7, #4]
 8001d94:	81bb      	strh	r3, [r7, #12]
    uint16_t endx = x + w;
 8001d96:	88fa      	ldrh	r2, [r7, #6]
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	817b      	strh	r3, [r7, #10]
    uint16_t endy = y + h;
 8001d9e:	88ba      	ldrh	r2, [r7, #4]
 8001da0:	883b      	ldrh	r3, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	813b      	strh	r3, [r7, #8]

#ifdef MODEL_ST7735
    startx += col_shift;
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <tft_set_region+0x88>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	89fb      	ldrh	r3, [r7, #14]
 8001dae:	4413      	add	r3, r2
 8001db0:	81fb      	strh	r3, [r7, #14]
    starty += row_shift;
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <tft_set_region+0x8c>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	89bb      	ldrh	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	81bb      	strh	r3, [r7, #12]
    endx += col_shift;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <tft_set_region+0x88>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	897b      	ldrh	r3, [r7, #10]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	817b      	strh	r3, [r7, #10]
    endy += row_shift;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <tft_set_region+0x8c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	893b      	ldrh	r3, [r7, #8]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	813b      	strh	r3, [r7, #8]
#endif

    write_2hword(0x2a, startx, endx);  // Column addr set
 8001dd6:	897a      	ldrh	r2, [r7, #10]
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	202a      	movs	r0, #42	; 0x2a
 8001dde:	f7ff fef8 	bl	8001bd2 <write_2hword>
    write_2hword(0x2b, starty, endy);  // Row addr set
 8001de2:	893a      	ldrh	r2, [r7, #8]
 8001de4:	89bb      	ldrh	r3, [r7, #12]
 8001de6:	4619      	mov	r1, r3
 8001de8:	202b      	movs	r0, #43	; 0x2b
 8001dea:	f7ff fef2 	bl	8001bd2 <write_2hword>
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000076e 	.word	0x2000076e
 8001dfc:	2000076f 	.word	0x2000076f

08001e00 <tft_init>:
 * @param  text_color: default text color
 * @param  text_color_sp: default special text color
 * @param  highlight_color: default highlight color
 */
void tft_init(TFT_ORIENTATION orientation, uint16_t bg_color,
        uint16_t text_color, uint16_t text_color_sp, uint16_t highlight_color) {
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4604      	mov	r4, r0
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4623      	mov	r3, r4
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	4603      	mov	r3, r0
 8001e14:	80bb      	strh	r3, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	807b      	strh	r3, [r7, #2]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	803b      	strh	r3, [r7, #0]
    curr_screen = 0;
 8001e1e:	4b6e      	ldr	r3, [pc, #440]	; (8001fd8 <tft_init+0x1d8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
    tft_orientation = orientation;
 8001e26:	4a6d      	ldr	r2, [pc, #436]	; (8001fdc <tft_init+0x1dc>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	7013      	strb	r3, [r2, #0]

    char_max_x =
            (orientation % 2) ? CHAR_MAX_X_HORIZONTAL : CHAR_MAX_X_VERTICAL;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
    char_max_x =
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <tft_init+0x3c>
 8001e38:	2214      	movs	r2, #20
 8001e3a:	e000      	b.n	8001e3e <tft_init+0x3e>
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <tft_init+0x1e0>)
 8001e40:	701a      	strb	r2, [r3, #0]
    char_max_y =
            (orientation % 2) ? CHAR_MAX_Y_HORIZONTAL : CHAR_MAX_Y_VERTICAL;
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
    char_max_y =
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <tft_init+0x52>
 8001e4e:	2208      	movs	r2, #8
 8001e50:	e000      	b.n	8001e54 <tft_init+0x54>
 8001e52:	220a      	movs	r2, #10
 8001e54:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <tft_init+0x1e4>)
 8001e56:	701a      	strb	r2, [r3, #0]

    TFT_SPI_INIT();
 8001e58:	f001 f8be 	bl	8002fd8 <MX_SPI1_Init>

    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2140      	movs	r1, #64	; 0x40
 8001e60:	4861      	ldr	r0, [pc, #388]	; (8001fe8 <tft_init+0x1e8>)
 8001e62:	f002 fc0d 	bl	8004680 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001e66:	2064      	movs	r0, #100	; 0x64
 8001e68:	f001 fc92 	bl	8003790 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2140      	movs	r1, #64	; 0x40
 8001e70:	485d      	ldr	r0, [pc, #372]	; (8001fe8 <tft_init+0x1e8>)
 8001e72:	f002 fc05 	bl	8004680 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001e76:	2064      	movs	r0, #100	; 0x64
 8001e78:	f001 fc8a 	bl	8003790 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2140      	movs	r1, #64	; 0x40
 8001e80:	4859      	ldr	r0, [pc, #356]	; (8001fe8 <tft_init+0x1e8>)
 8001e82:	f002 fbfd 	bl	8004680 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001e86:	2064      	movs	r0, #100	; 0x64
 8001e88:	f001 fc82 	bl	8003790 <HAL_Delay>

    HAL_GPIO_WritePin(TFT_BL_GPIO_Port, TFT_BL_Pin, GPIO_PIN_SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4856      	ldr	r0, [pc, #344]	; (8001fec <tft_init+0x1ec>)
 8001e92:	f002 fbf5 	bl	8004680 <HAL_GPIO_WritePin>

#if defined(TFT_CS_Pin) && !defined(MODEL_ST7735)
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
#endif

    uint32_t i = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 8001e9a:	e058      	b.n	8001f4e <tft_init+0x14e>
        if (tft_init_code[i] == TFT_ORIENTATION_CMD) {
 8001e9c:	4a54      	ldr	r2, [pc, #336]	; (8001ff0 <tft_init+0x1f0>)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b36      	cmp	r3, #54	; 0x36
 8001ea6:	d110      	bne.n	8001eca <tft_init+0xca>
            write_byte(tft_init_code[i],
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <tft_init+0x1f0>)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <tft_init+0x1dc>)
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4a4f      	ldr	r2, [pc, #316]	; (8001ff4 <tft_init+0x1f4>)
 8001eb8:	5c52      	ldrb	r2, [r2, r1]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fe73 	bl	8001ba8 <write_byte>
                    tft_orientation_init_code[tft_orientation]);
            i++;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e041      	b.n	8001f4e <tft_init+0x14e>
        } else if (tft_init_code[i] == TFT_DELAY_MARKER) {
 8001eca:	4a49      	ldr	r2, [pc, #292]	; (8001ff0 <tft_init+0x1f0>)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2bff      	cmp	r3, #255	; 0xff
 8001ed4:	d10a      	bne.n	8001eec <tft_init+0xec>
            i += 3;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3303      	adds	r3, #3
 8001eda:	60fb      	str	r3, [r7, #12]
            HAL_Delay(tft_init_code[i]);
 8001edc:	4a44      	ldr	r2, [pc, #272]	; (8001ff0 <tft_init+0x1f0>)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 fc53 	bl	8003790 <HAL_Delay>
 8001eea:	e030      	b.n	8001f4e <tft_init+0x14e>
        } else if (tft_init_code[i + 1] == TFT_EOL_MARKER) {
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <tft_init+0x1f0>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	2b43      	cmp	r3, #67	; 0x43
 8001ef6:	d10a      	bne.n	8001f0e <tft_init+0x10e>
            write_command(tft_init_code[i]);
 8001ef8:	4a3d      	ldr	r2, [pc, #244]	; (8001ff0 <tft_init+0x1f0>)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fded 	bl	8001ae0 <write_command>
            i++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e01f      	b.n	8001f4e <tft_init+0x14e>
        } else {
            int len;
            for (len = 0; tft_init_code[i + len + 1] != TFT_EOL_MARKER; len++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	e002      	b.n	8001f1a <tft_init+0x11a>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	3301      	adds	r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3301      	adds	r3, #1
 8001f22:	4a33      	ldr	r2, [pc, #204]	; (8001ff0 <tft_init+0x1f0>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	2b43      	cmp	r3, #67	; 0x43
 8001f28:	d1f4      	bne.n	8001f14 <tft_init+0x114>
            }
            write_many(tft_init_code[i], (uint8_t*) &tft_init_code[i + 1], len);
 8001f2a:	4a31      	ldr	r2, [pc, #196]	; (8001ff0 <tft_init+0x1f0>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	7818      	ldrb	r0, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	4a2e      	ldr	r2, [pc, #184]	; (8001ff0 <tft_init+0x1f0>)
 8001f38:	4413      	add	r3, r2
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	b292      	uxth	r2, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7ff fe04 	bl	8001b4c <write_many>
            i += len + 1;
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3301      	adds	r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <tft_init+0x1f0>)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b42      	cmp	r3, #66	; 0x42
 8001f5e:	d19d      	bne.n	8001e9c <tft_init+0x9c>
        }
    }

#ifdef MODEL_ST7735
    switch (tft_orientation) {
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <tft_init+0x1dc>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d01a      	beq.n	8001f9e <tft_init+0x19e>
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	dc03      	bgt.n	8001f74 <tft_init+0x174>
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d008      	beq.n	8001f82 <tft_init+0x182>
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d00d      	beq.n	8001f90 <tft_init+0x190>
    default:
    case 0:
        col_shift = 2;
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <tft_init+0x1f8>)
 8001f76:	2202      	movs	r2, #2
 8001f78:	701a      	strb	r2, [r3, #0]
        row_shift = 1;
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <tft_init+0x1fc>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
        break;
 8001f80:	e014      	b.n	8001fac <tft_init+0x1ac>
    case 1:
        col_shift = 1;
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <tft_init+0x1f8>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <tft_init+0x1fc>)
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	701a      	strb	r2, [r3, #0]
        break;
 8001f8e:	e00d      	b.n	8001fac <tft_init+0x1ac>
    case 2:
        col_shift = 2;
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <tft_init+0x1f8>)
 8001f92:	2202      	movs	r2, #2
 8001f94:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <tft_init+0x1fc>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	701a      	strb	r2, [r3, #0]
        break;
 8001f9c:	e006      	b.n	8001fac <tft_init+0x1ac>
    case 3:
        col_shift = 1;
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <tft_init+0x1f8>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <tft_init+0x1fc>)
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	701a      	strb	r2, [r3, #0]
        break;
 8001faa:	bf00      	nop
    }
#endif

    tft_set_bg_color(bg_color);
 8001fac:	88bb      	ldrh	r3, [r7, #4]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f826 	bl	8002000 <tft_set_bg_color>
    tft_set_text_color(text_color);
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f842 	bl	8002040 <tft_set_text_color>
    tft_set_special_color(text_color_sp);
 8001fbc:	883b      	ldrh	r3, [r7, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f84e 	bl	8002060 <tft_set_special_color>
    tft_set_highlight_color(highlight_color);
 8001fc4:	8c3b      	ldrh	r3, [r7, #32]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f82a 	bl	8002020 <tft_set_highlight_color>

    tft_force_clear();
 8001fcc:	f000 f858 	bl	8002080 <tft_force_clear>
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd90      	pop	{r4, r7, pc}
 8001fd8:	2000009c 	.word	0x2000009c
 8001fdc:	20000128 	.word	0x20000128
 8001fe0:	20000129 	.word	0x20000129
 8001fe4:	2000012a 	.word	0x2000012a
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	08007d68 	.word	0x08007d68
 8001ff4:	08007ddc 	.word	0x08007ddc
 8001ff8:	2000076e 	.word	0x2000076e
 8001ffc:	2000076f 	.word	0x2000076f

08002000 <tft_set_bg_color>:
/**
 * @brief Set current background color
 *
 * @param bg_color (BLACK, BLUE, RED, ...)
 */
void tft_set_bg_color(uint16_t bg_color) {
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
    curr_bg_color = bg_color;
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <tft_set_bg_color+0x1c>)
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	8013      	strh	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20000120 	.word	0x20000120

08002020 <tft_set_highlight_color>:
/**
 * @brief Set current highlight color
 *
 * @param highlight_color (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_highlight_color(uint16_t highlight_color) {
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
    curr_highlight_color = highlight_color;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <tft_set_highlight_color+0x1c>)
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	8013      	strh	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	20000122 	.word	0x20000122

08002040 <tft_set_text_color>:
/**
 * @brief Set current text color
 *
 * @param text_color (WHITE, SKYBLUE, GREEN, ...)
 */
void tft_set_text_color(uint16_t text_color) {
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	80fb      	strh	r3, [r7, #6]
    curr_text_color = text_color;
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <tft_set_text_color+0x1c>)
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	8013      	strh	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	20000124 	.word	0x20000124

08002060 <tft_set_special_color>:
/**
 * @brief Set current special text color
 *
 * @param text_color_sp (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_special_color(uint16_t text_color_sp) {
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
    curr_text_color_sp = text_color_sp;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <tft_set_special_color+0x1c>)
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	8013      	strh	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	20000126 	.word	0x20000126

08002080 <tft_force_clear>:

/**
 * @brief  Clear every pixels on the screen
 */
void tft_force_clear(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af02      	add	r7, sp, #8
    tft_clear_full();
 8002086:	f7ff fe07 	bl	8001c98 <tft_clear_full>
    tft_update(0);
 800208a:	2000      	movs	r0, #0
 800208c:	f000 fb22 	bl	80026d4 <tft_update>
    tft_clear_full();
 8002090:	f7ff fe02 	bl	8001c98 <tft_clear_full>
    if (tft_orientation % 2)
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <tft_force_clear+0x50>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <tft_force_clear+0x36>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_HEIGHT, MAX_WIDTH);
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <tft_force_clear+0x54>)
 80020a4:	8818      	ldrh	r0, [r3, #0]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	23a0      	movs	r3, #160	; 0xa0
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	f000 fa5a 	bl	8002568 <tft_print_rectangle>
    else
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
}
 80020b4:	e008      	b.n	80020c8 <tft_force_clear+0x48>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <tft_force_clear+0x54>)
 80020b8:	8818      	ldrh	r0, [r3, #0]
 80020ba:	23a0      	movs	r3, #160	; 0xa0
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	f000 fa50 	bl	8002568 <tft_print_rectangle>
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000128 	.word	0x20000128
 80020d4:	20000120 	.word	0x20000120

080020d8 <tft_print_colored>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fp pointer to the character(s)
 */
void tft_print_colored(uint8_t x, uint8_t y, const char *fp,
        uint16_t text_color, uint16_t bg_color) {
 80020d8:	b490      	push	{r4, r7}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	603a      	str	r2, [r7, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
 80020e6:	460b      	mov	r3, r1
 80020e8:	71bb      	strb	r3, [r7, #6]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80bb      	strh	r3, [r7, #4]
    uint8_t i = x;
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	73fb      	strb	r3, [r7, #15]
    uint8_t j = y;
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	73bb      	strb	r3, [r7, #14]
    uint8_t is_special = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	737b      	strb	r3, [r7, #13]
    uint8_t is_highlighted = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	733b      	strb	r3, [r7, #12]
    uint8_t is_underlined = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	72fb      	strb	r3, [r7, #11]

    while (*fp && i < char_max_x && j < char_max_y) {
 8002102:	e14a      	b.n	800239a <tft_print_colored+0x2c2>
        switch (*fp) {
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b7d      	cmp	r3, #125	; 0x7d
 800210a:	f300 80e0 	bgt.w	80022ce <tft_print_colored+0x1f6>
 800210e:	2b5b      	cmp	r3, #91	; 0x5b
 8002110:	da04      	bge.n	800211c <tft_print_colored+0x44>
 8002112:	2b0a      	cmp	r3, #10
 8002114:	d050      	beq.n	80021b8 <tft_print_colored+0xe0>
 8002116:	2b0d      	cmp	r3, #13
 8002118:	d051      	beq.n	80021be <tft_print_colored+0xe6>
 800211a:	e0d8      	b.n	80022ce <tft_print_colored+0x1f6>
 800211c:	3b5b      	subs	r3, #91	; 0x5b
 800211e:	2b22      	cmp	r3, #34	; 0x22
 8002120:	f200 80d5 	bhi.w	80022ce <tft_print_colored+0x1f6>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <tft_print_colored+0x54>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	0800229b 	.word	0x0800229b
 8002130:	080022cf 	.word	0x080022cf
 8002134:	0800229b 	.word	0x0800229b
 8002138:	080022cf 	.word	0x080022cf
 800213c:	080022cf 	.word	0x080022cf
 8002140:	080021c5 	.word	0x080021c5
 8002144:	080022cf 	.word	0x080022cf
 8002148:	080022cf 	.word	0x080022cf
 800214c:	080022cf 	.word	0x080022cf
 8002150:	080022cf 	.word	0x080022cf
 8002154:	080022cf 	.word	0x080022cf
 8002158:	080022cf 	.word	0x080022cf
 800215c:	080022cf 	.word	0x080022cf
 8002160:	080022cf 	.word	0x080022cf
 8002164:	080022cf 	.word	0x080022cf
 8002168:	080022cf 	.word	0x080022cf
 800216c:	080022cf 	.word	0x080022cf
 8002170:	080022cf 	.word	0x080022cf
 8002174:	080022cf 	.word	0x080022cf
 8002178:	080022cf 	.word	0x080022cf
 800217c:	080022cf 	.word	0x080022cf
 8002180:	080022cf 	.word	0x080022cf
 8002184:	080022cf 	.word	0x080022cf
 8002188:	080022cf 	.word	0x080022cf
 800218c:	080022cf 	.word	0x080022cf
 8002190:	080022cf 	.word	0x080022cf
 8002194:	080022cf 	.word	0x080022cf
 8002198:	080022cf 	.word	0x080022cf
 800219c:	080022cf 	.word	0x080022cf
 80021a0:	080022cf 	.word	0x080022cf
 80021a4:	080022cf 	.word	0x080022cf
 80021a8:	080022cf 	.word	0x080022cf
 80021ac:	080022ad 	.word	0x080022ad
 80021b0:	080022bf 	.word	0x080022bf
 80021b4:	080022ad 	.word	0x080022ad
        case '\n':
            j++;  // fall through
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	3301      	adds	r3, #1
 80021bc:	73bb      	strb	r3, [r7, #14]
        case '\r':
            i = x;
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	73fb      	strb	r3, [r7, #15]
            break;
 80021c2:	e0e7      	b.n	8002394 <tft_print_colored+0x2bc>
        case '`': // escape character
            if (*(fp + 1) != '\0') {
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80e1 	beq.w	8002392 <tft_print_colored+0x2ba>
                fp++;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	603b      	str	r3, [r7, #0]
                curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	7afa      	ldrb	r2, [r7, #11]
 80021de:	2a00      	cmp	r2, #0
 80021e0:	d002      	beq.n	80021e8 <tft_print_colored+0x110>
 80021e2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80021e6:	e000      	b.n	80021ea <tft_print_colored+0x112>
 80021e8:	2200      	movs	r2, #0
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b25c      	sxtb	r4, r3
 80021ee:	4b75      	ldr	r3, [pc, #468]	; (80023c4 <tft_print_colored+0x2ec>)
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	4b74      	ldr	r3, [pc, #464]	; (80023c4 <tft_print_colored+0x2ec>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	7bbb      	ldrb	r3, [r7, #14]
 80021fc:	4a72      	ldr	r2, [pc, #456]	; (80023c8 <tft_print_colored+0x2f0>)
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	fb03 f202 	mul.w	r2, r3, r2
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	441a      	add	r2, r3
 8002208:	b2e4      	uxtb	r4, r4
 800220a:	4603      	mov	r3, r0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4403      	add	r3, r0
 8002210:	015b      	lsls	r3, r3, #5
 8002212:	440b      	add	r3, r1
 8002214:	4413      	add	r3, r2
 8002216:	3301      	adds	r3, #1
 8002218:	4622      	mov	r2, r4
 800221a:	701a      	strb	r2, [r3, #0]
                curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 800221c:	7b7b      	ldrb	r3, [r7, #13]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <tft_print_colored+0x150>
 8002222:	4b6a      	ldr	r3, [pc, #424]	; (80023cc <tft_print_colored+0x2f4>)
 8002224:	881a      	ldrh	r2, [r3, #0]
 8002226:	e000      	b.n	800222a <tft_print_colored+0x152>
 8002228:	88ba      	ldrh	r2, [r7, #4]
 800222a:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <tft_print_colored+0x2ec>)
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	4b65      	ldr	r3, [pc, #404]	; (80023c4 <tft_print_colored+0x2ec>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461c      	mov	r4, r3
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	4863      	ldr	r0, [pc, #396]	; (80023c8 <tft_print_colored+0x2f0>)
 800223a:	7800      	ldrb	r0, [r0, #0]
 800223c:	fb03 f000 	mul.w	r0, r3, r0
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	4418      	add	r0, r3
 8002244:	4623      	mov	r3, r4
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4423      	add	r3, r4
 800224a:	015b      	lsls	r3, r3, #5
 800224c:	4403      	add	r3, r0
 800224e:	33a0      	adds	r3, #160	; 0xa0
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	440b      	add	r3, r1
 8002254:	805a      	strh	r2, [r3, #2]
                curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 8002256:	7b3b      	ldrb	r3, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <tft_print_colored+0x18a>
 800225c:	4b5c      	ldr	r3, [pc, #368]	; (80023d0 <tft_print_colored+0x2f8>)
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	e000      	b.n	8002264 <tft_print_colored+0x18c>
 8002262:	8b3a      	ldrh	r2, [r7, #24]
 8002264:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <tft_print_colored+0x2ec>)
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <tft_print_colored+0x2ec>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461c      	mov	r4, r3
 8002270:	7bbb      	ldrb	r3, [r7, #14]
 8002272:	4855      	ldr	r0, [pc, #340]	; (80023c8 <tft_print_colored+0x2f0>)
 8002274:	7800      	ldrb	r0, [r0, #0]
 8002276:	fb03 f000 	mul.w	r0, r3, r0
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	4418      	add	r0, r3
 800227e:	4623      	mov	r3, r4
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4423      	add	r3, r4
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	4403      	add	r3, r0
 8002288:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	440b      	add	r3, r1
 8002290:	805a      	strh	r2, [r3, #2]
                i++;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	3301      	adds	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8002298:	e07b      	b.n	8002392 <tft_print_colored+0x2ba>
        case '[':
        case ']':
            is_special = (*fp == '[');
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b5b      	cmp	r3, #91	; 0x5b
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	737b      	strb	r3, [r7, #13]
            break;
 80022aa:	e073      	b.n	8002394 <tft_print_colored+0x2bc>
        case '{':
        case '}':
            is_highlighted = (*fp == '{');
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b7b      	cmp	r3, #123	; 0x7b
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	733b      	strb	r3, [r7, #12]
            break;
 80022bc:	e06a      	b.n	8002394 <tft_print_colored+0x2bc>
        case '|':
            is_underlined = !is_underlined;
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	72fb      	strb	r3, [r7, #11]
            break;
 80022cc:	e062      	b.n	8002394 <tft_print_colored+0x2bc>
        default:
            curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b25b      	sxtb	r3, r3
 80022d4:	7afa      	ldrb	r2, [r7, #11]
 80022d6:	2a00      	cmp	r2, #0
 80022d8:	d002      	beq.n	80022e0 <tft_print_colored+0x208>
 80022da:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80022de:	e000      	b.n	80022e2 <tft_print_colored+0x20a>
 80022e0:	2200      	movs	r2, #0
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b25c      	sxtb	r4, r3
 80022e6:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <tft_print_colored+0x2ec>)
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <tft_print_colored+0x2ec>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	7bbb      	ldrb	r3, [r7, #14]
 80022f4:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <tft_print_colored+0x2f0>)
 80022f6:	7812      	ldrb	r2, [r2, #0]
 80022f8:	fb03 f202 	mul.w	r2, r3, r2
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	441a      	add	r2, r3
 8002300:	b2e4      	uxtb	r4, r4
 8002302:	4603      	mov	r3, r0
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4403      	add	r3, r0
 8002308:	015b      	lsls	r3, r3, #5
 800230a:	440b      	add	r3, r1
 800230c:	4413      	add	r3, r2
 800230e:	3301      	adds	r3, #1
 8002310:	4622      	mov	r2, r4
 8002312:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 8002314:	7b7b      	ldrb	r3, [r7, #13]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <tft_print_colored+0x248>
 800231a:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <tft_print_colored+0x2f4>)
 800231c:	881a      	ldrh	r2, [r3, #0]
 800231e:	e000      	b.n	8002322 <tft_print_colored+0x24a>
 8002320:	88ba      	ldrh	r2, [r7, #4]
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <tft_print_colored+0x2ec>)
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <tft_print_colored+0x2ec>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461c      	mov	r4, r3
 800232e:	7bbb      	ldrb	r3, [r7, #14]
 8002330:	4825      	ldr	r0, [pc, #148]	; (80023c8 <tft_print_colored+0x2f0>)
 8002332:	7800      	ldrb	r0, [r0, #0]
 8002334:	fb03 f000 	mul.w	r0, r3, r0
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	4418      	add	r0, r3
 800233c:	4623      	mov	r3, r4
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4423      	add	r3, r4
 8002342:	015b      	lsls	r3, r3, #5
 8002344:	4403      	add	r3, r0
 8002346:	33a0      	adds	r3, #160	; 0xa0
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	440b      	add	r3, r1
 800234c:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 800234e:	7b3b      	ldrb	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <tft_print_colored+0x282>
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <tft_print_colored+0x2f8>)
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	e000      	b.n	800235c <tft_print_colored+0x284>
 800235a:	8b3a      	ldrh	r2, [r7, #24]
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <tft_print_colored+0x2ec>)
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <tft_print_colored+0x2ec>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461c      	mov	r4, r3
 8002368:	7bbb      	ldrb	r3, [r7, #14]
 800236a:	4817      	ldr	r0, [pc, #92]	; (80023c8 <tft_print_colored+0x2f0>)
 800236c:	7800      	ldrb	r0, [r0, #0]
 800236e:	fb03 f000 	mul.w	r0, r3, r0
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	4418      	add	r0, r3
 8002376:	4623      	mov	r3, r4
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4423      	add	r3, r4
 800237c:	015b      	lsls	r3, r3, #5
 800237e:	4403      	add	r3, r0
 8002380:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	440b      	add	r3, r1
 8002388:	805a      	strh	r2, [r3, #2]
            i++;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	3301      	adds	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
            break;
 8002390:	e000      	b.n	8002394 <tft_print_colored+0x2bc>
            break;
 8002392:	bf00      	nop
        }
        fp++;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	603b      	str	r3, [r7, #0]
    while (*fp && i < char_max_x && j < char_max_y) {
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <tft_print_colored+0x2e0>
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <tft_print_colored+0x2f0>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d205      	bcs.n	80023b8 <tft_print_colored+0x2e0>
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <tft_print_colored+0x2fc>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	7bba      	ldrb	r2, [r7, #14]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	f4ff aea6 	bcc.w	8002104 <tft_print_colored+0x2c>
    }
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc90      	pop	{r4, r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	2000009c 	.word	0x2000009c
 80023c8:	20000129 	.word	0x20000129
 80023cc:	20000126 	.word	0x20000126
 80023d0:	20000122 	.word	0x20000122
 80023d4:	2000012a 	.word	0x2000012a

080023d8 <tft_printc>:
 *
 * @param x x-coordinate
 * @param y y-coordinate
 * @param fp pointer to character
 */
void tft_printc(uint8_t x, uint8_t y, const char *fp) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af02      	add	r7, sp, #8
 80023de:	4603      	mov	r3, r0
 80023e0:	603a      	str	r2, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
 80023e4:	460b      	mov	r3, r1
 80023e6:	71bb      	strb	r3, [r7, #6]
    tft_print_colored(x, y, fp, curr_text_color, curr_bg_color);
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <tft_printc+0x30>)
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <tft_printc+0x34>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	79b9      	ldrb	r1, [r7, #6]
 80023f2:	79f8      	ldrb	r0, [r7, #7]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	f7ff fe6d 	bl	80020d8 <tft_print_colored>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000124 	.word	0x20000124
 800240c:	20000120 	.word	0x20000120

08002410 <tft_prints>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fmt string to be printed with format
 * @param __VA_ARGS__ variables to replace spaceholders
 */
void tft_prints(uint8_t x, uint8_t y, const char *fmt, ...) {
 8002410:	b40c      	push	{r2, r3}
 8002412:	b580      	push	{r7, lr}
 8002414:	b08e      	sub	sp, #56	; 0x38
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	460a      	mov	r2, r1
 800241c:	71fb      	strb	r3, [r7, #7]
 800241e:	4613      	mov	r3, r2
 8002420:	71bb      	strb	r3, [r7, #6]
    char buf[CHAR_MAX_X * 2] = { 0 }, *fp = buf;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f004 fd48 	bl	8006ec4 <memset>
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	60fb      	str	r3, [r7, #12]

    va_list args;
    va_start(args, fmt);
 800243a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800243e:	60bb      	str	r3, [r7, #8]
    print(&fp, fmt, args);
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fa27 	bl	800189c <print>

    tft_printc(x, y, buf);
 800244e:	f107 0210 	add.w	r2, r7, #16
 8002452:	79b9      	ldrb	r1, [r7, #6]
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ffbe 	bl	80023d8 <tft_printc>
}
 800245c:	bf00      	nop
 800245e:	3738      	adds	r7, #56	; 0x38
 8002460:	46bd      	mov	sp, r7
 8002462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002466:	b002      	add	sp, #8
 8002468:	4770      	bx	lr
	...

0800246c <tft_print_rectangle_dma>:
#endif
    }
}

void tft_print_rectangle_dma(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af00      	add	r7, sp, #0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4603      	mov	r3, r0
 800247a:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t l = (i > TFT_DMA_BUF_PIXELS) ? TFT_DMA_BUF_PIXELS : i; // safety guard
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800248c:	bf28      	it	cs
 800248e:	f44f 53a0 	movcs.w	r3, #5120	; 0x1400
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
    tft_buffer_pixels(curr_tft_dma_buf, color, l);
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <tft_print_rectangle_dma+0xf0>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	02db      	lsls	r3, r3, #11
 80024a2:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <tft_print_rectangle_dma+0xf4>)
 80024a4:	441a      	add	r2, r3
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	627a      	str	r2, [r7, #36]	; 0x24
 80024aa:	89fa      	ldrh	r2, [r7, #14]
 80024ac:	847a      	strh	r2, [r7, #34]	; 0x22
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024b8:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 80024ba:	8afb      	ldrh	r3, [r7, #22]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	3301      	adds	r3, #1
 80024ca:	8afa      	ldrh	r2, [r7, #22]
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
}
 80024d0:	bf00      	nop
    while (len--) {
 80024d2:	e009      	b.n	80024e8 <tft_print_rectangle_dma+0x7c>
        *out++ = buf[0];
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	627a      	str	r2, [r7, #36]	; 0x24
 80024da:	7d3a      	ldrb	r2, [r7, #20]
 80024dc:	701a      	strb	r2, [r3, #0]
        *out++ = buf[1];
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	627a      	str	r2, [r7, #36]	; 0x24
 80024e4:	7d7a      	ldrb	r2, [r7, #21]
 80024e6:	701a      	strb	r2, [r3, #0]
    while (len--) {
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	61fa      	str	r2, [r7, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <tft_print_rectangle_dma+0x68>
}
 80024f2:	bf00      	nop
    tft_set_region(x, y, w - 1, h - 1);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	b298      	uxth	r0, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	b299      	uxth	r1, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29b      	uxth	r3, r3
 800250c:	f7ff fc30 	bl	8001d70 <tft_set_region>
    write_command(0x2c);
 8002510:	202c      	movs	r0, #44	; 0x2c
 8002512:	f7ff fae5 	bl	8001ae0 <write_command>
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8002516:	bf00      	nop
 8002518:	4812      	ldr	r0, [pc, #72]	; (8002564 <tft_print_rectangle_dma+0xf8>)
 800251a:	f003 f92f 	bl	800577c <HAL_SPI_GetState>
 800251e:	4603      	mov	r3, r0
 8002520:	2b01      	cmp	r3, #1
 8002522:	d1f9      	bne.n	8002518 <tft_print_rectangle_dma+0xac>
        ;
    write_many_dma(0x2c, curr_tft_dma_buf, l * PIXEL_BYTES);
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <tft_print_rectangle_dma+0xf0>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	02db      	lsls	r3, r3, #11
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <tft_print_rectangle_dma+0xf4>)
 8002534:	1899      	adds	r1, r3, r2
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	b29b      	uxth	r3, r3
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	202c      	movs	r0, #44	; 0x2c
 8002542:	f7ff fb19 	bl	8001b78 <write_many_dma>
    buf_ptr ^= 0x1;
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <tft_print_rectangle_dma+0xf0>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b02      	ldr	r3, [pc, #8]	; (800255c <tft_print_rectangle_dma+0xf0>)
 8002552:	701a      	strb	r2, [r3, #0]
}
 8002554:	bf00      	nop
 8002556:	3730      	adds	r7, #48	; 0x30
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000770 	.word	0x20000770
 8002560:	20000774 	.word	0x20000774
 8002564:	2000577c 	.word	0x2000577c

08002568 <tft_print_rectangle>:
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_rectangle(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b08d      	sub	sp, #52	; 0x34
 800256c:	af02      	add	r7, sp, #8
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4603      	mov	r3, r0
 8002576:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800257c:	fb02 f303 	mul.w	r3, r2, r3
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    if (i <= (64)) {
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d82f      	bhi.n	80025e8 <tft_print_rectangle+0x80>
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	89fb      	ldrh	r3, [r7, #14]
 8002590:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8002592:	8afb      	ldrh	r3, [r7, #22]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b29b      	uxth	r3, r3
 8002598:	b2da      	uxtb	r2, r3
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	3301      	adds	r3, #1
 80025a2:	8afa      	ldrh	r2, [r7, #22]
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]
}
 80025a8:	bf00      	nop
        uint8_t buf[PIXEL_BYTES];
        tft_buffer_pixel(buf, color);

        tft_set_region(x, y, w - 1, h - 1);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	b298      	uxth	r0, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	b299      	uxth	r1, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f7ff fbd5 	bl	8001d70 <tft_set_region>
        write_command(0x2c);
 80025c6:	202c      	movs	r0, #44	; 0x2c
 80025c8:	f7ff fa8a 	bl	8001ae0 <write_command>
        for (; i != 0; i--) {
 80025cc:	e008      	b.n	80025e0 <tft_print_rectangle+0x78>
            write_data(buf, PIXEL_BYTES);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	2102      	movs	r1, #2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff faa7 	bl	8001b28 <write_data>
        for (; i != 0; i--) {
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	3b01      	subs	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f3      	bne.n	80025ce <tft_print_rectangle+0x66>
        if (h % buf_max_h > 0) {
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
                    h % buf_max_h);
        }
    }
}
 80025e6:	e040      	b.n	800266a <tft_print_rectangle+0x102>
        uint16_t buf_max_h = TFT_DMA_BUF_PIXELS / w;
 80025e8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	83fb      	strh	r3, [r7, #30]
        uint16_t num_section = h / buf_max_h;
 80025f4:	8bfb      	ldrh	r3, [r7, #30]
 80025f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	83bb      	strh	r3, [r7, #28]
        for (int k = 0; k < num_section; ++k) {
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	e010      	b.n	8002626 <tft_print_rectangle+0xbe>
            tft_print_rectangle_dma(color, x, y + k * buf_max_h, w, buf_max_h);
 8002604:	8bfb      	ldrh	r3, [r7, #30]
 8002606:	6a3a      	ldr	r2, [r7, #32]
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	441a      	add	r2, r3
 8002612:	8bfb      	ldrh	r3, [r7, #30]
 8002614:	89f8      	ldrh	r0, [r7, #14]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	f7ff ff26 	bl	800246c <tft_print_rectangle_dma>
        for (int k = 0; k < num_section; ++k) {
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	3301      	adds	r3, #1
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	8bbb      	ldrh	r3, [r7, #28]
 8002628:	6a3a      	ldr	r2, [r7, #32]
 800262a:	429a      	cmp	r2, r3
 800262c:	dbea      	blt.n	8002604 <tft_print_rectangle+0x9c>
        if (h % buf_max_h > 0) {
 800262e:	8bfa      	ldrh	r2, [r7, #30]
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	fbb3 f1f2 	udiv	r1, r3, r2
 8002636:	fb01 f202 	mul.w	r2, r1, r2
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d014      	beq.n	800266a <tft_print_rectangle+0x102>
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
 8002640:	8bbb      	ldrh	r3, [r7, #28]
 8002642:	8bfa      	ldrh	r2, [r7, #30]
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	461a      	mov	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	18d4      	adds	r4, r2, r3
 800264e:	8bfa      	ldrh	r2, [r7, #30]
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	fbb3 f1f2 	udiv	r1, r3, r2
 8002656:	fb01 f202 	mul.w	r2, r1, r2
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	89f8      	ldrh	r0, [r7, #14]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4622      	mov	r2, r4
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	f7ff ff01 	bl	800246c <tft_print_rectangle_dma>
}
 800266a:	bf00      	nop
 800266c:	372c      	adds	r7, #44	; 0x2c
 800266e:	46bd      	mov	sp, r7
 8002670:	bd90      	pop	{r4, r7, pc}
	...

08002674 <tft_print_image>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_image(void *buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8002682:	bf00      	nop
 8002684:	4812      	ldr	r0, [pc, #72]	; (80026d0 <tft_print_image+0x5c>)
 8002686:	f003 f879 	bl	800577c <HAL_SPI_GetState>
 800268a:	4603      	mov	r3, r0
 800268c:	2b01      	cmp	r3, #1
 800268e:	d1f9      	bne.n	8002684 <tft_print_image+0x10>
        ;  // wait for the SPI to be ready

    tft_set_region(x, y, w - 1, h - 1);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	b298      	uxth	r0, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	b299      	uxth	r1, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f7ff fb62 	bl	8001d70 <tft_set_region>

    write_many_dma(0x2c, buf, w * h * PIXEL_BYTES);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	fb12 f303 	smulbb	r3, r2, r3
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b29b      	uxth	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	202c      	movs	r0, #44	; 0x2c
 80026c4:	f7ff fa58 	bl	8001b78 <write_many_dma>
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000577c 	.word	0x2000577c

080026d4 <tft_update>:
 * @brief Update the screen in certain period
 *
 * @param period time in ms
 * @return state
 */
uint8_t tft_update(uint32_t period) {
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b08d      	sub	sp, #52	; 0x34
 80026d8:	af02      	add	r7, sp, #8
 80026da:	6078      	str	r0, [r7, #4]
    static uint32_t last_update = 0;
    if ((HAL_GetTick() - last_update) < period)
 80026dc:	f001 f84c 	bl	8003778 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4ba0      	ldr	r3, [pc, #640]	; (8002964 <tft_update+0x290>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d901      	bls.n	80026f2 <tft_update+0x1e>
        return 2;
 80026ee:	2302      	movs	r3, #2
 80026f0:	e133      	b.n	800295a <tft_update+0x286>
    last_update = HAL_GetTick();
 80026f2:	f001 f841 	bl	8003778 <HAL_GetTick>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4a9a      	ldr	r2, [pc, #616]	; (8002964 <tft_update+0x290>)
 80026fa:	6013      	str	r3, [r2, #0]

    for (uint8_t j = 0; j < char_max_y; j++) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002702:	e115      	b.n	8002930 <tft_update+0x25c>
        for (uint8_t i = 0; i < char_max_x; i++) {
 8002704:	2300      	movs	r3, #0
 8002706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800270a:	e105      	b.n	8002918 <tft_update+0x244>
            if (tft_char_is_changed(tft_screens, i, j)) {
 800270c:	4b96      	ldr	r3, [pc, #600]	; (8002968 <tft_update+0x294>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002714:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fe01 	bl	8001320 <tft_char_is_changed>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80f4 	beq.w	800290e <tft_update+0x23a>
                uint8_t adj_cnt = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 800272c:	e004      	b.n	8002738 <tft_update+0x64>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
                    adj_cnt++;  // Search for diff char
 800272e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002732:	3301      	adds	r3, #1
 8002734:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8002738:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800273c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002740:	4413      	add	r3, r2
 8002742:	4a8a      	ldr	r2, [pc, #552]	; (800296c <tft_update+0x298>)
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	4293      	cmp	r3, r2
 8002748:	da13      	bge.n	8002772 <tft_update+0x9e>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
 800274a:	4b87      	ldr	r3, [pc, #540]	; (8002968 <tft_update+0x294>)
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002752:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002756:	4413      	add	r3, r2
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fdde 	bl	8001320 <tft_char_is_changed>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <tft_update+0x9e>
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
 800276a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800276e:	2b27      	cmp	r3, #39	; 0x27
 8002770:	d9dd      	bls.n	800272e <tft_update+0x5a>

                uint16_t px = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	847b      	strh	r3, [r7, #34]	; 0x22
                uint16_t y = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 800277a:	e09a      	b.n	80028b2 <tft_update+0x1de>
                    uint8_t char_cnt = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 8002780:	e08e      	b.n	80028a0 <tft_update+0x1cc>
                        const uint8_t char_ptr = (CHAR_PTR(
 8002782:	4b79      	ldr	r3, [pc, #484]	; (8002968 <tft_update+0x294>)
 8002784:	6819      	ldr	r1, [r3, #0]
 8002786:	4b78      	ldr	r3, [pc, #480]	; (8002968 <tft_update+0x294>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461c      	mov	r4, r3
 800278e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002792:	4a76      	ldr	r2, [pc, #472]	; (800296c <tft_update+0x298>)
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	fb03 f202 	mul.w	r2, r3, r2
 800279a:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800279e:	7ffb      	ldrb	r3, [r7, #31]
 80027a0:	4403      	add	r3, r0
 80027a2:	441a      	add	r2, r3
 80027a4:	4623      	mov	r3, r4
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4423      	add	r3, r4
 80027aa:	015b      	lsls	r3, r3, #5
 80027ac:	440b      	add	r3, r1
 80027ae:	4413      	add	r3, r2
 80027b0:	3301      	adds	r3, #1
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	3b20      	subs	r3, #32
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	461a      	mov	r2, r3
                                curr_text_buf[TFT_XY(i + char_cnt, j)]))[y];
 80027ba:	8c3b      	ldrh	r3, [r7, #32]
 80027bc:	4413      	add	r3, r2
 80027be:	4a6c      	ldr	r2, [pc, #432]	; (8002970 <tft_update+0x29c>)
 80027c0:	4413      	add	r3, r2
                        const uint8_t char_ptr = (CHAR_PTR(
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	777b      	strb	r3, [r7, #29]
                        uint16_t fg = curr_text_color_buf[TFT_XY(i + char_cnt, j)];
 80027c6:	4b68      	ldr	r3, [pc, #416]	; (8002968 <tft_update+0x294>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b67      	ldr	r3, [pc, #412]	; (8002968 <tft_update+0x294>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461c      	mov	r4, r3
 80027d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d6:	4965      	ldr	r1, [pc, #404]	; (800296c <tft_update+0x298>)
 80027d8:	7809      	ldrb	r1, [r1, #0]
 80027da:	fb03 f101 	mul.w	r1, r3, r1
 80027de:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	4403      	add	r3, r0
 80027e6:	4419      	add	r1, r3
 80027e8:	4623      	mov	r3, r4
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4423      	add	r3, r4
 80027ee:	015b      	lsls	r3, r3, #5
 80027f0:	440b      	add	r3, r1
 80027f2:	33a0      	adds	r3, #160	; 0xa0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	885b      	ldrh	r3, [r3, #2]
 80027fa:	837b      	strh	r3, [r7, #26]
                        uint16_t bg = curr_bg_color_buf[TFT_XY(i + char_cnt, j)];
 80027fc:	4b5a      	ldr	r3, [pc, #360]	; (8002968 <tft_update+0x294>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <tft_update+0x294>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461c      	mov	r4, r3
 8002808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280c:	4957      	ldr	r1, [pc, #348]	; (800296c <tft_update+0x298>)
 800280e:	7809      	ldrb	r1, [r1, #0]
 8002810:	fb03 f101 	mul.w	r1, r3, r1
 8002814:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002818:	7ffb      	ldrb	r3, [r7, #31]
 800281a:	4403      	add	r3, r0
 800281c:	4419      	add	r1, r3
 800281e:	4623      	mov	r3, r4
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4423      	add	r3, r4
 8002824:	015b      	lsls	r3, r3, #5
 8002826:	440b      	add	r3, r1
 8002828:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	885b      	ldrh	r3, [r3, #2]
 8002832:	833b      	strh	r3, [r7, #24]
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 8002834:	2308      	movs	r3, #8
 8002836:	77bb      	strb	r3, [r7, #30]
 8002838:	e02c      	b.n	8002894 <tft_update+0x1c0>
                            uint16_t color =
                                    ((char_ptr >> (x - 1)) & 0x01) ? fg : bg;
 800283a:	7f7a      	ldrb	r2, [r7, #29]
 800283c:	7fbb      	ldrb	r3, [r7, #30]
 800283e:	3b01      	subs	r3, #1
 8002840:	fa42 f303 	asr.w	r3, r2, r3
 8002844:	f003 0301 	and.w	r3, r3, #1
                            uint16_t color =
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <tft_update+0x17c>
 800284c:	8b7b      	ldrh	r3, [r7, #26]
 800284e:	e000      	b.n	8002852 <tft_update+0x17e>
 8002850:	8b3b      	ldrh	r3, [r7, #24]
 8002852:	82fb      	strh	r3, [r7, #22]
                            tft_buffer_pixel(&tft_dma_bufs[buf_ptr][px], color);
 8002854:	4b47      	ldr	r3, [pc, #284]	; (8002974 <tft_update+0x2a0>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800285c:	460b      	mov	r3, r1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	02db      	lsls	r3, r3, #11
 8002864:	4413      	add	r3, r2
 8002866:	4a44      	ldr	r2, [pc, #272]	; (8002978 <tft_update+0x2a4>)
 8002868:	4413      	add	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	8afb      	ldrh	r3, [r7, #22]
 800286e:	81fb      	strh	r3, [r7, #14]
    out[0] = rgb565 >> 8;
 8002870:	89fb      	ldrh	r3, [r7, #14]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	b29b      	uxth	r3, r3
 8002876:	b2da      	uxtb	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	3301      	adds	r3, #1
 8002880:	89fa      	ldrh	r2, [r7, #14]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
}
 8002886:	bf00      	nop
                            px += PIXEL_BYTES;
 8002888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800288a:	3302      	adds	r3, #2
 800288c:	847b      	strh	r3, [r7, #34]	; 0x22
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 800288e:	7fbb      	ldrb	r3, [r7, #30]
 8002890:	3b01      	subs	r3, #1
 8002892:	77bb      	strb	r3, [r7, #30]
 8002894:	7fbb      	ldrb	r3, [r7, #30]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1cf      	bne.n	800283a <tft_update+0x166>
                        }
                        char_cnt++;
 800289a:	7ffb      	ldrb	r3, [r7, #31]
 800289c:	3301      	adds	r3, #1
 800289e:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 80028a0:	7ffa      	ldrb	r2, [r7, #31]
 80028a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80028a6:	429a      	cmp	r2, r3
 80028a8:	f47f af6b 	bne.w	8002782 <tft_update+0xae>
                    }
                    y++;
 80028ac:	8c3b      	ldrh	r3, [r7, #32]
 80028ae:	3301      	adds	r3, #1
 80028b0:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 80028b2:	8c3b      	ldrh	r3, [r7, #32]
 80028b4:	2b0f      	cmp	r3, #15
 80028b6:	f67f af61 	bls.w	800277c <tft_update+0xa8>
                }

                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <tft_update+0x2a0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	02db      	lsls	r3, r3, #11
 80028c8:	4a2b      	ldr	r2, [pc, #172]	; (8002978 <tft_update+0x2a4>)
 80028ca:	1898      	adds	r0, r3, r2
 80028cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4619      	mov	r1, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 80028d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d8:	011b      	lsls	r3, r3, #4
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 80028da:	461a      	mov	r2, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 80028dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80028e0:	00db      	lsls	r3, r3, #3
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 80028e2:	461c      	mov	r4, r3
 80028e4:	2310      	movs	r3, #16
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	4623      	mov	r3, r4
 80028ea:	f7ff fec3 	bl	8002674 <tft_print_image>
                        CHAR_HEIGHT);
                buf_ptr ^= 0x1;
 80028ee:	4b21      	ldr	r3, [pc, #132]	; (8002974 <tft_update+0x2a0>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <tft_update+0x2a0>)
 80028fa:	701a      	strb	r2, [r3, #0]
                i += adj_cnt - 1;
 80028fc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002904:	4413      	add	r3, r2
 8002906:	b2db      	uxtb	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t i = 0; i < char_max_x; i++) {
 800290e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002912:	3301      	adds	r3, #1
 8002914:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <tft_update+0x298>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002920:	429a      	cmp	r2, r3
 8002922:	f4ff aef3 	bcc.w	800270c <tft_update+0x38>
    for (uint8_t j = 0; j < char_max_y; j++) {
 8002926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292a:	3301      	adds	r3, #1
 800292c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <tft_update+0x2a8>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002938:	429a      	cmp	r2, r3
 800293a:	f4ff aee3 	bcc.w	8002704 <tft_update+0x30>
            }
        }
    }

    // Swap pointers
    curr_screen = !curr_screen;
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <tft_update+0x294>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <tft_update+0x294>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	701a      	strb	r2, [r3, #0]

    tft_clear();
 8002954:	f7ff f964 	bl	8001c20 <tft_clear>

    return 0;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	372c      	adds	r7, #44	; 0x2c
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	20005774 	.word	0x20005774
 8002968:	2000009c 	.word	0x2000009c
 800296c:	20000129 	.word	0x20000129
 8002970:	08006f68 	.word	0x08006f68
 8002974:	20000770 	.word	0x20000770
 8002978:	20000774 	.word	0x20000774
 800297c:	2000012a 	.word	0x2000012a

08002980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	f5ad 3d96 	sub.w	sp, sp, #76800	; 0x12c00
 8002986:	b082      	sub	sp, #8
 8002988:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800298a:	f000 fe8f 	bl	80036ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800298e:	f000 f8a7 	bl	8002ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002992:	f7fe fbd5 	bl	8001140 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002996:	f7fe faa5 	bl	8000ee4 <MX_CAN1_Init>
  MX_CAN2_Init();
 800299a:	f7fe fad9 	bl	8000f50 <MX_CAN2_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 800299e:	f000 fd8b 	bl	80034b8 <MX_USART1_UART_Init>
//  MX_I2C2_Init();
  MX_DMA_Init();
 80029a2:	f7fe fbad 	bl	8001100 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80029a6:	f000 fdb1 	bl	800350c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80029aa:	f000 fc61 	bl	8003270 <MX_TIM5_Init>
  MX_TIM6_Init();
 80029ae:	f000 fcd5 	bl	800335c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  led_off(LED1);
 80029b2:	2201      	movs	r2, #1
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	4845      	ldr	r0, [pc, #276]	; (8002acc <main+0x14c>)
 80029b8:	f001 fe62 	bl	8004680 <HAL_GPIO_WritePin>
  led_off(LED2);
 80029bc:	2201      	movs	r2, #1
 80029be:	2140      	movs	r1, #64	; 0x40
 80029c0:	4842      	ldr	r0, [pc, #264]	; (8002acc <main+0x14c>)
 80029c2:	f001 fe5d 	bl	8004680 <HAL_GPIO_WritePin>
  led_off(LED3);
 80029c6:	2201      	movs	r2, #1
 80029c8:	2120      	movs	r1, #32
 80029ca:	4840      	ldr	r0, [pc, #256]	; (8002acc <main+0x14c>)
 80029cc:	f001 fe58 	bl	8004680 <HAL_GPIO_WritePin>
  led_off(LED4);
 80029d0:	2201      	movs	r2, #1
 80029d2:	2110      	movs	r1, #16
 80029d4:	483d      	ldr	r0, [pc, #244]	; (8002acc <main+0x14c>)
 80029d6:	f001 fe53 	bl	8004680 <HAL_GPIO_WritePin>
  tft_init(PIN_ON_TOP, BLACK, WHITE, YELLOW, DARK_GREEN);
 80029da:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80029e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e8:	2100      	movs	r1, #0
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7ff fa08 	bl	8001e00 <tft_init>

  camera_GPIO_init();
 80029f0:	f7fd fe6a 	bl	80006c8 <camera_GPIO_init>
  	tft_prints(0, 0, "Initing camera");
 80029f4:	4a36      	ldr	r2, [pc, #216]	; (8002ad0 <main+0x150>)
 80029f6:	2100      	movs	r1, #0
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7ff fd09 	bl	8002410 <tft_prints>
  	tft_update(0);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7ff fe68 	bl	80026d4 <tft_update>
  	if (camera_init() == CAM_NOT_INITED || camera_init() == CAM_INIT_ERROR) {
 8002a04:	f7fd feb4 	bl	8000770 <camera_init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d004      	beq.n	8002a18 <main+0x98>
 8002a0e:	f7fd feaf 	bl	8000770 <camera_init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <main+0xa4>
  		tft_prints(0, 0, "No OV7725 module");
 8002a18:	4a2e      	ldr	r2, [pc, #184]	; (8002ad4 <main+0x154>)
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7ff fcf7 	bl	8002410 <tft_prints>
 8002a22:	e007      	b.n	8002a34 <main+0xb4>
  	}
  	else {
  		tft_prints(0, 0, "Inited");
 8002a24:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <main+0x158>)
 8002a26:	2100      	movs	r1, #0
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fcf1 	bl	8002410 <tft_prints>
  		cam_set_state(CAM_CAPTURING);
 8002a2e:	2004      	movs	r0, #4
 8002a30:	f7fd fee2 	bl	80007f8 <cam_set_state>
  	}
  	tft_update(0);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7ff fe4d 	bl	80026d4 <tft_update>
  	cam_set_window(0, 0, QQVGA_120x160);
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fd fefc 	bl	800083c <cam_set_window>
//  	cam_set_framesize(QQVGA_120x160);
//  	cam_set_framerate(CAM_75FPS);
  	cam_set_colormode(CAM_GRAYSCALE);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fd fee7 	bl	8000818 <cam_set_colormode>
  //	TIM5 ->PSC = 9;

#define IMG_WIDTH 120
#define IMG_HEIGHT 160

  	uint16_t image[IMG_HEIGHT*IMG_WIDTH] = {0};
 8002a4a:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8002a4e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8002a52:	4618      	mov	r0, r3
 8002a54:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f004 fa32 	bl	8006ec4 <memset>
//  	uint16_t img_data[IMG_HEIGHT*IMG_WIDTH] = {0};
  	uint16_t processed[IMG_HEIGHT*IMG_WIDTH] = {0};
 8002a60:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8002a64:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2100      	movs	r1, #0
 8002a72:	f004 fa27 	bl	8006ec4 <memset>
  	while (1)
  	{
//  		gpio_reset(LED1);
  		//tft_prints(0,0,"Hello World!");
  		//tft_update(10);
  		if (cam_is_frame_ready())
 8002a76:	f7fe f933 	bl	8000ce0 <cam_is_frame_ready>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <main+0x128>
  		{
  			cam_get_rgb565(image);
 8002a80:	f507 4316 	add.w	r3, r7, #38400	; 0x9600
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe f93d 	bl	8000d04 <cam_get_rgb565>
  			cam_rgb2printable(image, processed);
 8002a8a:	463a      	mov	r2, r7
 8002a8c:	f507 4316 	add.w	r3, r7, #38400	; 0x9600
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f9b4 	bl	8000e00 <cam_rgb2printable>
  			tft_print_image(processed,0,0,120,160);
 8002a98:	4638      	mov	r0, r7
 8002a9a:	23a0      	movs	r3, #160	; 0xa0
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2378      	movs	r3, #120	; 0x78
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	f7ff fde6 	bl	8002674 <tft_print_image>
  		}
  		//overallImgProcessor(IMG_WIDTH, IMG_HEIGHT, img_data_ptr, processed_image_ptr);
  		static uint32_t last_ticks = 0;
  		if (HAL_GetTick() - last_ticks > 100) {
 8002aa8:	f000 fe66 	bl	8003778 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <main+0x15c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b64      	cmp	r3, #100	; 0x64
 8002ab6:	d9de      	bls.n	8002a76 <main+0xf6>
  			last_ticks = HAL_GetTick();
 8002ab8:	f000 fe5e 	bl	8003778 <HAL_GetTick>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4a07      	ldr	r2, [pc, #28]	; (8002adc <main+0x15c>)
 8002ac0:	6013      	str	r3, [r2, #0]
  			led_toggle(LED1);
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	4801      	ldr	r0, [pc, #4]	; (8002acc <main+0x14c>)
 8002ac6:	f001 fdf4 	bl	80046b2 <HAL_GPIO_TogglePin>
  	{
 8002aca:	e7d4      	b.n	8002a76 <main+0xf6>
 8002acc:	40020400 	.word	0x40020400
 8002ad0:	08006f1c 	.word	0x08006f1c
 8002ad4:	08006f2c 	.word	0x08006f2c
 8002ad8:	08006f40 	.word	0x08006f40
 8002adc:	20005778 	.word	0x20005778

08002ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b094      	sub	sp, #80	; 0x50
 8002ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ae6:	f107 0320 	add.w	r3, r7, #32
 8002aea:	2230      	movs	r2, #48	; 0x30
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 f9e8 	bl	8006ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <SystemClock_Config+0xcc>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	4a27      	ldr	r2, [pc, #156]	; (8002bac <SystemClock_Config+0xcc>)
 8002b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b12:	6413      	str	r3, [r2, #64]	; 0x40
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <SystemClock_Config+0xcc>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <SystemClock_Config+0xd0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <SystemClock_Config+0xd0>)
 8002b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <SystemClock_Config+0xd0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b46:	2302      	movs	r3, #2
 8002b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b50:	2304      	movs	r3, #4
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b54:	23a8      	movs	r3, #168	; 0xa8
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b60:	f107 0320 	add.w	r3, r7, #32
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 fdd7 	bl	8004718 <HAL_RCC_OscConfig>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b70:	f000 f820 	bl	8002bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b74:	230f      	movs	r3, #15
 8002b76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	2105      	movs	r1, #5
 8002b92:	4618      	mov	r0, r3
 8002b94:	f002 f838 	bl	8004c08 <HAL_RCC_ClockConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b9e:	f000 f809 	bl	8002bb4 <Error_Handler>
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3750      	adds	r7, #80	; 0x50
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40007000 	.word	0x40007000

08002bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
}
 8002bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {}
 8002bbc:	e7fe      	b.n	8002bbc <Error_Handler+0x8>
	...

08002bc0 <SCCB_GPIO_init>:
#include "tim.h"

#include "stm32f4xx.h"
#define SCCB_TIMER htim6

void SCCB_GPIO_init(void) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure = {0};
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <SCCB_GPIO_init+0x6c>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <SCCB_GPIO_init+0x6c>)
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	6313      	str	r3, [r2, #48]	; 0x30
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <SCCB_GPIO_init+0x6c>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStructure.Pin = OV7725_SDA_PIN;
 8002bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bf4:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8002bfa:	2311      	movs	r3, #17
 8002bfc:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(OV7725_SDA_PORT, &GPIO_InitStructure);
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	480b      	ldr	r0, [pc, #44]	; (8002c30 <SCCB_GPIO_init+0x70>)
 8002c04:	f001 fb88 	bl	8004318 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_SCL_PIN;
 8002c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c0c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(OV7725_SCL_PORT, &GPIO_InitStructure);
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4807      	ldr	r0, [pc, #28]	; (8002c30 <SCCB_GPIO_init+0x70>)
 8002c14:	f001 fb80 	bl	8004318 <HAL_GPIO_Init>
	HAL_TIM_Base_Init(&SCCB_TIMER);
 8002c18:	4806      	ldr	r0, [pc, #24]	; (8002c34 <SCCB_GPIO_init+0x74>)
 8002c1a:	f002 ff1d 	bl	8005a58 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&SCCB_TIMER);
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <SCCB_GPIO_init+0x74>)
 8002c20:	f002 ff6a 	bl	8005af8 <HAL_TIM_Base_Start>
}
 8002c24:	bf00      	nop
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020400 	.word	0x40020400
 8002c34:	2000587c 	.word	0x2000587c

08002c38 <delay_us>:

static inline void delay_us(uint16_t us) {
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&SCCB_TIMER, 0);
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <delay_us+0x30>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&SCCB_TIMER) < us)
 8002c4a:	bf00      	nop
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <delay_us+0x30>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3f9      	bcc.n	8002c4c <delay_us+0x14>
		;
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	2000587c 	.word	0x2000587c

08002c6c <SCCB_delay>:

static inline void SCCB_delay(void) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	// volatile uint16_t i = 400;
	// while (i--)
	// 	;
	delay_us(12); // min 12us
 8002c70:	200c      	movs	r0, #12
 8002c72:	f7ff ffe1 	bl	8002c38 <delay_us>
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <SCCB_start>:

static inline SCCBState SCCB_start(void) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
	SDA_H;
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <SCCB_start+0x60>)
 8002c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c86:	619a      	str	r2, [r3, #24]
	SCL_H;
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <SCCB_start+0x60>)
 8002c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c8e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002c90:	f7ff ffec 	bl	8002c6c <SCCB_delay>
	if (!SDA_READ)
 8002c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c98:	4810      	ldr	r0, [pc, #64]	; (8002cdc <SCCB_start+0x60>)
 8002c9a:	f001 fcd9 	bl	8004650 <HAL_GPIO_ReadPin>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <SCCB_start+0x2c>
		return SCCB_FAIL; // If SDA is low, bus is busy
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e016      	b.n	8002cd6 <SCCB_start+0x5a>
	SDA_L;
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <SCCB_start+0x60>)
 8002caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cae:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002cb0:	f7ff ffdc 	bl	8002c6c <SCCB_delay>
	if (SDA_READ)
 8002cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cb8:	4808      	ldr	r0, [pc, #32]	; (8002cdc <SCCB_start+0x60>)
 8002cba:	f001 fcc9 	bl	8004650 <HAL_GPIO_ReadPin>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <SCCB_start+0x4c>
		return SCCB_FAIL; // If SDA is high, bus error
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e006      	b.n	8002cd6 <SCCB_start+0x5a>
	SDA_L;
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <SCCB_start+0x60>)
 8002cca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cce:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002cd0:	f7ff ffcc 	bl	8002c6c <SCCB_delay>
	return SCCB_OK;
 8002cd4:	2301      	movs	r3, #1
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40020400 	.word	0x40020400

08002ce0 <SCCB_stop>:

static inline void SCCB_stop(void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	SCL_L;
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <SCCB_stop+0x38>)
 8002ce6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cea:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002cec:	f7ff ffbe 	bl	8002c6c <SCCB_delay>
	SDA_L;
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <SCCB_stop+0x38>)
 8002cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cf6:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002cf8:	f7ff ffb8 	bl	8002c6c <SCCB_delay>
	SCL_H;
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <SCCB_stop+0x38>)
 8002cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d02:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d04:	f7ff ffb2 	bl	8002c6c <SCCB_delay>
	SDA_H;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <SCCB_stop+0x38>)
 8002d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d0e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d10:	f7ff ffac 	bl	8002c6c <SCCB_delay>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40020400 	.word	0x40020400

08002d1c <SCCB_ack>:

static inline void SCCB_ack(void) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
	SCL_L;
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <SCCB_ack+0x38>)
 8002d22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d26:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d28:	f7ff ffa0 	bl	8002c6c <SCCB_delay>
	SDA_L;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <SCCB_ack+0x38>)
 8002d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d32:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d34:	f7ff ff9a 	bl	8002c6c <SCCB_delay>
	SCL_H;
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <SCCB_ack+0x38>)
 8002d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d3e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d40:	f7ff ff94 	bl	8002c6c <SCCB_delay>
	SCL_L;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <SCCB_ack+0x38>)
 8002d46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d4a:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d4c:	f7ff ff8e 	bl	8002c6c <SCCB_delay>
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40020400 	.word	0x40020400

08002d58 <SCCB_noAck>:

static inline void SCCB_noAck(void) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
	SCL_L;
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <SCCB_noAck+0x38>)
 8002d5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d62:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d64:	f7ff ff82 	bl	8002c6c <SCCB_delay>
	SDA_H;
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <SCCB_noAck+0x38>)
 8002d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d70:	f7ff ff7c 	bl	8002c6c <SCCB_delay>
	SCL_H;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <SCCB_noAck+0x38>)
 8002d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d7a:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d7c:	f7ff ff76 	bl	8002c6c <SCCB_delay>
	SCL_L;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <SCCB_noAck+0x38>)
 8002d82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d86:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002d88:	f7ff ff70 	bl	8002c6c <SCCB_delay>
}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40020400 	.word	0x40020400

08002d94 <SCCB_waitAck>:

static inline SCCBState SCCB_waitAck(void) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
	SCL_L;
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <SCCB_waitAck+0x54>)
 8002d9a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d9e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002da0:	f7ff ff64 	bl	8002c6c <SCCB_delay>
	SDA_H;
 8002da4:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <SCCB_waitAck+0x54>)
 8002da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002daa:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002dac:	f7ff ff5e 	bl	8002c6c <SCCB_delay>
	SCL_H;
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <SCCB_waitAck+0x54>)
 8002db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db6:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8002db8:	f7ff ff58 	bl	8002c6c <SCCB_delay>
	if (SDA_READ) {
 8002dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dc0:	4809      	ldr	r0, [pc, #36]	; (8002de8 <SCCB_waitAck+0x54>)
 8002dc2:	f001 fc45 	bl	8004650 <HAL_GPIO_ReadPin>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <SCCB_waitAck+0x44>
		SCL_L;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <SCCB_waitAck+0x54>)
 8002dce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002dd2:	619a      	str	r2, [r3, #24]
		return SCCB_FAIL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e004      	b.n	8002de2 <SCCB_waitAck+0x4e>
	}
	SCL_L;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <SCCB_waitAck+0x54>)
 8002dda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002dde:	619a      	str	r2, [r3, #24]
	return SCCB_OK;
 8002de0:	2301      	movs	r3, #1
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40020400 	.word	0x40020400

08002dec <SCCB_TxByte>:

static inline void SCCB_TxByte(uint8_t SendByte) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t i = 8;
 8002df6:	2308      	movs	r3, #8
 8002df8:	73fb      	strb	r3, [r7, #15]
	while (i--) {
 8002dfa:	e01d      	b.n	8002e38 <SCCB_TxByte+0x4c>
		SCL_L;
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <SCCB_TxByte+0x6c>)
 8002dfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e02:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8002e04:	f7ff ff32 	bl	8002c6c <SCCB_delay>
		if (SendByte & 0x80) {
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da04      	bge.n	8002e1a <SCCB_TxByte+0x2e>
			SDA_H;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <SCCB_TxByte+0x6c>)
 8002e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e16:	619a      	str	r2, [r3, #24]
 8002e18:	e003      	b.n	8002e22 <SCCB_TxByte+0x36>
		} else {
			SDA_L;
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <SCCB_TxByte+0x6c>)
 8002e1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e20:	619a      	str	r2, [r3, #24]
		}
		SendByte <<= 1;
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	71fb      	strb	r3, [r7, #7]
		SCCB_delay();
 8002e28:	f7ff ff20 	bl	8002c6c <SCCB_delay>
		SCL_H;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <SCCB_TxByte+0x6c>)
 8002e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e32:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8002e34:	f7ff ff1a 	bl	8002c6c <SCCB_delay>
	while (i--) {
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	1e5a      	subs	r2, r3, #1
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	73fa      	strb	r2, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1da      	bne.n	8002dfc <SCCB_TxByte+0x10>
	}
	SCL_L;
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SCCB_TxByte+0x6c>)
 8002e48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e4c:	619a      	str	r2, [r3, #24]
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40020400 	.word	0x40020400

08002e5c <SCCB_RxByte>:

static inline uint8_t SCCB_RxByte(void) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
	volatile uint8_t i = 8;
 8002e62:	2308      	movs	r3, #8
 8002e64:	71bb      	strb	r3, [r7, #6]
	uint8_t ReceiveByte = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	71fb      	strb	r3, [r7, #7]

	SDA_H;
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <SCCB_RxByte+0x70>)
 8002e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e70:	619a      	str	r2, [r3, #24]
	while (i--) {
 8002e72:	e01a      	b.n	8002eaa <SCCB_RxByte+0x4e>
		ReceiveByte <<= 1;
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	71fb      	strb	r3, [r7, #7]
		SCL_L;
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <SCCB_RxByte+0x70>)
 8002e7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e80:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8002e82:	f7ff fef3 	bl	8002c6c <SCCB_delay>
		SCL_H;
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <SCCB_RxByte+0x70>)
 8002e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8c:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8002e8e:	f7ff feed 	bl	8002c6c <SCCB_delay>
		if (SDA_READ) {
 8002e92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e96:	480d      	ldr	r0, [pc, #52]	; (8002ecc <SCCB_RxByte+0x70>)
 8002e98:	f001 fbda 	bl	8004650 <HAL_GPIO_ReadPin>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <SCCB_RxByte+0x4e>
			ReceiveByte |= 0x01;
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	71fb      	strb	r3, [r7, #7]
	while (i--) {
 8002eaa:	79bb      	ldrb	r3, [r7, #6]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	1e5a      	subs	r2, r3, #1
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	71ba      	strb	r2, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1dd      	bne.n	8002e74 <SCCB_RxByte+0x18>
		}
	}
	SCL_L;
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <SCCB_RxByte+0x70>)
 8002eba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ebe:	619a      	str	r2, [r3, #24]
	return ReceiveByte & 0xFF;
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40020400 	.word	0x40020400

08002ed0 <SCCB_send_byte>:

SCCBState SCCB_send_byte(uint16_t WriteAddress, uint8_t SendByte) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	460a      	mov	r2, r1
 8002eda:	80fb      	strh	r3, [r7, #6]
 8002edc:	4613      	mov	r3, r2
 8002ede:	717b      	strb	r3, [r7, #5]
	if (!SCCB_start()) {
 8002ee0:	f7ff fecc 	bl	8002c7c <SCCB_start>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <SCCB_send_byte+0x1e>
		return SCCB_FAIL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e01b      	b.n	8002f26 <SCCB_send_byte+0x56>
	}
	SCCB_TxByte(OV7725_ADDR); // device address
 8002eee:	2042      	movs	r0, #66	; 0x42
 8002ef0:	f7ff ff7c 	bl	8002dec <SCCB_TxByte>
	if (!SCCB_waitAck()) {
 8002ef4:	f7ff ff4e 	bl	8002d94 <SCCB_waitAck>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <SCCB_send_byte+0x36>
		SCCB_stop();
 8002efe:	f7ff feef 	bl	8002ce0 <SCCB_stop>
		return SCCB_FAIL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e00f      	b.n	8002f26 <SCCB_send_byte+0x56>
	}
	SCCB_TxByte((uint8_t)(WriteAddress & 0x00FF));
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff6e 	bl	8002dec <SCCB_TxByte>
	SCCB_waitAck();
 8002f10:	f7ff ff40 	bl	8002d94 <SCCB_waitAck>
	SCCB_TxByte(SendByte);
 8002f14:	797b      	ldrb	r3, [r7, #5]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff68 	bl	8002dec <SCCB_TxByte>
	SCCB_waitAck();
 8002f1c:	f7ff ff3a 	bl	8002d94 <SCCB_waitAck>
	SCCB_stop();
 8002f20:	f7ff fede 	bl	8002ce0 <SCCB_stop>
	return SCCB_OK;
 8002f24:	2301      	movs	r3, #1
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <SCCB_read_byte>:

SCCBState SCCB_read_byte(uint8_t addr, uint8_t* buf, uint16_t len) {
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	6039      	str	r1, [r7, #0]
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80bb      	strh	r3, [r7, #4]
	if (!SCCB_start()) {
 8002f3e:	f7ff fe9d 	bl	8002c7c <SCCB_start>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <SCCB_read_byte+0x1e>
		return SCCB_FAIL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e040      	b.n	8002fce <SCCB_read_byte+0xa0>
	}
	SCCB_TxByte(OV7725_ADDR); // device address
 8002f4c:	2042      	movs	r0, #66	; 0x42
 8002f4e:	f7ff ff4d 	bl	8002dec <SCCB_TxByte>
	if (!SCCB_waitAck()) {
 8002f52:	f7ff ff1f 	bl	8002d94 <SCCB_waitAck>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d103      	bne.n	8002f64 <SCCB_read_byte+0x36>
		SCCB_stop();
 8002f5c:	f7ff fec0 	bl	8002ce0 <SCCB_stop>
		return SCCB_FAIL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e034      	b.n	8002fce <SCCB_read_byte+0xa0>
	}
	SCCB_TxByte(addr);
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff40 	bl	8002dec <SCCB_TxByte>
	SCCB_waitAck();
 8002f6c:	f7ff ff12 	bl	8002d94 <SCCB_waitAck>
	SCCB_stop();
 8002f70:	f7ff feb6 	bl	8002ce0 <SCCB_stop>

	if (!SCCB_start()) {
 8002f74:	f7ff fe82 	bl	8002c7c <SCCB_start>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <SCCB_read_byte+0x54>
		return SCCB_FAIL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e025      	b.n	8002fce <SCCB_read_byte+0xa0>
	}
	SCCB_TxByte(OV7725_ADDR + 1);
 8002f82:	2043      	movs	r0, #67	; 0x43
 8002f84:	f7ff ff32 	bl	8002dec <SCCB_TxByte>
	if (!SCCB_waitAck()) {
 8002f88:	f7ff ff04 	bl	8002d94 <SCCB_waitAck>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d117      	bne.n	8002fc2 <SCCB_read_byte+0x94>
		SCCB_stop();
 8002f92:	f7ff fea5 	bl	8002ce0 <SCCB_stop>
		return SCCB_FAIL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e019      	b.n	8002fce <SCCB_read_byte+0xa0>
	}
	while (len) {
		*buf = SCCB_RxByte();
 8002f9a:	f7ff ff5f 	bl	8002e5c <SCCB_RxByte>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	701a      	strb	r2, [r3, #0]
		if (len == 1) {
 8002fa6:	88bb      	ldrh	r3, [r7, #4]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d102      	bne.n	8002fb2 <SCCB_read_byte+0x84>
			SCCB_noAck();
 8002fac:	f7ff fed4 	bl	8002d58 <SCCB_noAck>
 8002fb0:	e001      	b.n	8002fb6 <SCCB_read_byte+0x88>
		} else {
			SCCB_ack();
 8002fb2:	f7ff feb3 	bl	8002d1c <SCCB_ack>
		}
		buf++;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	603b      	str	r3, [r7, #0]
		len--;
 8002fbc:	88bb      	ldrh	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	80bb      	strh	r3, [r7, #4]
	while (len) {
 8002fc2:	88bb      	ldrh	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e8      	bne.n	8002f9a <SCCB_read_byte+0x6c>
	}
	SCCB_stop();
 8002fc8:	f7ff fe8a 	bl	8002ce0 <SCCB_stop>
	return SCCB_OK;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <MX_SPI1_Init+0x64>)
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <MX_SPI1_Init+0x68>)
 8002fe0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <MX_SPI1_Init+0x64>)
 8002fe4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fe8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <MX_SPI1_Init+0x64>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <MX_SPI1_Init+0x64>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <MX_SPI1_Init+0x64>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <MX_SPI1_Init+0x64>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <MX_SPI1_Init+0x64>)
 8003004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003008:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <MX_SPI1_Init+0x64>)
 800300c:	2200      	movs	r2, #0
 800300e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <MX_SPI1_Init+0x64>)
 8003012:	2200      	movs	r2, #0
 8003014:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <MX_SPI1_Init+0x64>)
 8003018:	2200      	movs	r2, #0
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <MX_SPI1_Init+0x64>)
 800301e:	2200      	movs	r2, #0
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <MX_SPI1_Init+0x64>)
 8003024:	220a      	movs	r2, #10
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003028:	4804      	ldr	r0, [pc, #16]	; (800303c <MX_SPI1_Init+0x64>)
 800302a:	f002 f80d 	bl	8005048 <HAL_SPI_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003034:	f7ff fdbe 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	2000577c 	.word	0x2000577c
 8003040:	40013000 	.word	0x40013000

08003044 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a39      	ldr	r2, [pc, #228]	; (8003148 <HAL_SPI_MspInit+0x104>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d16b      	bne.n	800313e <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	4b38      	ldr	r3, [pc, #224]	; (800314c <HAL_SPI_MspInit+0x108>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4a37      	ldr	r2, [pc, #220]	; (800314c <HAL_SPI_MspInit+0x108>)
 8003070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	4b35      	ldr	r3, [pc, #212]	; (800314c <HAL_SPI_MspInit+0x108>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_SPI_MspInit+0x108>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	4a30      	ldr	r2, [pc, #192]	; (800314c <HAL_SPI_MspInit+0x108>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6313      	str	r3, [r2, #48]	; 0x30
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_SPI_MspInit+0x108>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MOSI_Pin;
 800309e:	23a0      	movs	r3, #160	; 0xa0
 80030a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030aa:	2303      	movs	r3, #3
 80030ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ae:	2305      	movs	r3, #5
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	4825      	ldr	r0, [pc, #148]	; (8003150 <HAL_SPI_MspInit+0x10c>)
 80030ba:	f001 f92d 	bl	8004318 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80030be:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <HAL_SPI_MspInit+0x114>)
 80030c2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030c6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80030ca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030ce:	2240      	movs	r2, #64	; 0x40
 80030d0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030d8:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030de:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030f2:	4b18      	ldr	r3, [pc, #96]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030f8:	4b16      	ldr	r3, [pc, #88]	; (8003154 <HAL_SPI_MspInit+0x110>)
 80030fa:	2204      	movs	r2, #4
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_SPI_MspInit+0x110>)
 8003100:	2203      	movs	r2, #3
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_INC16;
 8003104:	4b13      	ldr	r3, [pc, #76]	; (8003154 <HAL_SPI_MspInit+0x110>)
 8003106:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_SPI_MspInit+0x110>)
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003112:	4810      	ldr	r0, [pc, #64]	; (8003154 <HAL_SPI_MspInit+0x110>)
 8003114:	f000 fd6e 	bl	8003bf4 <HAL_DMA_Init>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 800311e:	f7ff fd49 	bl	8002bb4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_SPI_MspInit+0x110>)
 8003126:	649a      	str	r2, [r3, #72]	; 0x48
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_SPI_MspInit+0x110>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	2023      	movs	r0, #35	; 0x23
 8003134:	f000 fd27 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003138:	2023      	movs	r0, #35	; 0x23
 800313a:	f000 fd40 	bl	8003bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800313e:	bf00      	nop
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40013000 	.word	0x40013000
 800314c:	40023800 	.word	0x40023800
 8003150:	40020000 	.word	0x40020000
 8003154:	200057d4 	.word	0x200057d4
 8003158:	40026458 	.word	0x40026458

0800315c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_MspInit+0x4c>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <HAL_MspInit+0x4c>)
 800316c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003170:	6453      	str	r3, [r2, #68]	; 0x44
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <HAL_MspInit+0x4c>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_MspInit+0x4c>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_MspInit+0x4c>)
 8003188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318c:	6413      	str	r3, [r2, #64]	; 0x40
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_MspInit+0x4c>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b0:	e7fe      	b.n	80031b0 <NMI_Handler+0x4>

080031b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b6:	e7fe      	b.n	80031b6 <HardFault_Handler+0x4>

080031b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031bc:	e7fe      	b.n	80031bc <MemManage_Handler+0x4>

080031be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c2:	e7fe      	b.n	80031c2 <BusFault_Handler+0x4>

080031c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <UsageFault_Handler+0x4>

080031ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031f8:	f000 faaa 	bl	8003750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}

08003200 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <SPI1_IRQHandler+0x10>)
 8003206:	f002 f99b 	bl	8005540 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000577c 	.word	0x2000577c

08003214 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAM_VSYNC_Pin);
 8003218:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800321c:	f001 fa64 	bl	80046e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}

08003224 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <TIM5_IRQHandler+0x10>)
 800322a:	f002 fd26 	bl	8005c7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20005834 	.word	0x20005834

08003238 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800323c:	4802      	ldr	r0, [pc, #8]	; (8003248 <DMA2_Stream3_IRQHandler+0x10>)
 800323e:	f000 fe01 	bl	8003e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200057d4 	.word	0x200057d4

0800324c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <SystemInit+0x20>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	4a05      	ldr	r2, [pc, #20]	; (800326c <SystemInit+0x20>)
 8003258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800325c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08e      	sub	sp, #56	; 0x38
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003284:	f107 0320 	add.w	r3, r7, #32
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
 800329c:	615a      	str	r2, [r3, #20]
 800329e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80032a0:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <MX_TIM5_Init+0xe4>)
 80032a2:	4a2d      	ldr	r2, [pc, #180]	; (8003358 <MX_TIM5_Init+0xe8>)
 80032a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80032a6:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <MX_TIM5_Init+0xe4>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <MX_TIM5_Init+0xe4>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <MX_TIM5_Init+0xe4>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b8:	4b26      	ldr	r3, [pc, #152]	; (8003354 <MX_TIM5_Init+0xe4>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <MX_TIM5_Init+0xe4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80032c4:	4823      	ldr	r0, [pc, #140]	; (8003354 <MX_TIM5_Init+0xe4>)
 80032c6:	f002 fbc7 	bl	8005a58 <HAL_TIM_Base_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80032d0:	f7ff fc70 	bl	8002bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80032da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032de:	4619      	mov	r1, r3
 80032e0:	481c      	ldr	r0, [pc, #112]	; (8003354 <MX_TIM5_Init+0xe4>)
 80032e2:	f002 fe95 	bl	8006010 <HAL_TIM_ConfigClockSource>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80032ec:	f7ff fc62 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80032f0:	4818      	ldr	r0, [pc, #96]	; (8003354 <MX_TIM5_Init+0xe4>)
 80032f2:	f002 fc69 	bl	8005bc8 <HAL_TIM_PWM_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80032fc:	f7ff fc5a 	bl	8002bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003308:	f107 0320 	add.w	r3, r7, #32
 800330c:	4619      	mov	r1, r3
 800330e:	4811      	ldr	r0, [pc, #68]	; (8003354 <MX_TIM5_Init+0xe4>)
 8003310:	f003 fa62 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800331a:	f7ff fc4b 	bl	8002bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331e:	2360      	movs	r3, #96	; 0x60
 8003320:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	2200      	movs	r2, #0
 8003332:	4619      	mov	r1, r3
 8003334:	4807      	ldr	r0, [pc, #28]	; (8003354 <MX_TIM5_Init+0xe4>)
 8003336:	f002 fda9 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8003340:	f7ff fc38 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003344:	4803      	ldr	r0, [pc, #12]	; (8003354 <MX_TIM5_Init+0xe4>)
 8003346:	f000 f87d 	bl	8003444 <HAL_TIM_MspPostInit>

}
 800334a:	bf00      	nop
 800334c:	3738      	adds	r7, #56	; 0x38
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20005834 	.word	0x20005834
 8003358:	40000c00 	.word	0x40000c00

0800335c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003362:	463b      	mov	r3, r7
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <MX_TIM6_Init+0x64>)
 800336c:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <MX_TIM6_Init+0x68>)
 800336e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <MX_TIM6_Init+0x64>)
 8003372:	2253      	movs	r2, #83	; 0x53
 8003374:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <MX_TIM6_Init+0x64>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <MX_TIM6_Init+0x64>)
 800337e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003382:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <MX_TIM6_Init+0x64>)
 8003386:	2200      	movs	r2, #0
 8003388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800338a:	480d      	ldr	r0, [pc, #52]	; (80033c0 <MX_TIM6_Init+0x64>)
 800338c:	f002 fb64 	bl	8005a58 <HAL_TIM_Base_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003396:	f7ff fc0d 	bl	8002bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033a2:	463b      	mov	r3, r7
 80033a4:	4619      	mov	r1, r3
 80033a6:	4806      	ldr	r0, [pc, #24]	; (80033c0 <MX_TIM6_Init+0x64>)
 80033a8:	f003 fa16 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80033b2:	f7ff fbff 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000587c 	.word	0x2000587c
 80033c4:	40001000 	.word	0x40001000

080033c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a18      	ldr	r2, [pc, #96]	; (8003438 <HAL_TIM_Base_MspInit+0x70>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d116      	bne.n	8003408 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_TIM_Base_MspInit+0x74>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_TIM_Base_MspInit+0x74>)
 80033e4:	f043 0308 	orr.w	r3, r3, #8
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_TIM_Base_MspInit+0x74>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	2032      	movs	r0, #50	; 0x32
 80033fc:	f000 fbc3 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003400:	2032      	movs	r0, #50	; 0x32
 8003402:	f000 fbdc 	bl	8003bbe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003406:	e012      	b.n	800342e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <HAL_TIM_Base_MspInit+0x78>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10d      	bne.n	800342e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_TIM_Base_MspInit+0x74>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <HAL_TIM_Base_MspInit+0x74>)
 800341c:	f043 0310 	orr.w	r3, r3, #16
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_TIM_Base_MspInit+0x74>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40000c00 	.word	0x40000c00
 800343c:	40023800 	.word	0x40023800
 8003440:	40001000 	.word	0x40001000

08003444 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a12      	ldr	r2, [pc, #72]	; (80034ac <HAL_TIM_MspPostInit+0x68>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d11d      	bne.n	80034a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_TIM_MspPostInit+0x6c>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <HAL_TIM_MspPostInit+0x6c>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <HAL_TIM_MspPostInit+0x6c>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003482:	2301      	movs	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003492:	2302      	movs	r3, #2
 8003494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003496:	f107 030c 	add.w	r3, r7, #12
 800349a:	4619      	mov	r1, r3
 800349c:	4805      	ldr	r0, [pc, #20]	; (80034b4 <HAL_TIM_MspPostInit+0x70>)
 800349e:	f000 ff3b 	bl	8004318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80034a2:	bf00      	nop
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40000c00 	.word	0x40000c00
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40020000 	.word	0x40020000

080034b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <MX_USART1_UART_Init+0x4c>)
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <MX_USART1_UART_Init+0x50>)
 80034c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <MX_USART1_UART_Init+0x4c>)
 80034c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <MX_USART1_UART_Init+0x4c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <MX_USART1_UART_Init+0x4c>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <MX_USART1_UART_Init+0x4c>)
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <MX_USART1_UART_Init+0x4c>)
 80034de:	220c      	movs	r2, #12
 80034e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <MX_USART1_UART_Init+0x4c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <MX_USART1_UART_Init+0x4c>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034ee:	4805      	ldr	r0, [pc, #20]	; (8003504 <MX_USART1_UART_Init+0x4c>)
 80034f0:	f003 fa02 	bl	80068f8 <HAL_UART_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034fa:	f7ff fb5b 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200058c4 	.word	0x200058c4
 8003508:	40011000 	.word	0x40011000

0800350c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <MX_USART2_UART_Init+0x4c>)
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <MX_USART2_UART_Init+0x50>)
 8003514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <MX_USART2_UART_Init+0x4c>)
 8003518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800351c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <MX_USART2_UART_Init+0x4c>)
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <MX_USART2_UART_Init+0x4c>)
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <MX_USART2_UART_Init+0x4c>)
 800352c:	2200      	movs	r2, #0
 800352e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <MX_USART2_UART_Init+0x4c>)
 8003532:	220c      	movs	r2, #12
 8003534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <MX_USART2_UART_Init+0x4c>)
 8003538:	2200      	movs	r2, #0
 800353a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <MX_USART2_UART_Init+0x4c>)
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <MX_USART2_UART_Init+0x4c>)
 8003544:	f003 f9d8 	bl	80068f8 <HAL_UART_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800354e:	f7ff fb31 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20005908 	.word	0x20005908
 800355c:	40004400 	.word	0x40004400

08003560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	; 0x30
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a32      	ldr	r2, [pc, #200]	; (8003648 <HAL_UART_MspInit+0xe8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d12d      	bne.n	80035de <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	4b31      	ldr	r3, [pc, #196]	; (800364c <HAL_UART_MspInit+0xec>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	4a30      	ldr	r2, [pc, #192]	; (800364c <HAL_UART_MspInit+0xec>)
 800358c:	f043 0310 	orr.w	r3, r3, #16
 8003590:	6453      	str	r3, [r2, #68]	; 0x44
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_UART_MspInit+0xec>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_UART_MspInit+0xec>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a29      	ldr	r2, [pc, #164]	; (800364c <HAL_UART_MspInit+0xec>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_UART_MspInit+0xec>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c0:	2302      	movs	r3, #2
 80035c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c8:	2303      	movs	r3, #3
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035cc:	2307      	movs	r3, #7
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d0:	f107 031c 	add.w	r3, r7, #28
 80035d4:	4619      	mov	r1, r3
 80035d6:	481e      	ldr	r0, [pc, #120]	; (8003650 <HAL_UART_MspInit+0xf0>)
 80035d8:	f000 fe9e 	bl	8004318 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035dc:	e030      	b.n	8003640 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_UART_MspInit+0xf4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d12b      	bne.n	8003640 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	4b17      	ldr	r3, [pc, #92]	; (800364c <HAL_UART_MspInit+0xec>)
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	4a16      	ldr	r2, [pc, #88]	; (800364c <HAL_UART_MspInit+0xec>)
 80035f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f6:	6413      	str	r3, [r2, #64]	; 0x40
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <HAL_UART_MspInit+0xec>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	4b10      	ldr	r3, [pc, #64]	; (800364c <HAL_UART_MspInit+0xec>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <HAL_UART_MspInit+0xec>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6313      	str	r3, [r2, #48]	; 0x30
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_UART_MspInit+0xec>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003620:	230c      	movs	r3, #12
 8003622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362c:	2303      	movs	r3, #3
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003630:	2307      	movs	r3, #7
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	4619      	mov	r1, r3
 800363a:	4805      	ldr	r0, [pc, #20]	; (8003650 <HAL_UART_MspInit+0xf0>)
 800363c:	f000 fe6c 	bl	8004318 <HAL_GPIO_Init>
}
 8003640:	bf00      	nop
 8003642:	3730      	adds	r7, #48	; 0x30
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40011000 	.word	0x40011000
 800364c:	40023800 	.word	0x40023800
 8003650:	40020000 	.word	0x40020000
 8003654:	40004400 	.word	0x40004400

08003658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800365c:	480d      	ldr	r0, [pc, #52]	; (8003694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800365e:	490e      	ldr	r1, [pc, #56]	; (8003698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003660:	4a0e      	ldr	r2, [pc, #56]	; (800369c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003664:	e002      	b.n	800366c <LoopCopyDataInit>

08003666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800366a:	3304      	adds	r3, #4

0800366c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800366c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800366e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003670:	d3f9      	bcc.n	8003666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003674:	4c0b      	ldr	r4, [pc, #44]	; (80036a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003678:	e001      	b.n	800367e <LoopFillZerobss>

0800367a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800367a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800367c:	3204      	adds	r2, #4

0800367e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800367e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003680:	d3fb      	bcc.n	800367a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003682:	f7ff fde3 	bl	800324c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003686:	f003 fbf9 	bl	8006e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800368a:	f7ff f979 	bl	8002980 <main>
  bx  lr    
 800368e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003698:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800369c:	08007e10 	.word	0x08007e10
  ldr r2, =_sbss
 80036a0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80036a4:	20005950 	.word	0x20005950

080036a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036a8:	e7fe      	b.n	80036a8 <ADC_IRQHandler>
	...

080036ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HAL_Init+0x40>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <HAL_Init+0x40>)
 80036b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_Init+0x40>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <HAL_Init+0x40>)
 80036c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_Init+0x40>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_Init+0x40>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036d4:	2003      	movs	r0, #3
 80036d6:	f000 fa4b 	bl	8003b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036da:	200f      	movs	r0, #15
 80036dc:	f000 f808 	bl	80036f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e0:	f7ff fd3c 	bl	800315c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023c00 	.word	0x40023c00

080036f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_InitTick+0x54>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_InitTick+0x58>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4619      	mov	r1, r3
 8003702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003706:	fbb3 f3f1 	udiv	r3, r3, r1
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fa63 	bl	8003bda <HAL_SYSTICK_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e00e      	b.n	800373c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b0f      	cmp	r3, #15
 8003722:	d80a      	bhi.n	800373a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003724:	2200      	movs	r2, #0
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	f000 fa2b 	bl	8003b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003730:	4a06      	ldr	r2, [pc, #24]	; (800374c <HAL_InitTick+0x5c>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e000      	b.n	800373c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	200000a0 	.word	0x200000a0
 8003748:	200000a8 	.word	0x200000a8
 800374c:	200000a4 	.word	0x200000a4

08003750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_IncTick+0x20>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_IncTick+0x24>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4413      	add	r3, r2
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_IncTick+0x24>)
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	200000a8 	.word	0x200000a8
 8003774:	2000594c 	.word	0x2000594c

08003778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return uwTick;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_GetTick+0x14>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	2000594c 	.word	0x2000594c

08003790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7ff ffee 	bl	8003778 <HAL_GetTick>
 800379c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d005      	beq.n	80037b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_Delay+0x44>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037b6:	bf00      	nop
 80037b8:	f7ff ffde 	bl	8003778 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d8f7      	bhi.n	80037b8 <HAL_Delay+0x28>
  {
  }
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200000a8 	.word	0x200000a8

080037d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0ed      	b.n	80039c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd fbe0 	bl	8000fbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800380c:	f7ff ffb4 	bl	8003778 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003812:	e012      	b.n	800383a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003814:	f7ff ffb0 	bl	8003778 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b0a      	cmp	r3, #10
 8003820:	d90b      	bls.n	800383a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2205      	movs	r2, #5
 8003832:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0c5      	b.n	80039c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0e5      	beq.n	8003814 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0202 	bic.w	r2, r2, #2
 8003856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003858:	f7ff ff8e 	bl	8003778 <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800385e:	e012      	b.n	8003886 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003860:	f7ff ff8a 	bl	8003778 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b0a      	cmp	r3, #10
 800386c:	d90b      	bls.n	8003886 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2205      	movs	r2, #5
 800387e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e09f      	b.n	80039c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7e1b      	ldrb	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d108      	bne.n	80038ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e007      	b.n	80038be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7e5b      	ldrb	r3, [r3, #25]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d108      	bne.n	80038d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e007      	b.n	80038e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7e9b      	ldrb	r3, [r3, #26]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d108      	bne.n	8003902 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0220 	orr.w	r2, r2, #32
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e007      	b.n	8003912 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0220 	bic.w	r2, r2, #32
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7edb      	ldrb	r3, [r3, #27]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d108      	bne.n	800392c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0210 	bic.w	r2, r2, #16
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e007      	b.n	800393c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0210 	orr.w	r2, r2, #16
 800393a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7f1b      	ldrb	r3, [r3, #28]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d108      	bne.n	8003956 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0208 	orr.w	r2, r2, #8
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e007      	b.n	8003966 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0208 	bic.w	r2, r2, #8
 8003964:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	7f5b      	ldrb	r3, [r3, #29]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d108      	bne.n	8003980 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0204 	orr.w	r2, r2, #4
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e007      	b.n	8003990 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	ea42 0103 	orr.w	r1, r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4907      	ldr	r1, [pc, #28]	; (8003a6c <__NVIC_EnableIRQ+0x38>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db0a      	blt.n	8003a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	490c      	ldr	r1, [pc, #48]	; (8003abc <__NVIC_SetPriority+0x4c>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	440b      	add	r3, r1
 8003a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a98:	e00a      	b.n	8003ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4908      	ldr	r1, [pc, #32]	; (8003ac0 <__NVIC_SetPriority+0x50>)
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	440b      	add	r3, r1
 8003aae:	761a      	strb	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000e100 	.word	0xe000e100
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	bf28      	it	cs
 8003ae2:	2304      	movcs	r3, #4
 8003ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d902      	bls.n	8003af4 <NVIC_EncodePriority+0x30>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b03      	subs	r3, #3
 8003af2:	e000      	b.n	8003af6 <NVIC_EncodePriority+0x32>
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	401a      	ands	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43d9      	mvns	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	4313      	orrs	r3, r2
         );
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b3c:	d301      	bcc.n	8003b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e00f      	b.n	8003b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <SysTick_Config+0x40>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4a:	210f      	movs	r1, #15
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	f7ff ff8e 	bl	8003a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <SysTick_Config+0x40>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <SysTick_Config+0x40>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	e000e010 	.word	0xe000e010

08003b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff29 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b98:	f7ff ff3e 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f7ff ff8e 	bl	8003ac4 <NVIC_EncodePriority>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff5d 	bl	8003a70 <__NVIC_SetPriority>
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff31 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffa2 	bl	8003b2c <SysTick_Config>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff fdba 	bl	8003778 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e099      	b.n	8003d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c30:	e00f      	b.n	8003c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c32:	f7ff fda1 	bl	8003778 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d908      	bls.n	8003c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e078      	b.n	8003d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e8      	bne.n	8003c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4b38      	ldr	r3, [pc, #224]	; (8003d4c <HAL_DMA_Init+0x158>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d107      	bne.n	8003cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0307 	bic.w	r3, r3, #7
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d117      	bne.n	8003d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00e      	beq.n	8003d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fa91 	bl	8004220 <DMA_CheckFifoParam>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2240      	movs	r2, #64	; 0x40
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d12:	2301      	movs	r3, #1
 8003d14:	e016      	b.n	8003d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa48 	bl	80041b4 <DMA_CalcBaseAndBitshift>
 8003d24:	4603      	mov	r3, r0
 8003d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	223f      	movs	r2, #63	; 0x3f
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	f010803f 	.word	0xf010803f

08003d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_DMA_Start_IT+0x26>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e040      	b.n	8003df8 <HAL_DMA_Start_IT+0xa8>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d12f      	bne.n	8003dea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f9da 	bl	8004158 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	223f      	movs	r2, #63	; 0x3f
 8003daa:	409a      	lsls	r2, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0216 	orr.w	r2, r2, #22
 8003dbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0208 	orr.w	r2, r2, #8
 8003dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e005      	b.n	8003df6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
 8003df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d004      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e00c      	b.n	8003e38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2205      	movs	r2, #5
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e50:	4b8e      	ldr	r3, [pc, #568]	; (800408c <HAL_DMA_IRQHandler+0x248>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a8e      	ldr	r2, [pc, #568]	; (8004090 <HAL_DMA_IRQHandler+0x24c>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0a9b      	lsrs	r3, r3, #10
 8003e5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	2208      	movs	r2, #8
 8003e70:	409a      	lsls	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01a      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	f043 0201 	orr.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d012      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f043 0202 	orr.w	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	2204      	movs	r2, #4
 8003eec:	409a      	lsls	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d012      	beq.n	8003f1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	2204      	movs	r2, #4
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	f043 0204 	orr.w	r2, r3, #4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	2210      	movs	r2, #16
 8003f22:	409a      	lsls	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d043      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d03c      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	2210      	movs	r2, #16
 8003f40:	409a      	lsls	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d018      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d108      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d024      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
 8003f72:	e01f      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
 8003f84:	e016      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d107      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0208 	bic.w	r2, r2, #8
 8003fa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	2220      	movs	r2, #32
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 808f 	beq.w	80040e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8087 	beq.w	80040e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	2220      	movs	r2, #32
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d136      	bne.n	800405c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0216 	bic.w	r2, r2, #22
 8003ffc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800400c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d103      	bne.n	800401e <HAL_DMA_IRQHandler+0x1da>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0208 	bic.w	r2, r2, #8
 800402c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	223f      	movs	r2, #63	; 0x3f
 8004034:	409a      	lsls	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404e:	2b00      	cmp	r3, #0
 8004050:	d07e      	beq.n	8004150 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
        }
        return;
 800405a:	e079      	b.n	8004150 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01d      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10d      	bne.n	8004094 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	2b00      	cmp	r3, #0
 800407e:	d031      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e02c      	b.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
 800408a:	bf00      	nop
 800408c:	200000a0 	.word	0x200000a0
 8004090:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d023      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
 80040a4:	e01e      	b.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10f      	bne.n	80040d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0210 	bic.w	r2, r2, #16
 80040c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d032      	beq.n	8004152 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d022      	beq.n	800413e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2205      	movs	r2, #5
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3301      	adds	r3, #1
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	429a      	cmp	r2, r3
 800411a:	d307      	bcc.n	800412c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f2      	bne.n	8004110 <HAL_DMA_IRQHandler+0x2cc>
 800412a:	e000      	b.n	800412e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800412c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	4798      	blx	r3
 800414e:	e000      	b.n	8004152 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004150:	bf00      	nop
    }
  }
}
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004174:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d108      	bne.n	8004198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004196:	e007      	b.n	80041a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3b10      	subs	r3, #16
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <DMA_CalcBaseAndBitshift+0x64>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <DMA_CalcBaseAndBitshift+0x68>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d909      	bls.n	80041f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58
 80041f4:	e007      	b.n	8004206 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	aaaaaaab 	.word	0xaaaaaaab
 800421c:	08007df8 	.word	0x08007df8

08004220 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d11f      	bne.n	800427a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d856      	bhi.n	80042ee <DMA_CheckFifoParam+0xce>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <DMA_CheckFifoParam+0x28>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004259 	.word	0x08004259
 800424c:	0800426b 	.word	0x0800426b
 8004250:	08004259 	.word	0x08004259
 8004254:	080042ef 	.word	0x080042ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d046      	beq.n	80042f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e043      	b.n	80042f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004272:	d140      	bne.n	80042f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004278:	e03d      	b.n	80042f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	d121      	bne.n	80042c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d837      	bhi.n	80042fa <DMA_CheckFifoParam+0xda>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <DMA_CheckFifoParam+0x70>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042a7 	.word	0x080042a7
 8004298:	080042a1 	.word	0x080042a1
 800429c:	080042b9 	.word	0x080042b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      break;
 80042a4:	e030      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d025      	beq.n	80042fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b6:	e022      	b.n	80042fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c0:	d11f      	bne.n	8004302 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042c6:	e01c      	b.n	8004302 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d903      	bls.n	80042d6 <DMA_CheckFifoParam+0xb6>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d003      	beq.n	80042dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042d4:	e018      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
      break;
 80042da:	e015      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      break;
 80042ec:	e00b      	b.n	8004306 <DMA_CheckFifoParam+0xe6>
      break;
 80042ee:	bf00      	nop
 80042f0:	e00a      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e008      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
 80042f8:	e006      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
 80042fc:	e004      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;   
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 8004306:	bf00      	nop
    }
  } 
  
  return status; 
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop

08004318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e16b      	b.n	800460c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004334:	2201      	movs	r2, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	f040 815a 	bne.w	8004606 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d005      	beq.n	800436a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004366:	2b02      	cmp	r3, #2
 8004368:	d130      	bne.n	80043cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a0:	2201      	movs	r2, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 0201 	and.w	r2, r3, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d017      	beq.n	8004408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2203      	movs	r2, #3
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d123      	bne.n	800445c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	220f      	movs	r2, #15
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	08da      	lsrs	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3208      	adds	r2, #8
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80b4 	beq.w	8004606 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b60      	ldr	r3, [pc, #384]	; (8004624 <HAL_GPIO_Init+0x30c>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	4a5f      	ldr	r2, [pc, #380]	; (8004624 <HAL_GPIO_Init+0x30c>)
 80044a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ac:	6453      	str	r3, [r2, #68]	; 0x44
 80044ae:	4b5d      	ldr	r3, [pc, #372]	; (8004624 <HAL_GPIO_Init+0x30c>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ba:	4a5b      	ldr	r2, [pc, #364]	; (8004628 <HAL_GPIO_Init+0x310>)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	3302      	adds	r3, #2
 80044c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a52      	ldr	r2, [pc, #328]	; (800462c <HAL_GPIO_Init+0x314>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d02b      	beq.n	800453e <HAL_GPIO_Init+0x226>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a51      	ldr	r2, [pc, #324]	; (8004630 <HAL_GPIO_Init+0x318>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d025      	beq.n	800453a <HAL_GPIO_Init+0x222>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a50      	ldr	r2, [pc, #320]	; (8004634 <HAL_GPIO_Init+0x31c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01f      	beq.n	8004536 <HAL_GPIO_Init+0x21e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4f      	ldr	r2, [pc, #316]	; (8004638 <HAL_GPIO_Init+0x320>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d019      	beq.n	8004532 <HAL_GPIO_Init+0x21a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4e      	ldr	r2, [pc, #312]	; (800463c <HAL_GPIO_Init+0x324>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_GPIO_Init+0x216>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4d      	ldr	r2, [pc, #308]	; (8004640 <HAL_GPIO_Init+0x328>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00d      	beq.n	800452a <HAL_GPIO_Init+0x212>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a4c      	ldr	r2, [pc, #304]	; (8004644 <HAL_GPIO_Init+0x32c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <HAL_GPIO_Init+0x20e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <HAL_GPIO_Init+0x330>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <HAL_GPIO_Init+0x20a>
 800451e:	2307      	movs	r3, #7
 8004520:	e00e      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004522:	2308      	movs	r3, #8
 8004524:	e00c      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004526:	2306      	movs	r3, #6
 8004528:	e00a      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800452a:	2305      	movs	r3, #5
 800452c:	e008      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800452e:	2304      	movs	r3, #4
 8004530:	e006      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004532:	2303      	movs	r3, #3
 8004534:	e004      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004536:	2302      	movs	r3, #2
 8004538:	e002      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800453e:	2300      	movs	r3, #0
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	f002 0203 	and.w	r2, r2, #3
 8004546:	0092      	lsls	r2, r2, #2
 8004548:	4093      	lsls	r3, r2
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004550:	4935      	ldr	r1, [pc, #212]	; (8004628 <HAL_GPIO_Init+0x310>)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	3302      	adds	r3, #2
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800455e:	4b3b      	ldr	r3, [pc, #236]	; (800464c <HAL_GPIO_Init+0x334>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004582:	4a32      	ldr	r2, [pc, #200]	; (800464c <HAL_GPIO_Init+0x334>)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004588:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_GPIO_Init+0x334>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045ac:	4a27      	ldr	r2, [pc, #156]	; (800464c <HAL_GPIO_Init+0x334>)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045b2:	4b26      	ldr	r3, [pc, #152]	; (800464c <HAL_GPIO_Init+0x334>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045d6:	4a1d      	ldr	r2, [pc, #116]	; (800464c <HAL_GPIO_Init+0x334>)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <HAL_GPIO_Init+0x334>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004600:	4a12      	ldr	r2, [pc, #72]	; (800464c <HAL_GPIO_Init+0x334>)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3301      	adds	r3, #1
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	2b0f      	cmp	r3, #15
 8004610:	f67f ae90 	bls.w	8004334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	40013800 	.word	0x40013800
 800462c:	40020000 	.word	0x40020000
 8004630:	40020400 	.word	0x40020400
 8004634:	40020800 	.word	0x40020800
 8004638:	40020c00 	.word	0x40020c00
 800463c:	40021000 	.word	0x40021000
 8004640:	40021400 	.word	0x40021400
 8004644:	40021800 	.word	0x40021800
 8004648:	40021c00 	.word	0x40021c00
 800464c:	40013c00 	.word	0x40013c00

08004650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	887b      	ldrh	r3, [r7, #2]
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	e001      	b.n	8004672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004672:	7bfb      	ldrb	r3, [r7, #15]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
 800468c:	4613      	mov	r3, r2
 800468e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004690:	787b      	ldrb	r3, [r7, #1]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800469c:	e003      	b.n	80046a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800469e:	887b      	ldrh	r3, [r7, #2]
 80046a0:	041a      	lsls	r2, r3, #16
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	619a      	str	r2, [r3, #24]
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046c4:	887a      	ldrh	r2, [r7, #2]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4013      	ands	r3, r2
 80046ca:	041a      	lsls	r2, r3, #16
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	43d9      	mvns	r1, r3
 80046d0:	887b      	ldrh	r3, [r7, #2]
 80046d2:	400b      	ands	r3, r1
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	619a      	str	r2, [r3, #24]
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d006      	beq.n	800470c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046fe:	4a05      	ldr	r2, [pc, #20]	; (8004714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc fbb4 	bl	8000e74 <HAL_GPIO_EXTI_Callback>
  }
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40013c00 	.word	0x40013c00

08004718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e267      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d075      	beq.n	8004822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004736:	4b88      	ldr	r3, [pc, #544]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b04      	cmp	r3, #4
 8004740:	d00c      	beq.n	800475c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004742:	4b85      	ldr	r3, [pc, #532]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800474a:	2b08      	cmp	r3, #8
 800474c:	d112      	bne.n	8004774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800474e:	4b82      	ldr	r3, [pc, #520]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475a:	d10b      	bne.n	8004774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475c:	4b7e      	ldr	r3, [pc, #504]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05b      	beq.n	8004820 <HAL_RCC_OscConfig+0x108>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d157      	bne.n	8004820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e242      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d106      	bne.n	800478c <HAL_RCC_OscConfig+0x74>
 800477e:	4b76      	ldr	r3, [pc, #472]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a75      	ldr	r2, [pc, #468]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e01d      	b.n	80047c8 <HAL_RCC_OscConfig+0xb0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x98>
 8004796:	4b70      	ldr	r3, [pc, #448]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6f      	ldr	r2, [pc, #444]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800479c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4b6d      	ldr	r3, [pc, #436]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6c      	ldr	r2, [pc, #432]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0xb0>
 80047b0:	4b69      	ldr	r3, [pc, #420]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a68      	ldr	r2, [pc, #416]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4b66      	ldr	r3, [pc, #408]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe ffd2 	bl	8003778 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fe ffce 	bl	8003778 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e207      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0xc0>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fe ffbe 	bl	8003778 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004800:	f7fe ffba 	bl	8003778 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e1f3      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	4b51      	ldr	r3, [pc, #324]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0xe8>
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d063      	beq.n	80048f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800482e:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004842:	2b08      	cmp	r3, #8
 8004844:	d11c      	bne.n	8004880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004846:	4b44      	ldr	r3, [pc, #272]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d116      	bne.n	8004880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	4b41      	ldr	r3, [pc, #260]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_RCC_OscConfig+0x152>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e1c7      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486a:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4937      	ldr	r1, [pc, #220]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487e:	e03a      	b.n	80048f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004888:	4b34      	ldr	r3, [pc, #208]	; (800495c <HAL_RCC_OscConfig+0x244>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fe ff73 	bl	8003778 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004896:	f7fe ff6f 	bl	8003778 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1a8      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b4:	4b28      	ldr	r3, [pc, #160]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4925      	ldr	r1, [pc, #148]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]
 80048c8:	e015      	b.n	80048f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <HAL_RCC_OscConfig+0x244>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fe ff52 	bl	8003778 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d8:	f7fe ff4e 	bl	8003778 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e187      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d036      	beq.n	8004970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d016      	beq.n	8004938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <HAL_RCC_OscConfig+0x248>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fe ff32 	bl	8003778 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004918:	f7fe ff2e 	bl	8003778 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e167      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800492c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x200>
 8004936:	e01b      	b.n	8004970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_OscConfig+0x248>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493e:	f7fe ff1b 	bl	8003778 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004944:	e00e      	b.n	8004964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004946:	f7fe ff17 	bl	8003778 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d907      	bls.n	8004964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e150      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
 8004958:	40023800 	.word	0x40023800
 800495c:	42470000 	.word	0x42470000
 8004960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004964:	4b88      	ldr	r3, [pc, #544]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ea      	bne.n	8004946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8097 	beq.w	8004aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004982:	4b81      	ldr	r3, [pc, #516]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	4b7d      	ldr	r3, [pc, #500]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	4a7c      	ldr	r2, [pc, #496]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499c:	6413      	str	r3, [r2, #64]	; 0x40
 800499e:	4b7a      	ldr	r3, [pc, #488]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049aa:	2301      	movs	r3, #1
 80049ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ae:	4b77      	ldr	r3, [pc, #476]	; (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d118      	bne.n	80049ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ba:	4b74      	ldr	r3, [pc, #464]	; (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a73      	ldr	r2, [pc, #460]	; (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c6:	f7fe fed7 	bl	8003778 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ce:	f7fe fed3 	bl	8003778 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e10c      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d106      	bne.n	8004a02 <HAL_RCC_OscConfig+0x2ea>
 80049f4:	4b64      	ldr	r3, [pc, #400]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	4a63      	ldr	r2, [pc, #396]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004a00:	e01c      	b.n	8004a3c <HAL_RCC_OscConfig+0x324>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x30c>
 8004a0a:	4b5f      	ldr	r3, [pc, #380]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	4a5e      	ldr	r2, [pc, #376]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a10:	f043 0304 	orr.w	r3, r3, #4
 8004a14:	6713      	str	r3, [r2, #112]	; 0x70
 8004a16:	4b5c      	ldr	r3, [pc, #368]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	4a5b      	ldr	r2, [pc, #364]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	6713      	str	r3, [r2, #112]	; 0x70
 8004a22:	e00b      	b.n	8004a3c <HAL_RCC_OscConfig+0x324>
 8004a24:	4b58      	ldr	r3, [pc, #352]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	4a57      	ldr	r2, [pc, #348]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a30:	4b55      	ldr	r3, [pc, #340]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	4a54      	ldr	r2, [pc, #336]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a36:	f023 0304 	bic.w	r3, r3, #4
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d015      	beq.n	8004a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fe fe98 	bl	8003778 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fe fe94 	bl	8003778 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e0cb      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a62:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0ee      	beq.n	8004a4c <HAL_RCC_OscConfig+0x334>
 8004a6e:	e014      	b.n	8004a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a70:	f7fe fe82 	bl	8003778 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a76:	e00a      	b.n	8004a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a78:	f7fe fe7e 	bl	8003778 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e0b5      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8e:	4b3e      	ldr	r3, [pc, #248]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ee      	bne.n	8004a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa0:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80a1 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ab6:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d05c      	beq.n	8004b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d141      	bne.n	8004b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <HAL_RCC_OscConfig+0x478>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fe fe52 	bl	8003778 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fe fe4e 	bl	8003778 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e087      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	019b      	lsls	r3, r3, #6
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	061b      	lsls	r3, r3, #24
 8004b1a:	491b      	ldr	r1, [pc, #108]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x478>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7fe fe27 	bl	8003778 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fe fe23 	bl	8003778 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e05c      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b40:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x416>
 8004b4c:	e054      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <HAL_RCC_OscConfig+0x478>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fe fe10 	bl	8003778 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fe fe0c 	bl	8003778 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e045      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x444>
 8004b7a:	e03d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e038      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40007000 	.word	0x40007000
 8004b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x4ec>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d028      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d121      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d11a      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d111      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800

08004c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0cc      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b68      	ldr	r3, [pc, #416]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d90c      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b65      	ldr	r3, [pc, #404]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0b8      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c5c:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a58      	ldr	r2, [pc, #352]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c74:	4b53      	ldr	r3, [pc, #332]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4a52      	ldr	r2, [pc, #328]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c80:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	494d      	ldr	r1, [pc, #308]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d044      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d119      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e07f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e067      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce6:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f023 0203 	bic.w	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4934      	ldr	r1, [pc, #208]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf8:	f7fe fd3e 	bl	8003778 <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d00:	f7fe fd3a 	bl	8003778 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e04f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d16:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 020c 	and.w	r2, r3, #12
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d1eb      	bne.n	8004d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d20c      	bcs.n	8004d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e032      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4916      	ldr	r1, [pc, #88]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	490e      	ldr	r1, [pc, #56]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d8e:	f000 f821 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	490a      	ldr	r1, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	5ccb      	ldrb	r3, [r1, r3]
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fc9e 	bl	80036f0 <HAL_InitTick>

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023c00 	.word	0x40023c00
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	08007de0 	.word	0x08007de0
 8004dcc:	200000a0 	.word	0x200000a0
 8004dd0:	200000a4 	.word	0x200000a4

08004dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd8:	b094      	sub	sp, #80	; 0x50
 8004dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	647b      	str	r3, [r7, #68]	; 0x44
 8004de0:	2300      	movs	r3, #0
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de4:	2300      	movs	r3, #0
 8004de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dec:	4b79      	ldr	r3, [pc, #484]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 030c 	and.w	r3, r3, #12
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d00d      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x40>
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	f200 80e1 	bhi.w	8004fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x34>
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d003      	beq.n	8004e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e06:	e0db      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b73      	ldr	r3, [pc, #460]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e0c:	e0db      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e0e:	4b73      	ldr	r3, [pc, #460]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8004e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e12:	e0d8      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e14:	4b6f      	ldr	r3, [pc, #444]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1e:	4b6d      	ldr	r3, [pc, #436]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d063      	beq.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2a:	4b6a      	ldr	r3, [pc, #424]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	2200      	movs	r2, #0
 8004e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e3e:	2300      	movs	r3, #0
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
 8004e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e46:	4622      	mov	r2, r4
 8004e48:	462b      	mov	r3, r5
 8004e4a:	f04f 0000 	mov.w	r0, #0
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	0159      	lsls	r1, r3, #5
 8004e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e58:	0150      	lsls	r0, r2, #5
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4621      	mov	r1, r4
 8004e60:	1a51      	subs	r1, r2, r1
 8004e62:	6139      	str	r1, [r7, #16]
 8004e64:	4629      	mov	r1, r5
 8004e66:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e78:	4659      	mov	r1, fp
 8004e7a:	018b      	lsls	r3, r1, #6
 8004e7c:	4651      	mov	r1, sl
 8004e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e82:	4651      	mov	r1, sl
 8004e84:	018a      	lsls	r2, r1, #6
 8004e86:	4651      	mov	r1, sl
 8004e88:	ebb2 0801 	subs.w	r8, r2, r1
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea6:	4690      	mov	r8, r2
 8004ea8:	4699      	mov	r9, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	eb18 0303 	adds.w	r3, r8, r3
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	eb49 0303 	adc.w	r3, r9, r3
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	024b      	lsls	r3, r1, #9
 8004eca:	4621      	mov	r1, r4
 8004ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	024a      	lsls	r2, r1, #9
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eda:	2200      	movs	r2, #0
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee4:	f7fb f9c0 	bl	8000268 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4613      	mov	r3, r2
 8004eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef0:	e058      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef2:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	099b      	lsrs	r3, r3, #6
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	4611      	mov	r1, r2
 8004efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f02:	623b      	str	r3, [r7, #32]
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
 8004f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	f04f 0000 	mov.w	r0, #0
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	0159      	lsls	r1, r3, #5
 8004f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f1e:	0150      	lsls	r0, r2, #5
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4641      	mov	r1, r8
 8004f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f44:	ebb2 040a 	subs.w	r4, r2, sl
 8004f48:	eb63 050b 	sbc.w	r5, r3, fp
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	00eb      	lsls	r3, r5, #3
 8004f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5a:	00e2      	lsls	r2, r4, #3
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	461d      	mov	r5, r3
 8004f60:	4643      	mov	r3, r8
 8004f62:	18e3      	adds	r3, r4, r3
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	464b      	mov	r3, r9
 8004f68:	eb45 0303 	adc.w	r3, r5, r3
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	028b      	lsls	r3, r1, #10
 8004f7e:	4621      	mov	r1, r4
 8004f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f84:	4621      	mov	r1, r4
 8004f86:	028a      	lsls	r2, r1, #10
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	61fa      	str	r2, [r7, #28]
 8004f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f98:	f7fb f966 	bl	8000268 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3750      	adds	r7, #80	; 0x50
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	007a1200 	.word	0x007a1200

08004fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe4:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	200000a0 	.word	0x200000a0

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ffc:	f7ff fff0 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0a9b      	lsrs	r3, r3, #10
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4903      	ldr	r1, [pc, #12]	; (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	08007df0 	.word	0x08007df0

08005020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005024:	f7ff ffdc 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0b5b      	lsrs	r3, r3, #13
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4903      	ldr	r1, [pc, #12]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	08007df0 	.word	0x08007df0

08005048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07b      	b.n	8005152 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d108      	bne.n	8005074 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506a:	d009      	beq.n	8005080 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	61da      	str	r2, [r3, #28]
 8005072:	e005      	b.n	8005080 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd ffd2 	bl	8003044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005104:	ea42 0103 	orr.w	r1, r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f003 0104 	and.w	r1, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f003 0210 	and.w	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005140:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b088      	sub	sp, #32
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_SPI_Transmit+0x22>
 8005178:	2302      	movs	r3, #2
 800517a:	e126      	b.n	80053ca <HAL_SPI_Transmit+0x270>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005184:	f7fe faf8 	bl	8003778 <HAL_GetTick>
 8005188:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d002      	beq.n	80051a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800519a:	2302      	movs	r3, #2
 800519c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800519e:	e10b      	b.n	80053b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_SPI_Transmit+0x52>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051b0:	e102      	b.n	80053b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2203      	movs	r2, #3
 80051b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	d10f      	bne.n	800521a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005208:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005218:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d007      	beq.n	8005238 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005240:	d14b      	bne.n	80052da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_SPI_Transmit+0xf6>
 800524a:	8afb      	ldrh	r3, [r7, #22]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d13e      	bne.n	80052ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	881a      	ldrh	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	1c9a      	adds	r2, r3, #2
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005274:	e02b      	b.n	80052ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b02      	cmp	r3, #2
 8005282:	d112      	bne.n	80052aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	881a      	ldrh	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	1c9a      	adds	r2, r3, #2
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80052a8:	e011      	b.n	80052ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052aa:	f7fe fa65 	bl	8003778 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d803      	bhi.n	80052c2 <HAL_SPI_Transmit+0x168>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c0:	d102      	bne.n	80052c8 <HAL_SPI_Transmit+0x16e>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052cc:	e074      	b.n	80053b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1ce      	bne.n	8005276 <HAL_SPI_Transmit+0x11c>
 80052d8:	e04c      	b.n	8005374 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_SPI_Transmit+0x18e>
 80052e2:	8afb      	ldrh	r3, [r7, #22]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d140      	bne.n	800536a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800530e:	e02c      	b.n	800536a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d113      	bne.n	8005346 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	330c      	adds	r3, #12
 8005328:	7812      	ldrb	r2, [r2, #0]
 800532a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	86da      	strh	r2, [r3, #54]	; 0x36
 8005344:	e011      	b.n	800536a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005346:	f7fe fa17 	bl	8003778 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d803      	bhi.n	800535e <HAL_SPI_Transmit+0x204>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d102      	bne.n	8005364 <HAL_SPI_Transmit+0x20a>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005368:	e026      	b.n	80053b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1cd      	bne.n	8005310 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 fb2b 	bl	80059d4 <SPI_EndRxTxTransaction>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10a      	bne.n	80053a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e000      	b.n	80053b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80053b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	4613      	mov	r3, r2
 80053e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_SPI_Transmit_DMA+0x20>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e09b      	b.n	800552c <HAL_SPI_Transmit_DMA+0x158>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d002      	beq.n	800540e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005408:	2302      	movs	r3, #2
 800540a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800540c:	e089      	b.n	8005522 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_SPI_Transmit_DMA+0x46>
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800541e:	e080      	b.n	8005522 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2203      	movs	r2, #3
 8005424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	88fa      	ldrh	r2, [r7, #6]
 800543e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005466:	d10f      	bne.n	8005488 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005476:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005486:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548c:	4a29      	ldr	r2, [pc, #164]	; (8005534 <HAL_SPI_Transmit_DMA+0x160>)
 800548e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005494:	4a28      	ldr	r2, [pc, #160]	; (8005538 <HAL_SPI_Transmit_DMA+0x164>)
 8005496:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549c:	4a27      	ldr	r2, [pc, #156]	; (800553c <HAL_SPI_Transmit_DMA+0x168>)
 800549e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a4:	2200      	movs	r2, #0
 80054a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	4619      	mov	r1, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80054c0:	f7fe fc46 	bl	8003d50 <HAL_DMA_Start_IT>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00c      	beq.n	80054e4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f043 0210 	orr.w	r2, r3, #16
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80054e2:	e01e      	b.n	8005522 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d007      	beq.n	8005502 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005500:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0220 	orr.w	r2, r2, #32
 8005510:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0202 	orr.w	r2, r2, #2
 8005520:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800552a:	7dfb      	ldrb	r3, [r7, #23]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	08005841 	.word	0x08005841
 8005538:	08005799 	.word	0x08005799
 800553c:	0800585d 	.word	0x0800585d

08005540 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	099b      	lsrs	r3, r3, #6
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10f      	bne.n	8005584 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	099b      	lsrs	r3, r3, #6
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	4798      	blx	r3
    return;
 8005582:	e0d7      	b.n	8005734 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_SPI_IRQHandler+0x66>
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	09db      	lsrs	r3, r3, #7
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	4798      	blx	r3
    return;
 80055a4:	e0c6      	b.n	8005734 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10c      	bne.n	80055cc <HAL_SPI_IRQHandler+0x8c>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	099b      	lsrs	r3, r3, #6
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80b4 	beq.w	8005734 <HAL_SPI_IRQHandler+0x1f4>
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80ad 	beq.w	8005734 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d023      	beq.n	800562e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d011      	beq.n	8005616 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f6:	f043 0204 	orr.w	r2, r3, #4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	e00b      	b.n	800562e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	693b      	ldr	r3, [r7, #16]
        return;
 800562c:	e082      	b.n	8005734 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d014      	beq.n	8005664 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	f043 0201 	orr.w	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00c      	beq.n	800568a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005674:	f043 0208 	orr.w	r2, r3, #8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800567c:	2300      	movs	r3, #0
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	60bb      	str	r3, [r7, #8]
 8005688:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	2b00      	cmp	r3, #0
 8005690:	d04f      	beq.n	8005732 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_SPI_IRQHandler+0x17e>
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d034      	beq.n	8005728 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0203 	bic.w	r2, r2, #3
 80056cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d011      	beq.n	80056fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056da:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_SPI_IRQHandler+0x1fc>)
 80056dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe fb8c 	bl	8003e00 <HAL_DMA_Abort_IT>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005706:	4a0d      	ldr	r2, [pc, #52]	; (800573c <HAL_SPI_IRQHandler+0x1fc>)
 8005708:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fb76 	bl	8003e00 <HAL_DMA_Abort_IT>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005726:	e003      	b.n	8005730 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f81d 	bl	8005768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800572e:	e000      	b.n	8005732 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005730:	bf00      	nop
    return;
 8005732:	bf00      	nop
  }
}
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	0800589d 	.word	0x0800589d

08005740 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800578a:	b2db      	uxtb	r3, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057a6:	f7fd ffe7 	bl	8003778 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ba:	d03b      	beq.n	8005834 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0220 	bic.w	r2, r2, #32
 80057ca:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0202 	bic.w	r2, r2, #2
 80057da:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	2164      	movs	r1, #100	; 0x64
 80057e0:	6978      	ldr	r0, [r7, #20]
 80057e2:	f000 f8f7 	bl	80059d4 <SPI_EndRxTxTransaction>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800582c:	6978      	ldr	r0, [r7, #20]
 800582e:	f7ff ff9b 	bl	8005768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005832:	e002      	b.n	800583a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005834:	6978      	ldr	r0, [r7, #20]
 8005836:	f7ff ff83 	bl	8005740 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff ff80 	bl	8005754 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0203 	bic.w	r2, r2, #3
 8005878:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	f043 0210 	orr.w	r2, r3, #16
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff ff6a 	bl	8005768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff ff56 	bl	8005768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058d4:	f7fd ff50 	bl	8003778 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	4413      	add	r3, r2
 80058e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058e4:	f7fd ff48 	bl	8003778 <HAL_GetTick>
 80058e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058ea:	4b39      	ldr	r3, [pc, #228]	; (80059d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	015b      	lsls	r3, r3, #5
 80058f0:	0d1b      	lsrs	r3, r3, #20
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	fb02 f303 	mul.w	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fa:	e054      	b.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d050      	beq.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005904:	f7fd ff38 	bl	8003778 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	429a      	cmp	r2, r3
 8005912:	d902      	bls.n	800591a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d13d      	bne.n	8005996 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005932:	d111      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593c:	d004      	beq.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005946:	d107      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005960:	d10f      	bne.n	8005982 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e017      	b.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4013      	ands	r3, r2
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d19b      	bne.n	80058fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	200000a0 	.word	0x200000a0

080059d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <SPI_EndRxTxTransaction+0x7c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <SPI_EndRxTxTransaction+0x80>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	0d5b      	lsrs	r3, r3, #21
 80059ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fe:	d112      	bne.n	8005a26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	2180      	movs	r1, #128	; 0x80
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff ff5a 	bl	80058c4 <SPI_WaitFlagStateUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d016      	beq.n	8005a44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e00f      	b.n	8005a46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d0f2      	beq.n	8005a26 <SPI_EndRxTxTransaction+0x52>
 8005a40:	e000      	b.n	8005a44 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a42:	bf00      	nop
  }

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	200000a0 	.word	0x200000a0
 8005a54:	165e9f81 	.word	0x165e9f81

08005a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e041      	b.n	8005aee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fd fca2 	bl	80033c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f000 fbb4 	bl	8006204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d001      	beq.n	8005b10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e046      	b.n	8005b9e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a23      	ldr	r2, [pc, #140]	; (8005bac <HAL_TIM_Base_Start+0xb4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d022      	beq.n	8005b68 <HAL_TIM_Base_Start+0x70>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2a:	d01d      	beq.n	8005b68 <HAL_TIM_Base_Start+0x70>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <HAL_TIM_Base_Start+0xb8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d018      	beq.n	8005b68 <HAL_TIM_Base_Start+0x70>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_TIM_Base_Start+0xbc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <HAL_TIM_Base_Start+0x70>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1c      	ldr	r2, [pc, #112]	; (8005bb8 <HAL_TIM_Base_Start+0xc0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00e      	beq.n	8005b68 <HAL_TIM_Base_Start+0x70>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <HAL_TIM_Base_Start+0xc4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_TIM_Base_Start+0x70>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <HAL_TIM_Base_Start+0xc8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_TIM_Base_Start+0x70>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <HAL_TIM_Base_Start+0xcc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d111      	bne.n	8005b8c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b06      	cmp	r3, #6
 8005b78:	d010      	beq.n	8005b9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0201 	orr.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8a:	e007      	b.n	8005b9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40010400 	.word	0x40010400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40001800 	.word	0x40001800

08005bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e041      	b.n	8005c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f839 	bl	8005c66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4610      	mov	r0, r2
 8005c08:	f000 fafc 	bl	8006204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d122      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d11b      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0202 	mvn.w	r2, #2
 8005ca6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fa82 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005cc2:	e005      	b.n	8005cd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fa74 	bl	80061b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa85 	bl	80061da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d122      	bne.n	8005d2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d11b      	bne.n	8005d2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f06f 0204 	mvn.w	r2, #4
 8005cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa58 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005d16:	e005      	b.n	8005d24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fa4a 	bl	80061b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fa5b 	bl	80061da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d122      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d11b      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f06f 0208 	mvn.w	r2, #8
 8005d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2204      	movs	r2, #4
 8005d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fa2e 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005d6a:	e005      	b.n	8005d78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fa20 	bl	80061b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa31 	bl	80061da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d122      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b10      	cmp	r3, #16
 8005d98:	d11b      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0210 	mvn.w	r2, #16
 8005da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2208      	movs	r2, #8
 8005da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa04 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005dbe:	e005      	b.n	8005dcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9f6 	bl	80061b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa07 	bl	80061da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10e      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d107      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f06f 0201 	mvn.w	r2, #1
 8005df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f9d0 	bl	800619e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e08:	2b80      	cmp	r3, #128	; 0x80
 8005e0a:	d10e      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b80      	cmp	r3, #128	; 0x80
 8005e18:	d107      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fd5d 	bl	80068e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d10e      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d107      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f9cc 	bl	80061ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d10e      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d107      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f06f 0220 	mvn.w	r2, #32
 8005e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fd27 	bl	80068d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e0ae      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	f200 809f 	bhi.w	8005ff8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eba:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005ef5 	.word	0x08005ef5
 8005ec4:	08005ff9 	.word	0x08005ff9
 8005ec8:	08005ff9 	.word	0x08005ff9
 8005ecc:	08005ff9 	.word	0x08005ff9
 8005ed0:	08005f35 	.word	0x08005f35
 8005ed4:	08005ff9 	.word	0x08005ff9
 8005ed8:	08005ff9 	.word	0x08005ff9
 8005edc:	08005ff9 	.word	0x08005ff9
 8005ee0:	08005f77 	.word	0x08005f77
 8005ee4:	08005ff9 	.word	0x08005ff9
 8005ee8:	08005ff9 	.word	0x08005ff9
 8005eec:	08005ff9 	.word	0x08005ff9
 8005ef0:	08005fb7 	.word	0x08005fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fa22 	bl	8006344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0208 	orr.w	r2, r2, #8
 8005f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0204 	bic.w	r2, r2, #4
 8005f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6999      	ldr	r1, [r3, #24]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	619a      	str	r2, [r3, #24]
      break;
 8005f32:	e064      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fa72 	bl	8006424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6999      	ldr	r1, [r3, #24]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	021a      	lsls	r2, r3, #8
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	619a      	str	r2, [r3, #24]
      break;
 8005f74:	e043      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fac7 	bl	8006510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0208 	orr.w	r2, r2, #8
 8005f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0204 	bic.w	r2, r2, #4
 8005fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69d9      	ldr	r1, [r3, #28]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	61da      	str	r2, [r3, #28]
      break;
 8005fb4:	e023      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fb1b 	bl	80065f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69d9      	ldr	r1, [r3, #28]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	021a      	lsls	r2, r3, #8
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	61da      	str	r2, [r3, #28]
      break;
 8005ff6:	e002      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8005ffc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <HAL_TIM_ConfigClockSource+0x1c>
 8006028:	2302      	movs	r3, #2
 800602a:	e0b4      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x186>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800604a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006064:	d03e      	beq.n	80060e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800606a:	f200 8087 	bhi.w	800617c <HAL_TIM_ConfigClockSource+0x16c>
 800606e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006072:	f000 8086 	beq.w	8006182 <HAL_TIM_ConfigClockSource+0x172>
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607a:	d87f      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b70      	cmp	r3, #112	; 0x70
 800607e:	d01a      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006080:	2b70      	cmp	r3, #112	; 0x70
 8006082:	d87b      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b60      	cmp	r3, #96	; 0x60
 8006086:	d050      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x11a>
 8006088:	2b60      	cmp	r3, #96	; 0x60
 800608a:	d877      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b50      	cmp	r3, #80	; 0x50
 800608e:	d03c      	beq.n	800610a <HAL_TIM_ConfigClockSource+0xfa>
 8006090:	2b50      	cmp	r3, #80	; 0x50
 8006092:	d873      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	d058      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x13a>
 8006098:	2b40      	cmp	r3, #64	; 0x40
 800609a:	d86f      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b30      	cmp	r3, #48	; 0x30
 800609e:	d064      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	2b30      	cmp	r3, #48	; 0x30
 80060a2:	d86b      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d060      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x15a>
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d867      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d05c      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x15a>
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d05a      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x15a>
 80060b4:	e062      	b.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6899      	ldr	r1, [r3, #8]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f000 fb67 	bl	8006798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	609a      	str	r2, [r3, #8]
      break;
 80060e2:	e04f      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6818      	ldr	r0, [r3, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	6899      	ldr	r1, [r3, #8]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f000 fb50 	bl	8006798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006106:	609a      	str	r2, [r3, #8]
      break;
 8006108:	e03c      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6859      	ldr	r1, [r3, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	461a      	mov	r2, r3
 8006118:	f000 fac4 	bl	80066a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2150      	movs	r1, #80	; 0x50
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fb1d 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8006128:	e02c      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	461a      	mov	r2, r3
 8006138:	f000 fae3 	bl	8006702 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2160      	movs	r1, #96	; 0x60
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fb0d 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8006148:	e01c      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6859      	ldr	r1, [r3, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	461a      	mov	r2, r3
 8006158:	f000 faa4 	bl	80066a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2140      	movs	r1, #64	; 0x40
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fafd 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8006168:	e00c      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f000 faf4 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 800617a:	e003      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	73fb      	strb	r3, [r7, #15]
      break;
 8006180:	e000      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
	...

08006204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a40      	ldr	r2, [pc, #256]	; (8006318 <TIM_Base_SetConfig+0x114>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d00f      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a3d      	ldr	r2, [pc, #244]	; (800631c <TIM_Base_SetConfig+0x118>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00b      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a3c      	ldr	r2, [pc, #240]	; (8006320 <TIM_Base_SetConfig+0x11c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d007      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a3b      	ldr	r2, [pc, #236]	; (8006324 <TIM_Base_SetConfig+0x120>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3a      	ldr	r2, [pc, #232]	; (8006328 <TIM_Base_SetConfig+0x124>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d108      	bne.n	8006256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2f      	ldr	r2, [pc, #188]	; (8006318 <TIM_Base_SetConfig+0x114>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d02b      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d027      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2c      	ldr	r2, [pc, #176]	; (800631c <TIM_Base_SetConfig+0x118>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d023      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2b      	ldr	r2, [pc, #172]	; (8006320 <TIM_Base_SetConfig+0x11c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01f      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2a      	ldr	r2, [pc, #168]	; (8006324 <TIM_Base_SetConfig+0x120>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01b      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a29      	ldr	r2, [pc, #164]	; (8006328 <TIM_Base_SetConfig+0x124>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d017      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a28      	ldr	r2, [pc, #160]	; (800632c <TIM_Base_SetConfig+0x128>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a27      	ldr	r2, [pc, #156]	; (8006330 <TIM_Base_SetConfig+0x12c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00f      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a26      	ldr	r2, [pc, #152]	; (8006334 <TIM_Base_SetConfig+0x130>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00b      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a25      	ldr	r2, [pc, #148]	; (8006338 <TIM_Base_SetConfig+0x134>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a24      	ldr	r2, [pc, #144]	; (800633c <TIM_Base_SetConfig+0x138>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d003      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a23      	ldr	r2, [pc, #140]	; (8006340 <TIM_Base_SetConfig+0x13c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a0a      	ldr	r2, [pc, #40]	; (8006318 <TIM_Base_SetConfig+0x114>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_Base_SetConfig+0xf8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <TIM_Base_SetConfig+0x124>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d103      	bne.n	8006304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	615a      	str	r2, [r3, #20]
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40010400 	.word	0x40010400
 800632c:	40014000 	.word	0x40014000
 8006330:	40014400 	.word	0x40014400
 8006334:	40014800 	.word	0x40014800
 8006338:	40001800 	.word	0x40001800
 800633c:	40001c00 	.word	0x40001c00
 8006340:	40002000 	.word	0x40002000

08006344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0302 	bic.w	r3, r3, #2
 800638c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a20      	ldr	r2, [pc, #128]	; (800641c <TIM_OC1_SetConfig+0xd8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_OC1_SetConfig+0x64>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a1f      	ldr	r2, [pc, #124]	; (8006420 <TIM_OC1_SetConfig+0xdc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10c      	bne.n	80063c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 0308 	bic.w	r3, r3, #8
 80063ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 0304 	bic.w	r3, r3, #4
 80063c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a15      	ldr	r2, [pc, #84]	; (800641c <TIM_OC1_SetConfig+0xd8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_OC1_SetConfig+0x8e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a14      	ldr	r2, [pc, #80]	; (8006420 <TIM_OC1_SetConfig+0xdc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d111      	bne.n	80063f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	621a      	str	r2, [r3, #32]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40010000 	.word	0x40010000
 8006420:	40010400 	.word	0x40010400

08006424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f023 0210 	bic.w	r2, r3, #16
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0320 	bic.w	r3, r3, #32
 800646e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a22      	ldr	r2, [pc, #136]	; (8006508 <TIM_OC2_SetConfig+0xe4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC2_SetConfig+0x68>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a21      	ldr	r2, [pc, #132]	; (800650c <TIM_OC2_SetConfig+0xe8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d10d      	bne.n	80064a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a17      	ldr	r2, [pc, #92]	; (8006508 <TIM_OC2_SetConfig+0xe4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC2_SetConfig+0x94>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a16      	ldr	r2, [pc, #88]	; (800650c <TIM_OC2_SetConfig+0xe8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d113      	bne.n	80064e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40010400 	.word	0x40010400

08006510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <TIM_OC3_SetConfig+0xe0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_OC3_SetConfig+0x66>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <TIM_OC3_SetConfig+0xe4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d10d      	bne.n	8006592 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800657c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <TIM_OC3_SetConfig+0xe0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_OC3_SetConfig+0x92>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a15      	ldr	r2, [pc, #84]	; (80065f4 <TIM_OC3_SetConfig+0xe4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d113      	bne.n	80065ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	621a      	str	r2, [r3, #32]
}
 80065e4:	bf00      	nop
 80065e6:	371c      	adds	r7, #28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	40010000 	.word	0x40010000
 80065f4:	40010400 	.word	0x40010400

080065f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	031b      	lsls	r3, r3, #12
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a12      	ldr	r2, [pc, #72]	; (800669c <TIM_OC4_SetConfig+0xa4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_OC4_SetConfig+0x68>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a11      	ldr	r2, [pc, #68]	; (80066a0 <TIM_OC4_SetConfig+0xa8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d109      	bne.n	8006674 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	019b      	lsls	r3, r3, #6
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	621a      	str	r2, [r3, #32]
}
 800668e:	bf00      	nop
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40010000 	.word	0x40010000
 80066a0:	40010400 	.word	0x40010400

080066a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f023 030a 	bic.w	r3, r3, #10
 80066e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006702:	b480      	push	{r7}
 8006704:	b087      	sub	sp, #28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f023 0210 	bic.w	r2, r3, #16
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800672c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	031b      	lsls	r3, r3, #12
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800673e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	621a      	str	r2, [r3, #32]
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	f043 0307 	orr.w	r3, r3, #7
 8006784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	021a      	lsls	r2, r3, #8
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4313      	orrs	r3, r2
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	609a      	str	r2, [r3, #8]
}
 80067cc:	bf00      	nop
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e05a      	b.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a21      	ldr	r2, [pc, #132]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683c:	d01d      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1b      	ldr	r2, [pc, #108]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10c      	bne.n	8006894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4313      	orrs	r3, r2
 800688a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40010400 	.word	0x40010400
 80068c8:	40014000 	.word	0x40014000
 80068cc:	40001800 	.word	0x40001800

080068d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e03f      	b.n	800698a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fc fe1e 	bl	8003560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2224      	movs	r2, #36	; 0x24
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800693a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f829 	bl	8006994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695a      	ldr	r2, [r3, #20]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006998:	b0c0      	sub	sp, #256	; 0x100
 800699a:	af00      	add	r7, sp, #0
 800699c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b0:	68d9      	ldr	r1, [r3, #12]
 80069b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	ea40 0301 	orr.w	r3, r0, r1
 80069bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069ec:	f021 010c 	bic.w	r1, r1, #12
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069fa:	430b      	orrs	r3, r1
 80069fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0e:	6999      	ldr	r1, [r3, #24]
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	ea40 0301 	orr.w	r3, r0, r1
 8006a1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b8f      	ldr	r3, [pc, #572]	; (8006c60 <UART_SetConfig+0x2cc>)
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d005      	beq.n	8006a34 <UART_SetConfig+0xa0>
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4b8d      	ldr	r3, [pc, #564]	; (8006c64 <UART_SetConfig+0x2d0>)
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d104      	bne.n	8006a3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a34:	f7fe faf4 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 8006a38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a3c:	e003      	b.n	8006a46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a3e:	f7fe fadb 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8006a42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a50:	f040 810c 	bne.w	8006c6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a66:	4622      	mov	r2, r4
 8006a68:	462b      	mov	r3, r5
 8006a6a:	1891      	adds	r1, r2, r2
 8006a6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a6e:	415b      	adcs	r3, r3
 8006a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a76:	4621      	mov	r1, r4
 8006a78:	eb12 0801 	adds.w	r8, r2, r1
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	eb43 0901 	adc.w	r9, r3, r1
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	f04f 0300 	mov.w	r3, #0
 8006a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a96:	4690      	mov	r8, r2
 8006a98:	4699      	mov	r9, r3
 8006a9a:	4623      	mov	r3, r4
 8006a9c:	eb18 0303 	adds.w	r3, r8, r3
 8006aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	eb49 0303 	adc.w	r3, r9, r3
 8006aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006aba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006abe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	18db      	adds	r3, r3, r3
 8006ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ac8:	4613      	mov	r3, r2
 8006aca:	eb42 0303 	adc.w	r3, r2, r3
 8006ace:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ad4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ad8:	f7f9 fbc6 	bl	8000268 <__aeabi_uldivmod>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4b61      	ldr	r3, [pc, #388]	; (8006c68 <UART_SetConfig+0x2d4>)
 8006ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	011c      	lsls	r4, r3, #4
 8006aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006af4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006af8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006afc:	4642      	mov	r2, r8
 8006afe:	464b      	mov	r3, r9
 8006b00:	1891      	adds	r1, r2, r2
 8006b02:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b04:	415b      	adcs	r3, r3
 8006b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b0c:	4641      	mov	r1, r8
 8006b0e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b12:	4649      	mov	r1, r9
 8006b14:	eb43 0b01 	adc.w	fp, r3, r1
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b2c:	4692      	mov	sl, r2
 8006b2e:	469b      	mov	fp, r3
 8006b30:	4643      	mov	r3, r8
 8006b32:	eb1a 0303 	adds.w	r3, sl, r3
 8006b36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	18db      	adds	r3, r3, r3
 8006b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b5e:	4613      	mov	r3, r2
 8006b60:	eb42 0303 	adc.w	r3, r2, r3
 8006b64:	647b      	str	r3, [r7, #68]	; 0x44
 8006b66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b6e:	f7f9 fb7b 	bl	8000268 <__aeabi_uldivmod>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	4b3b      	ldr	r3, [pc, #236]	; (8006c68 <UART_SetConfig+0x2d4>)
 8006b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	2264      	movs	r2, #100	; 0x64
 8006b82:	fb02 f303 	mul.w	r3, r2, r3
 8006b86:	1acb      	subs	r3, r1, r3
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b8e:	4b36      	ldr	r3, [pc, #216]	; (8006c68 <UART_SetConfig+0x2d4>)
 8006b90:	fba3 2302 	umull	r2, r3, r3, r2
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b9c:	441c      	add	r4, r3
 8006b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ba8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	1891      	adds	r1, r2, r2
 8006bb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bb8:	415b      	adcs	r3, r3
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	1851      	adds	r1, r2, r1
 8006bc4:	6339      	str	r1, [r7, #48]	; 0x30
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	414b      	adcs	r3, r1
 8006bca:	637b      	str	r3, [r7, #52]	; 0x34
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bd8:	4659      	mov	r1, fp
 8006bda:	00cb      	lsls	r3, r1, #3
 8006bdc:	4651      	mov	r1, sl
 8006bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006be2:	4651      	mov	r1, sl
 8006be4:	00ca      	lsls	r2, r1, #3
 8006be6:	4610      	mov	r0, r2
 8006be8:	4619      	mov	r1, r3
 8006bea:	4603      	mov	r3, r0
 8006bec:	4642      	mov	r2, r8
 8006bee:	189b      	adds	r3, r3, r2
 8006bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	460a      	mov	r2, r1
 8006bf8:	eb42 0303 	adc.w	r3, r2, r3
 8006bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c14:	460b      	mov	r3, r1
 8006c16:	18db      	adds	r3, r3, r3
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	eb42 0303 	adc.w	r3, r2, r3
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c2a:	f7f9 fb1d 	bl	8000268 <__aeabi_uldivmod>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <UART_SetConfig+0x2d4>)
 8006c34:	fba3 1302 	umull	r1, r3, r3, r2
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	2164      	movs	r1, #100	; 0x64
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	3332      	adds	r3, #50	; 0x32
 8006c46:	4a08      	ldr	r2, [pc, #32]	; (8006c68 <UART_SetConfig+0x2d4>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	f003 0207 	and.w	r2, r3, #7
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4422      	add	r2, r4
 8006c5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c5c:	e105      	b.n	8006e6a <UART_SetConfig+0x4d6>
 8006c5e:	bf00      	nop
 8006c60:	40011000 	.word	0x40011000
 8006c64:	40011400 	.word	0x40011400
 8006c68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c7e:	4642      	mov	r2, r8
 8006c80:	464b      	mov	r3, r9
 8006c82:	1891      	adds	r1, r2, r2
 8006c84:	6239      	str	r1, [r7, #32]
 8006c86:	415b      	adcs	r3, r3
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c8e:	4641      	mov	r1, r8
 8006c90:	1854      	adds	r4, r2, r1
 8006c92:	4649      	mov	r1, r9
 8006c94:	eb43 0501 	adc.w	r5, r3, r1
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	00eb      	lsls	r3, r5, #3
 8006ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ca6:	00e2      	lsls	r2, r4, #3
 8006ca8:	4614      	mov	r4, r2
 8006caa:	461d      	mov	r5, r3
 8006cac:	4643      	mov	r3, r8
 8006cae:	18e3      	adds	r3, r4, r3
 8006cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	eb45 0303 	adc.w	r3, r5, r3
 8006cba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	f04f 0300 	mov.w	r3, #0
 8006cd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cda:	4629      	mov	r1, r5
 8006cdc:	008b      	lsls	r3, r1, #2
 8006cde:	4621      	mov	r1, r4
 8006ce0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	008a      	lsls	r2, r1, #2
 8006ce8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cec:	f7f9 fabc 	bl	8000268 <__aeabi_uldivmod>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4b60      	ldr	r3, [pc, #384]	; (8006e78 <UART_SetConfig+0x4e4>)
 8006cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	011c      	lsls	r4, r3, #4
 8006cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d10:	4642      	mov	r2, r8
 8006d12:	464b      	mov	r3, r9
 8006d14:	1891      	adds	r1, r2, r2
 8006d16:	61b9      	str	r1, [r7, #24]
 8006d18:	415b      	adcs	r3, r3
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d20:	4641      	mov	r1, r8
 8006d22:	1851      	adds	r1, r2, r1
 8006d24:	6139      	str	r1, [r7, #16]
 8006d26:	4649      	mov	r1, r9
 8006d28:	414b      	adcs	r3, r1
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d38:	4659      	mov	r1, fp
 8006d3a:	00cb      	lsls	r3, r1, #3
 8006d3c:	4651      	mov	r1, sl
 8006d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d42:	4651      	mov	r1, sl
 8006d44:	00ca      	lsls	r2, r1, #3
 8006d46:	4610      	mov	r0, r2
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	189b      	adds	r3, r3, r2
 8006d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d54:	464b      	mov	r3, r9
 8006d56:	460a      	mov	r2, r1
 8006d58:	eb42 0303 	adc.w	r3, r2, r3
 8006d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d78:	4649      	mov	r1, r9
 8006d7a:	008b      	lsls	r3, r1, #2
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d82:	4641      	mov	r1, r8
 8006d84:	008a      	lsls	r2, r1, #2
 8006d86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d8a:	f7f9 fa6d 	bl	8000268 <__aeabi_uldivmod>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	4b39      	ldr	r3, [pc, #228]	; (8006e78 <UART_SetConfig+0x4e4>)
 8006d94:	fba3 1302 	umull	r1, r3, r3, r2
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	2164      	movs	r1, #100	; 0x64
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	3332      	adds	r3, #50	; 0x32
 8006da6:	4a34      	ldr	r2, [pc, #208]	; (8006e78 <UART_SetConfig+0x4e4>)
 8006da8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006db2:	441c      	add	r4, r3
 8006db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db8:	2200      	movs	r2, #0
 8006dba:	673b      	str	r3, [r7, #112]	; 0x70
 8006dbc:	677a      	str	r2, [r7, #116]	; 0x74
 8006dbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	1891      	adds	r1, r2, r2
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	415b      	adcs	r3, r3
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	1851      	adds	r1, r2, r1
 8006dd6:	6039      	str	r1, [r7, #0]
 8006dd8:	4649      	mov	r1, r9
 8006dda:	414b      	adcs	r3, r1
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dea:	4659      	mov	r1, fp
 8006dec:	00cb      	lsls	r3, r1, #3
 8006dee:	4651      	mov	r1, sl
 8006df0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006df4:	4651      	mov	r1, sl
 8006df6:	00ca      	lsls	r2, r1, #3
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	4642      	mov	r2, r8
 8006e00:	189b      	adds	r3, r3, r2
 8006e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e04:	464b      	mov	r3, r9
 8006e06:	460a      	mov	r2, r1
 8006e08:	eb42 0303 	adc.w	r3, r2, r3
 8006e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	663b      	str	r3, [r7, #96]	; 0x60
 8006e18:	667a      	str	r2, [r7, #100]	; 0x64
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e26:	4649      	mov	r1, r9
 8006e28:	008b      	lsls	r3, r1, #2
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e30:	4641      	mov	r1, r8
 8006e32:	008a      	lsls	r2, r1, #2
 8006e34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e38:	f7f9 fa16 	bl	8000268 <__aeabi_uldivmod>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <UART_SetConfig+0x4e4>)
 8006e42:	fba3 1302 	umull	r1, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	2164      	movs	r1, #100	; 0x64
 8006e4a:	fb01 f303 	mul.w	r3, r1, r3
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	3332      	adds	r3, #50	; 0x32
 8006e54:	4a08      	ldr	r2, [pc, #32]	; (8006e78 <UART_SetConfig+0x4e4>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4422      	add	r2, r4
 8006e68:	609a      	str	r2, [r3, #8]
}
 8006e6a:	bf00      	nop
 8006e6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e70:	46bd      	mov	sp, r7
 8006e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e76:	bf00      	nop
 8006e78:	51eb851f 	.word	0x51eb851f

08006e7c <__libc_init_array>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4d0d      	ldr	r5, [pc, #52]	; (8006eb4 <__libc_init_array+0x38>)
 8006e80:	4c0d      	ldr	r4, [pc, #52]	; (8006eb8 <__libc_init_array+0x3c>)
 8006e82:	1b64      	subs	r4, r4, r5
 8006e84:	10a4      	asrs	r4, r4, #2
 8006e86:	2600      	movs	r6, #0
 8006e88:	42a6      	cmp	r6, r4
 8006e8a:	d109      	bne.n	8006ea0 <__libc_init_array+0x24>
 8006e8c:	4d0b      	ldr	r5, [pc, #44]	; (8006ebc <__libc_init_array+0x40>)
 8006e8e:	4c0c      	ldr	r4, [pc, #48]	; (8006ec0 <__libc_init_array+0x44>)
 8006e90:	f000 f820 	bl	8006ed4 <_init>
 8006e94:	1b64      	subs	r4, r4, r5
 8006e96:	10a4      	asrs	r4, r4, #2
 8006e98:	2600      	movs	r6, #0
 8006e9a:	42a6      	cmp	r6, r4
 8006e9c:	d105      	bne.n	8006eaa <__libc_init_array+0x2e>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea4:	4798      	blx	r3
 8006ea6:	3601      	adds	r6, #1
 8006ea8:	e7ee      	b.n	8006e88 <__libc_init_array+0xc>
 8006eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eae:	4798      	blx	r3
 8006eb0:	3601      	adds	r6, #1
 8006eb2:	e7f2      	b.n	8006e9a <__libc_init_array+0x1e>
 8006eb4:	08007e08 	.word	0x08007e08
 8006eb8:	08007e08 	.word	0x08007e08
 8006ebc:	08007e08 	.word	0x08007e08
 8006ec0:	08007e0c 	.word	0x08007e0c

08006ec4 <memset>:
 8006ec4:	4402      	add	r2, r0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d100      	bne.n	8006ece <memset+0xa>
 8006ecc:	4770      	bx	lr
 8006ece:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed2:	e7f9      	b.n	8006ec8 <memset+0x4>

08006ed4 <_init>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	bf00      	nop
 8006ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eda:	bc08      	pop	{r3}
 8006edc:	469e      	mov	lr, r3
 8006ede:	4770      	bx	lr

08006ee0 <_fini>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	bf00      	nop
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr
