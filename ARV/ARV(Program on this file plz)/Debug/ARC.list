
ARC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c94  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f48  08008e20  08008e20  00018e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d68  08009d68  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d70  08009d70  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d70  08009d70  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08009d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00005984  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005a94  20005a94  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001926c  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000386a  00000000  00000000  000393ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0003cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001460  00000000  00000000  0003e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002285c  00000000  00000000  0003f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0c7  00000000  00000000  00061e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca8c7  00000000  00000000  0007cf4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147812  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060d0  00000000  00000000  00147864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e04 	.word	0x08008e04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	08008e04 	.word	0x08008e04

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <FIFO_GPIO_init>:
};

#define IMG_WIDTH  cam_sizes[cam_framesize].width
#define IMG_HEIGHT cam_sizes[cam_framesize].height

static void FIFO_GPIO_init(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <FIFO_GPIO_init+0xec>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a37      	ldr	r2, [pc, #220]	; (8000f70 <FIFO_GPIO_init+0xec>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <FIFO_GPIO_init+0xec>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <FIFO_GPIO_init+0xec>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a30      	ldr	r2, [pc, #192]	; (8000f70 <FIFO_GPIO_init+0xec>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <FIFO_GPIO_init+0xec>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <FIFO_GPIO_init+0xec>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <FIFO_GPIO_init+0xec>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <FIFO_GPIO_init+0xec>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pin = OV7725_OE_PIN;
 8000ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_OE_PORT, &GPIO_InitStructure);
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4820      	ldr	r0, [pc, #128]	; (8000f74 <FIFO_GPIO_init+0xf0>)
 8000ef4:	f004 f930 	bl	8005158 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_WRST_PIN;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_WRST_PORT, &GPIO_InitStructure);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	481c      	ldr	r0, [pc, #112]	; (8000f74 <FIFO_GPIO_init+0xf0>)
 8000f04:	f004 f928 	bl	8005158 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_RRST_PIN;
 8000f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_RRST_PORT, &GPIO_InitStructure);
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4619      	mov	r1, r3
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <FIFO_GPIO_init+0xf0>)
 8000f16:	f004 f91f 	bl	8005158 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_RCLK_PIN;
 8000f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_RCLK_PORT, &GPIO_InitStructure);
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	4619      	mov	r1, r3
 8000f26:	4814      	ldr	r0, [pc, #80]	; (8000f78 <FIFO_GPIO_init+0xf4>)
 8000f28:	f004 f916 	bl	8005158 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_WE_PIN;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_WE_PORT, &GPIO_InitStructure);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	4810      	ldr	r0, [pc, #64]	; (8000f78 <FIFO_GPIO_init+0xf4>)
 8000f38:	f004 f90e 	bl	8005158 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_D0_PIN | OV7725_D1_PIN | OV7725_D2_PIN | OV7725_D3_PIN | OV7725_D4_PIN
 8000f3c:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8000f40:	60fb      	str	r3, [r7, #12]
							 | OV7725_D5_PIN | OV7725_D6_PIN | OV7725_D7_PIN;
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(OV7725_DATA_PORT, &GPIO_InitStructure);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <FIFO_GPIO_init+0xf8>)
 8000f56:	f004 f8ff 	bl	8005158 <HAL_GPIO_Init>

	FIFO_OE_L;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <FIFO_GPIO_init+0xf0>)
 8000f5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f60:	619a      	str	r2, [r3, #24]
	FIFO_WE_H;
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <FIFO_GPIO_init+0xf4>)
 8000f64:	2202      	movs	r2, #2
 8000f66:	619a      	str	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40020800 	.word	0x40020800

08000f80 <VSYNC_GPIO_init>:

static void VSYNC_GPIO_init(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <VSYNC_GPIO_init+0x58>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <VSYNC_GPIO_init+0x58>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <VSYNC_GPIO_init+0x58>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Pin = OV7725_VSYNC_PIN;
 8000fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fa6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000fa8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(OV7725_VSYNC_PORT, &GPIO_InitStructure);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4808      	ldr	r0, [pc, #32]	; (8000fdc <VSYNC_GPIO_init+0x5c>)
 8000fbc:	f004 f8cc 	bl	8005158 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(OV7725_VSYNC_EXTI_IRQ, 0, 3);
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2028      	movs	r0, #40	; 0x28
 8000fc6:	f003 fcfe 	bl	80049c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7725_VSYNC_EXTI_IRQ);
 8000fca:	2028      	movs	r0, #40	; 0x28
 8000fcc:	f003 fd17 	bl	80049fe <HAL_NVIC_EnableIRQ>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <camera_GPIO_init>:

void camera_GPIO_init(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	SCCB_GPIO_init();
 8000fe4:	f002 fc50 	bl	8003888 <SCCB_GPIO_init>
	FIFO_GPIO_init();
 8000fe8:	f7ff ff4c 	bl	8000e84 <FIFO_GPIO_init>
	VSYNC_GPIO_init();
 8000fec:	f7ff ffc8 	bl	8000f80 <VSYNC_GPIO_init>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <camera_init_internal>:

static CameraState camera_init_internal(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	uint8_t dev_id = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]

	if (SCCB_send_byte(REG_COM7, COM7_REGISTER_RESET) == SCCB_FAIL) {
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	2012      	movs	r0, #18
 8001002:	f002 fdc9 	bl	8003b98 <SCCB_send_byte>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <camera_init_internal+0x1c>
		return CAM_NOT_FOUND;
 800100c:	2302      	movs	r3, #2
 800100e:	e035      	b.n	800107c <camera_init_internal+0x88>
	}

	if (SCCB_read_byte(REG_VER, &dev_id, 1) == SCCB_FAIL) {
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	2201      	movs	r2, #1
 8001014:	4619      	mov	r1, r3
 8001016:	200b      	movs	r0, #11
 8001018:	f002 fded 	bl	8003bf6 <SCCB_read_byte>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <camera_init_internal+0x32>
		return CAM_NOT_FOUND;
 8001022:	2302      	movs	r3, #2
 8001024:	e02a      	b.n	800107c <camera_init_internal+0x88>
	}

	if (dev_id == OV7725_ID) {
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b21      	cmp	r3, #33	; 0x21
 800102a:	d124      	bne.n	8001076 <camera_init_internal+0x82>
		for (volatile uint16_t i = 0; i < INIT_REG_NUM; ++i) {
 800102c:	2300      	movs	r3, #0
 800102e:	80bb      	strh	r3, [r7, #4]
 8001030:	e01a      	b.n	8001068 <camera_init_internal+0x74>
			if (SCCB_send_byte(init_config[i].address, init_config[i].value) == SCCB_FAIL) {
 8001032:	88bb      	ldrh	r3, [r7, #4]
 8001034:	b29b      	uxth	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <camera_init_internal+0x90>)
 800103a:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 800103e:	b29a      	uxth	r2, r3
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	b29b      	uxth	r3, r3
 8001044:	490f      	ldr	r1, [pc, #60]	; (8001084 <camera_init_internal+0x90>)
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	440b      	add	r3, r1
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f002 fda2 	bl	8003b98 <SCCB_send_byte>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <camera_init_internal+0x6a>
				return CAM_INIT_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <camera_init_internal+0x88>
		for (volatile uint16_t i = 0; i < INIT_REG_NUM; ++i) {
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	b29b      	uxth	r3, r3
 8001062:	3301      	adds	r3, #1
 8001064:	b29b      	uxth	r3, r3
 8001066:	80bb      	strh	r3, [r7, #4]
 8001068:	234d      	movs	r3, #77	; 0x4d
 800106a:	b29a      	uxth	r2, r3
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	b29b      	uxth	r3, r3
 8001070:	429a      	cmp	r2, r3
 8001072:	d8de      	bhi.n	8001032 <camera_init_internal+0x3e>
 8001074:	e001      	b.n	800107a <camera_init_internal+0x86>
			}
		}
	} else {
		return CAM_NOT_FOUND;
 8001076:	2302      	movs	r3, #2
 8001078:	e000      	b.n	800107c <camera_init_internal+0x88>
	}
	return CAM_CONFIGURED;
 800107a:	2303      	movs	r3, #3
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000

08001088 <camera_init>:

CameraState camera_init(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	volatile uint8_t retry = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	71fb      	strb	r3, [r7, #7]
	while (camera_init_internal() != CAM_CONFIGURED) {
 8001092:	e00a      	b.n	80010aa <camera_init+0x22>
		++retry;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	3301      	adds	r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	71fb      	strb	r3, [r7, #7]
		if (retry > 5) {
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d901      	bls.n	80010aa <camera_init+0x22>
			return CAM_NOT_INITED;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e029      	b.n	80010fe <camera_init+0x76>
	while (camera_init_internal() != CAM_CONFIGURED) {
 80010aa:	f7ff ffa3 	bl	8000ff4 <camera_init_internal>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d1ef      	bne.n	8001094 <camera_init+0xc>
		}
	}

	cam_set_effect(CAM_FX_NORMAL);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 fa2d 	bl	8001514 <cam_set_effect>
	cam_set_lightmode(CAM_LIGHT_HOME);
 80010ba:	2004      	movs	r0, #4
 80010bc:	f000 f900 	bl	80012c0 <cam_set_lightmode>
	cam_set_saturation(0);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f000 f9e7 	bl	8001494 <cam_set_saturation>
	cam_set_brightness(0);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f996 	bl	80013f8 <cam_set_brightness>
	cam_set_contrast(2);
 80010cc:	2002      	movs	r0, #2
 80010ce:	f000 fa05 	bl	80014dc <cam_set_contrast>
	// cam_set_frameoffset((240 - 120) / 2, (320 - 160) / 2);
	// cam_set_framesize(QQVGA_120x160);
	cam_set_window(IMG_WIDTH / 2, IMG_HEIGHT / 2, cam_framesize);
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <camera_init+0x80>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <camera_init+0x84>)
 80010da:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	b298      	uxth	r0, r3
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <camera_init+0x80>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <camera_init+0x84>)
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	885b      	ldrh	r3, [r3, #2]
 80010ee:	085b      	lsrs	r3, r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <camera_init+0x80>)
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	f000 f82c 	bl	8001154 <cam_set_window>

	return CAM_CONFIGURED;
 80010fc:	2303      	movs	r3, #3
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000009b 	.word	0x2000009b
 800110c:	08008e7c 	.word	0x08008e7c

08001110 <cam_set_state>:
void cam_set_state(CameraState state) { cam_state = state; }
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <cam_set_state+0x1c>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	7013      	strb	r3, [r2, #0]
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	2000012c 	.word	0x2000012c

08001130 <cam_set_colormode>:

void cam_set_colormode(CamColorMode mode) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	// if (SCCB_send_byte(REG_COM7, cam_color_mode[mode]))
	// 	;
	cam_set_effect(CAM_FX_BW);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 f9ea 	bl	8001514 <cam_set_effect>
	cam_colormode = mode;
 8001140:	4a03      	ldr	r2, [pc, #12]	; (8001150 <cam_set_colormode+0x20>)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	7013      	strb	r3, [r2, #0]
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000009a 	.word	0x2000009a

08001154 <cam_set_window>:
	SCCB_send_byte(REG_HREF, temp);

	SCCB_send_byte(REG_DSPAuto, 0xff);
}

void cam_set_window(uint16_t off_x, uint16_t off_y, CamFrameSize size) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	460b      	mov	r3, r1
 8001160:	80bb      	strh	r3, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	70fb      	strb	r3, [r7, #3]
	uint8_t reg_raw, cal_temp;
	uint16_t width = cam_sizes[size].width;
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <cam_set_window+0x164>)
 800116a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800116e:	81fb      	strh	r3, [r7, #14]
	uint16_t height = cam_sizes[size].height;
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	4a51      	ldr	r2, [pc, #324]	; (80012b8 <cam_set_window+0x164>)
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	885b      	ldrh	r3, [r3, #2]
 800117a:	81bb      	strh	r3, [r7, #12]

	SCCB_send_byte(REG_COM7, COM7_SELECT_QVGA | COM7_FORMAT_RGB565 | COM7_OUTPUT_RGB);
 800117c:	2146      	movs	r1, #70	; 0x46
 800117e:	2012      	movs	r0, #18
 8001180:	f002 fd0a 	bl	8003b98 <SCCB_send_byte>

	SCCB_read_byte(REG_HSTART, &reg_raw, 1);
 8001184:	f107 030a 	add.w	r3, r7, #10
 8001188:	2201      	movs	r2, #1
 800118a:	4619      	mov	r1, r3
 800118c:	2017      	movs	r0, #23
 800118e:	f002 fd32 	bl	8003bf6 <SCCB_read_byte>
	// MSB 8 bit stored in HSTART, LSB 2 bit stored in HREF
	cal_temp = (reg_raw + (off_x >> 2));
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2da      	uxtb	r2, r3
 800119a:	7abb      	ldrb	r3, [r7, #10]
 800119c:	4413      	add	r3, r2
 800119e:	72fb      	strb	r3, [r7, #11]
	SCCB_send_byte(REG_HSTART, cal_temp);
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	4619      	mov	r1, r3
 80011a4:	2017      	movs	r0, #23
 80011a6:	f002 fcf7 	bl	8003b98 <SCCB_send_byte>

	SCCB_read_byte(REG_VSTRT, &reg_raw, 1);
 80011aa:	f107 030a 	add.w	r3, r7, #10
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	2019      	movs	r0, #25
 80011b4:	f002 fd1f 	bl	8003bf6 <SCCB_read_byte>
	// MSB 8 bit stored in VSTART, LSB 1 bit stored in HREF
	cal_temp = (reg_raw + (off_y >> 1));
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	085b      	lsrs	r3, r3, #1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	7abb      	ldrb	r3, [r7, #10]
 80011c2:	4413      	add	r3, r2
 80011c4:	72fb      	strb	r3, [r7, #11]
	SCCB_send_byte(REG_VSTRT, cal_temp);
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	4619      	mov	r1, r3
 80011ca:	2019      	movs	r0, #25
 80011cc:	f002 fce4 	bl	8003b98 <SCCB_send_byte>

	// horizontal sensor width, MSB 8 bit stored in HSIZE, LSB 2bit stored in HREF
	SCCB_send_byte(REG_HSIZE, width >> 2);
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	2018      	movs	r0, #24
 80011dc:	f002 fcdc 	bl	8003b98 <SCCB_send_byte>
	// vertical sensor height, MSB 8 bit stored in VSIZE, LSB 1 bit stored in HREF
	SCCB_send_byte(REG_VSIZE, height >> 1);
 80011e0:	89bb      	ldrh	r3, [r7, #12]
 80011e2:	085b      	lsrs	r3, r3, #1
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	201a      	movs	r0, #26
 80011ec:	f002 fcd4 	bl	8003b98 <SCCB_send_byte>

	SCCB_read_byte(REG_HREF, &reg_raw, 1);
 80011f0:	f107 030a 	add.w	r3, r7, #10
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	2032      	movs	r0, #50	; 0x32
 80011fa:	f002 fcfc 	bl	8003bf6 <SCCB_read_byte>
	// store width LSB, height LSB, offset x LSB, offset y LSB in HREF
	cal_temp = (reg_raw | (width & 0x03) | ((height & 0x01) << 2) | ((off_x & 0x03) << 4) | ((off_y & 0x01) << 6));
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	b25a      	sxtb	r2, r3
 8001208:	7abb      	ldrb	r3, [r7, #10]
 800120a:	b25b      	sxtb	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b25a      	sxtb	r2, r3
 8001210:	89bb      	ldrh	r3, [r7, #12]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	b25b      	sxtb	r3, r3
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	b25b      	sxtb	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b25a      	sxtb	r2, r3
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	b25b      	sxtb	r3, r3
 8001226:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800122a:	b25b      	sxtb	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b25a      	sxtb	r2, r3
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	019b      	lsls	r3, r3, #6
 8001234:	b25b      	sxtb	r3, r3
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	b25b      	sxtb	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b25b      	sxtb	r3, r3
 8001240:	72fb      	strb	r3, [r7, #11]
	SCCB_send_byte(REG_HREF, cal_temp);
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	4619      	mov	r1, r3
 8001246:	2032      	movs	r0, #50	; 0x32
 8001248:	f002 fca6 	bl	8003b98 <SCCB_send_byte>

	// output size
	SCCB_send_byte(REG_HOutSize, width >> 2);
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	b29b      	uxth	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	2029      	movs	r0, #41	; 0x29
 8001258:	f002 fc9e 	bl	8003b98 <SCCB_send_byte>
	SCCB_send_byte(REG_VOutSize, height >> 1);
 800125c:	89bb      	ldrh	r3, [r7, #12]
 800125e:	085b      	lsrs	r3, r3, #1
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4619      	mov	r1, r3
 8001266:	202c      	movs	r0, #44	; 0x2c
 8001268:	f002 fc96 	bl	8003b98 <SCCB_send_byte>
	SCCB_read_byte(REG_EXHCH, &reg_raw, 1);
 800126c:	f107 030a 	add.w	r3, r7, #10
 8001270:	2201      	movs	r2, #1
 8001272:	4619      	mov	r1, r3
 8001274:	202a      	movs	r0, #42	; 0x2a
 8001276:	f002 fcbe 	bl	8003bf6 <SCCB_read_byte>
	cal_temp = (reg_raw | (width & 0x03) | ((height & 0x01) << 2));
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	b25b      	sxtb	r3, r3
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	b25a      	sxtb	r2, r3
 8001284:	7abb      	ldrb	r3, [r7, #10]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25a      	sxtb	r2, r3
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	b25b      	sxtb	r3, r3
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	b25b      	sxtb	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b25b      	sxtb	r3, r3
 800129c:	72fb      	strb	r3, [r7, #11]

	SCCB_send_byte(REG_EXHCH, cal_temp);
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	4619      	mov	r1, r3
 80012a2:	202a      	movs	r0, #42	; 0x2a
 80012a4:	f002 fc78 	bl	8003b98 <SCCB_send_byte>

	cam_framesize = size;
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <cam_set_window+0x168>)
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	7013      	strb	r3, [r2, #0]
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08008e7c 	.word	0x08008e7c
 80012bc:	2000009b 	.word	0x2000009b

080012c0 <cam_set_lightmode>:
	SCCB_send_byte(REG_EDGE1, EDGE1_THRESHOLD(thresh));
	SCCB_send_byte(REG_EDGE2, upperlim);
	SCCB_send_byte(REG_EDGE3, lowerlim);
}

void cam_set_lightmode(CamLightMode mode) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	f200 808d 	bhi.w	80013ec <cam_set_lightmode+0x12c>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <cam_set_lightmode+0x18>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	080012f1 	.word	0x080012f1
 80012dc:	08001313 	.word	0x08001313
 80012e0:	08001345 	.word	0x08001345
 80012e4:	08001377 	.word	0x08001377
 80012e8:	080013a9 	.word	0x080013a9
 80012ec:	080013db 	.word	0x080013db
		case CAM_LIGHT_AUTO:				// Auto
			SCCB_send_byte(REG_COM8, 0xff); // AWB on
 80012f0:	21ff      	movs	r1, #255	; 0xff
 80012f2:	2013      	movs	r0, #19
 80012f4:	f002 fc50 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 80012f8:	2165      	movs	r1, #101	; 0x65
 80012fa:	200e      	movs	r0, #14
 80012fc:	f002 fc4c 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8001300:	2100      	movs	r1, #0
 8001302:	202d      	movs	r0, #45	; 0x2d
 8001304:	f002 fc48 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8001308:	2100      	movs	r1, #0
 800130a:	202e      	movs	r0, #46	; 0x2e
 800130c:	f002 fc44 	bl	8003b98 <SCCB_send_byte>
			break;
 8001310:	e06d      	b.n	80013ee <cam_set_lightmode+0x12e>
		case CAM_LIGHT_SUNNY:				// sunny
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8001312:	21fd      	movs	r1, #253	; 0xfd
 8001314:	2013      	movs	r0, #19
 8001316:	f002 fc3f 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x5a);
 800131a:	215a      	movs	r1, #90	; 0x5a
 800131c:	2001      	movs	r0, #1
 800131e:	f002 fc3b 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x5c);
 8001322:	215c      	movs	r1, #92	; 0x5c
 8001324:	2002      	movs	r0, #2
 8001326:	f002 fc37 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 800132a:	2165      	movs	r1, #101	; 0x65
 800132c:	200e      	movs	r0, #14
 800132e:	f002 fc33 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8001332:	2100      	movs	r1, #0
 8001334:	202d      	movs	r0, #45	; 0x2d
 8001336:	f002 fc2f 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 800133a:	2100      	movs	r1, #0
 800133c:	202e      	movs	r0, #46	; 0x2e
 800133e:	f002 fc2b 	bl	8003b98 <SCCB_send_byte>
			break;
 8001342:	e054      	b.n	80013ee <cam_set_lightmode+0x12e>
		case CAM_LIGHT_CLOUDY:				// cloudy
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8001344:	21fd      	movs	r1, #253	; 0xfd
 8001346:	2013      	movs	r0, #19
 8001348:	f002 fc26 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x58);
 800134c:	2158      	movs	r1, #88	; 0x58
 800134e:	2001      	movs	r0, #1
 8001350:	f002 fc22 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x60);
 8001354:	2160      	movs	r1, #96	; 0x60
 8001356:	2002      	movs	r0, #2
 8001358:	f002 fc1e 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 800135c:	2165      	movs	r1, #101	; 0x65
 800135e:	200e      	movs	r0, #14
 8001360:	f002 fc1a 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8001364:	2100      	movs	r1, #0
 8001366:	202d      	movs	r0, #45	; 0x2d
 8001368:	f002 fc16 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 800136c:	2100      	movs	r1, #0
 800136e:	202e      	movs	r0, #46	; 0x2e
 8001370:	f002 fc12 	bl	8003b98 <SCCB_send_byte>
			break;
 8001374:	e03b      	b.n	80013ee <cam_set_lightmode+0x12e>
		case CAM_LIGHT_OFFICE:				// office
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8001376:	21fd      	movs	r1, #253	; 0xfd
 8001378:	2013      	movs	r0, #19
 800137a:	f002 fc0d 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x84);
 800137e:	2184      	movs	r1, #132	; 0x84
 8001380:	2001      	movs	r0, #1
 8001382:	f002 fc09 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x4c);
 8001386:	214c      	movs	r1, #76	; 0x4c
 8001388:	2002      	movs	r0, #2
 800138a:	f002 fc05 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 800138e:	2165      	movs	r1, #101	; 0x65
 8001390:	200e      	movs	r0, #14
 8001392:	f002 fc01 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8001396:	2100      	movs	r1, #0
 8001398:	202d      	movs	r0, #45	; 0x2d
 800139a:	f002 fbfd 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 800139e:	2100      	movs	r1, #0
 80013a0:	202e      	movs	r0, #46	; 0x2e
 80013a2:	f002 fbf9 	bl	8003b98 <SCCB_send_byte>
			break;
 80013a6:	e022      	b.n	80013ee <cam_set_lightmode+0x12e>
		case CAM_LIGHT_HOME:				// home
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 80013a8:	21fd      	movs	r1, #253	; 0xfd
 80013aa:	2013      	movs	r0, #19
 80013ac:	f002 fbf4 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x96);
 80013b0:	2196      	movs	r1, #150	; 0x96
 80013b2:	2001      	movs	r0, #1
 80013b4:	f002 fbf0 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x40);
 80013b8:	2140      	movs	r1, #64	; 0x40
 80013ba:	2002      	movs	r0, #2
 80013bc:	f002 fbec 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 80013c0:	2165      	movs	r1, #101	; 0x65
 80013c2:	200e      	movs	r0, #14
 80013c4:	f002 fbe8 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 80013c8:	2100      	movs	r1, #0
 80013ca:	202d      	movs	r0, #45	; 0x2d
 80013cc:	f002 fbe4 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 80013d0:	2100      	movs	r1, #0
 80013d2:	202e      	movs	r0, #46	; 0x2e
 80013d4:	f002 fbe0 	bl	8003b98 <SCCB_send_byte>
			break;
 80013d8:	e009      	b.n	80013ee <cam_set_lightmode+0x12e>

		case CAM_LIGHT_NIGHT:				// night
			SCCB_send_byte(REG_COM8, 0xff); // AWB on
 80013da:	21ff      	movs	r1, #255	; 0xff
 80013dc:	2013      	movs	r0, #19
 80013de:	f002 fbdb 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0xe5);
 80013e2:	21e5      	movs	r1, #229	; 0xe5
 80013e4:	200e      	movs	r0, #14
 80013e6:	f002 fbd7 	bl	8003b98 <SCCB_send_byte>
			break;
 80013ea:	e000      	b.n	80013ee <cam_set_lightmode+0x12e>
		default: break;
 80013ec:	bf00      	nop
	}
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop

080013f8 <cam_set_brightness>:

void cam_set_brightness(int8_t brightness) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	uint8_t _sign = (brightness >= 0) ? 0x06 : 0x0E;
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db01      	blt.n	800140e <cam_set_brightness+0x16>
 800140a:	2306      	movs	r3, #6
 800140c:	e000      	b.n	8001410 <cam_set_brightness+0x18>
 800140e:	230e      	movs	r3, #14
 8001410:	73fb      	strb	r3, [r7, #15]
	uint8_t _brightness;

	switch (brightness) {
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	3304      	adds	r3, #4
 8001418:	2b08      	cmp	r3, #8
 800141a:	d827      	bhi.n	800146c <cam_set_brightness+0x74>
 800141c:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <cam_set_brightness+0x2c>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	0800144f 	.word	0x0800144f
 8001428:	08001455 	.word	0x08001455
 800142c:	0800145b 	.word	0x0800145b
 8001430:	08001467 	.word	0x08001467
 8001434:	08001461 	.word	0x08001461
 8001438:	0800145b 	.word	0x0800145b
 800143c:	08001455 	.word	0x08001455
 8001440:	0800144f 	.word	0x0800144f
 8001444:	08001449 	.word	0x08001449
		case 4: _brightness = 0x48; break;
 8001448:	2348      	movs	r3, #72	; 0x48
 800144a:	73bb      	strb	r3, [r7, #14]
 800144c:	e013      	b.n	8001476 <cam_set_brightness+0x7e>
		case 3:
		case -4: _brightness = 0x38; break;
 800144e:	2338      	movs	r3, #56	; 0x38
 8001450:	73bb      	strb	r3, [r7, #14]
 8001452:	e010      	b.n	8001476 <cam_set_brightness+0x7e>
		case 2:
		case -3: _brightness = 0x28; break;
 8001454:	2328      	movs	r3, #40	; 0x28
 8001456:	73bb      	strb	r3, [r7, #14]
 8001458:	e00d      	b.n	8001476 <cam_set_brightness+0x7e>
		case 1:
		case -2: _brightness = 0x18; break;
 800145a:	2318      	movs	r3, #24
 800145c:	73bb      	strb	r3, [r7, #14]
 800145e:	e00a      	b.n	8001476 <cam_set_brightness+0x7e>
		case 0: _brightness = 0x00; break;
 8001460:	2300      	movs	r3, #0
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	e007      	b.n	8001476 <cam_set_brightness+0x7e>
		case -1: _brightness = 0x08; break;
 8001466:	2308      	movs	r3, #8
 8001468:	73bb      	strb	r3, [r7, #14]
 800146a:	e004      	b.n	8001476 <cam_set_brightness+0x7e>
		default: _brightness = _sign = 0; break;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	73bb      	strb	r3, [r7, #14]
 8001474:	bf00      	nop
	}

	SCCB_send_byte(REG_BRIGHT, _brightness);
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	4619      	mov	r1, r3
 800147a:	209b      	movs	r0, #155	; 0x9b
 800147c:	f002 fb8c 	bl	8003b98 <SCCB_send_byte>
	SCCB_send_byte(REG_SIGN, _sign);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	4619      	mov	r1, r3
 8001484:	20ab      	movs	r0, #171	; 0xab
 8001486:	f002 fb87 	bl	8003b98 <SCCB_send_byte>
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop

08001494 <cam_set_saturation>:

void cam_set_saturation(int8_t sat) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	if (sat >= -4 && sat <= 4) {
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	f113 0f04 	cmn.w	r3, #4
 80014a6:	db15      	blt.n	80014d4 <cam_set_saturation+0x40>
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	dc11      	bgt.n	80014d4 <cam_set_saturation+0x40>
		SCCB_send_byte(REG_USAT, (sat + 4) << 4);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	3304      	adds	r3, #4
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	20a7      	movs	r0, #167	; 0xa7
 80014be:	f002 fb6b 	bl	8003b98 <SCCB_send_byte>
		SCCB_send_byte(REG_VSAT, (sat + 4) << 4);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	3304      	adds	r3, #4
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4619      	mov	r1, r3
 80014ce:	20a8      	movs	r0, #168	; 0xa8
 80014d0:	f002 fb62 	bl	8003b98 <SCCB_send_byte>
	}
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <cam_set_contrast>:

void cam_set_contrast(int8_t contrast) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	if (contrast >= -4 && contrast <= 4)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	f113 0f04 	cmn.w	r3, #4
 80014ee:	db0d      	blt.n	800150c <cam_set_contrast+0x30>
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	dc09      	bgt.n	800150c <cam_set_contrast+0x30>
		SCCB_send_byte(REG_CNST, (0x30 - (4 - contrast) * 4));
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	3308      	adds	r3, #8
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4619      	mov	r1, r3
 8001506:	209c      	movs	r0, #156	; 0x9c
 8001508:	f002 fb46 	bl	8003b98 <SCCB_send_byte>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <cam_set_effect>:

void cam_set_effect(CamEffect effect) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	switch (effect) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b06      	cmp	r3, #6
 8001522:	d864      	bhi.n	80015ee <cam_set_effect+0xda>
 8001524:	a201      	add	r2, pc, #4	; (adr r2, 800152c <cam_set_effect+0x18>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	08001549 	.word	0x08001549
 8001530:	08001563 	.word	0x08001563
 8001534:	0800157d 	.word	0x0800157d
 8001538:	08001597 	.word	0x08001597
 800153c:	080015b1 	.word	0x080015b1
 8001540:	080015cb 	.word	0x080015cb
 8001544:	080015e5 	.word	0x080015e5
		case CAM_FX_NORMAL: // normal
			SCCB_send_byte(REG_SDE, 0x06);
 8001548:	2106      	movs	r1, #6
 800154a:	20a6      	movs	r0, #166	; 0xa6
 800154c:	f002 fb24 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x80);
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	2060      	movs	r0, #96	; 0x60
 8001554:	f002 fb20 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x80);
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	2061      	movs	r0, #97	; 0x61
 800155c:	f002 fb1c 	bl	8003b98 <SCCB_send_byte>
			break;
 8001560:	e046      	b.n	80015f0 <cam_set_effect+0xdc>

		case CAM_FX_BW: // Black and white
			SCCB_send_byte(REG_SDE, 0x26);
 8001562:	2126      	movs	r1, #38	; 0x26
 8001564:	20a6      	movs	r0, #166	; 0xa6
 8001566:	f002 fb17 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x80);
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	2060      	movs	r0, #96	; 0x60
 800156e:	f002 fb13 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x80);
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	2061      	movs	r0, #97	; 0x61
 8001576:	f002 fb0f 	bl	8003b98 <SCCB_send_byte>
			break;
 800157a:	e039      	b.n	80015f0 <cam_set_effect+0xdc>

		case CAM_FX_BLUE: // blue
			SCCB_send_byte(REG_SDE, 0x1e);
 800157c:	211e      	movs	r1, #30
 800157e:	20a6      	movs	r0, #166	; 0xa6
 8001580:	f002 fb0a 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0xa0);
 8001584:	21a0      	movs	r1, #160	; 0xa0
 8001586:	2060      	movs	r0, #96	; 0x60
 8001588:	f002 fb06 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x40);
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	2061      	movs	r0, #97	; 0x61
 8001590:	f002 fb02 	bl	8003b98 <SCCB_send_byte>
			break;
 8001594:	e02c      	b.n	80015f0 <cam_set_effect+0xdc>

		case CAM_FX_SEPIA: // Sepia
			SCCB_send_byte(REG_SDE, 0x1e);
 8001596:	211e      	movs	r1, #30
 8001598:	20a6      	movs	r0, #166	; 0xa6
 800159a:	f002 fafd 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x40);
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	2060      	movs	r0, #96	; 0x60
 80015a2:	f002 faf9 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0xa0);
 80015a6:	21a0      	movs	r1, #160	; 0xa0
 80015a8:	2061      	movs	r0, #97	; 0x61
 80015aa:	f002 faf5 	bl	8003b98 <SCCB_send_byte>
			break;
 80015ae:	e01f      	b.n	80015f0 <cam_set_effect+0xdc>

		case CAM_FX_RED: // red
			SCCB_send_byte(REG_SDE, 0x1e);
 80015b0:	211e      	movs	r1, #30
 80015b2:	20a6      	movs	r0, #166	; 0xa6
 80015b4:	f002 faf0 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x80);
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	2060      	movs	r0, #96	; 0x60
 80015bc:	f002 faec 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0xc0);
 80015c0:	21c0      	movs	r1, #192	; 0xc0
 80015c2:	2061      	movs	r0, #97	; 0x61
 80015c4:	f002 fae8 	bl	8003b98 <SCCB_send_byte>
			break;
 80015c8:	e012      	b.n	80015f0 <cam_set_effect+0xdc>

		case CAM_FX_GREEN: // green
			SCCB_send_byte(REG_SDE, 0x1e);
 80015ca:	211e      	movs	r1, #30
 80015cc:	20a6      	movs	r0, #166	; 0xa6
 80015ce:	f002 fae3 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x60);
 80015d2:	2160      	movs	r1, #96	; 0x60
 80015d4:	2060      	movs	r0, #96	; 0x60
 80015d6:	f002 fadf 	bl	8003b98 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x60);
 80015da:	2160      	movs	r1, #96	; 0x60
 80015dc:	2061      	movs	r0, #97	; 0x61
 80015de:	f002 fadb 	bl	8003b98 <SCCB_send_byte>
			break;
 80015e2:	e005      	b.n	80015f0 <cam_set_effect+0xdc>

		case CAM_FX_NEGATIVE: // negative
			SCCB_send_byte(REG_SDE, 0x46);
 80015e4:	2146      	movs	r1, #70	; 0x46
 80015e6:	20a6      	movs	r0, #166	; 0xa6
 80015e8:	f002 fad6 	bl	8003b98 <SCCB_send_byte>
			break;
 80015ec:	e000      	b.n	80015f0 <cam_set_effect+0xdc>

		default: break;
 80015ee:	bf00      	nop
	}
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <cam_is_frame_ready>:
CameraState cam_get_state(void) { return cam_state; }
uint8_t cam_is_frame_ready(void) { return cam_state >= CAM_FRAME_READY; }
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <cam_is_frame_ready+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf8c      	ite	hi
 8001606:	2301      	movhi	r3, #1
 8001608:	2300      	movls	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2000012c 	.word	0x2000012c

0800161c <cam_get_rgb565>:
	FIFO_RCLK_L;
	*rgb565 |= (OV7725_DATA_PORT->IDR >> 6) & 0x00FF;
	FIFO_RCLK_H;
}

void cam_get_rgb565(uint16_t* image) {
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	FIFO_PREPARE;
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <cam_get_rgb565+0xe4>)
 8001626:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800162a:	619a      	str	r2, [r3, #24]
 800162c:	4b35      	ldr	r3, [pc, #212]	; (8001704 <cam_get_rgb565+0xe8>)
 800162e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001632:	619a      	str	r2, [r3, #24]
 8001634:	4b33      	ldr	r3, [pc, #204]	; (8001704 <cam_get_rgb565+0xe8>)
 8001636:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800163a:	619a      	str	r2, [r3, #24]
 800163c:	4b30      	ldr	r3, [pc, #192]	; (8001700 <cam_get_rgb565+0xe4>)
 800163e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <cam_get_rgb565+0xe8>)
 8001646:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800164a:	619a      	str	r2, [r3, #24]
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <cam_get_rgb565+0xe8>)
 800164e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001652:	619a      	str	r2, [r3, #24]
	uint16_t pixel = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 8001658:	2300      	movs	r3, #0
 800165a:	82fb      	strh	r3, [r7, #22]
 800165c:	e034      	b.n	80016c8 <cam_get_rgb565+0xac>
 800165e:	f107 030e 	add.w	r3, r7, #14
 8001662:	613b      	str	r3, [r7, #16]
	*rgb565 = 0;
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2200      	movs	r2, #0
 8001668:	801a      	strh	r2, [r3, #0]
	FIFO_RCLK_L;
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <cam_get_rgb565+0xe8>)
 800166c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001670:	619a      	str	r2, [r3, #24]
	*rgb565 = (OV7725_DATA_PORT->IDR << 2) & 0xFF00;
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <cam_get_rgb565+0xec>)
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	b29b      	uxth	r3, r3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	b29b      	uxth	r3, r3
 800167c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001680:	b29a      	uxth	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	801a      	strh	r2, [r3, #0]
	FIFO_RCLK_H;
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <cam_get_rgb565+0xe8>)
 8001688:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800168c:	619a      	str	r2, [r3, #24]
	FIFO_RCLK_L;
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <cam_get_rgb565+0xe8>)
 8001690:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001694:	619a      	str	r2, [r3, #24]
	*rgb565 |= (OV7725_DATA_PORT->IDR >> 6) & 0x00FF;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <cam_get_rgb565+0xec>)
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	099b      	lsrs	r3, r3, #6
 800169c:	b2d9      	uxtb	r1, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	b28b      	uxth	r3, r1
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	801a      	strh	r2, [r3, #0]
	FIFO_RCLK_H;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <cam_get_rgb565+0xe8>)
 80016ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b2:	619a      	str	r2, [r3, #24]
}
 80016b4:	bf00      	nop
		read_fifo_pixel(&pixel);
		image[i] = pixel;
 80016b6:	8afb      	ldrh	r3, [r7, #22]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	89fa      	ldrh	r2, [r7, #14]
 80016c0:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 80016c2:	8afb      	ldrh	r3, [r7, #22]
 80016c4:	3301      	adds	r3, #1
 80016c6:	82fb      	strh	r3, [r7, #22]
 80016c8:	8afa      	ldrh	r2, [r7, #22]
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <cam_get_rgb565+0xf0>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <cam_get_rgb565+0xf4>)
 80016d2:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 80016d6:	4618      	mov	r0, r3
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <cam_get_rgb565+0xf0>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <cam_get_rgb565+0xf4>)
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	885b      	ldrh	r3, [r3, #2]
 80016e4:	fb00 f303 	mul.w	r3, r0, r3
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbb8      	blt.n	800165e <cam_get_rgb565+0x42>
	}
	cam_state = CAM_CAPTURING;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <cam_get_rgb565+0xf8>)
 80016ee:	2204      	movs	r2, #4
 80016f0:	701a      	strb	r2, [r3, #0]
}
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800
 800170c:	2000009b 	.word	0x2000009b
 8001710:	08008e7c 	.word	0x08008e7c
 8001714:	2000012c 	.word	0x2000012c

08001718 <cam_rgb2printable>:

void cam_rgb2printable(uint16_t* image, uint16_t* printable) {
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 8001722:	2300      	movs	r3, #0
 8001724:	81fb      	strh	r3, [r7, #14]
 8001726:	e013      	b.n	8001750 <cam_rgb2printable+0x38>
		printable[i] = __REVSH(image[i]);
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	b21b      	sxth	r3, r3
 8001734:	81bb      	strh	r3, [r7, #12]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8001736:	89bb      	ldrh	r3, [r7, #12]
 8001738:	ba5b      	rev16	r3, r3
 800173a:	b29b      	uxth	r3, r3
 800173c:	b219      	sxth	r1, r3
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4413      	add	r3, r2
 8001746:	b28a      	uxth	r2, r1
 8001748:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	3301      	adds	r3, #1
 800174e:	81fb      	strh	r3, [r7, #14]
 8001750:	89fa      	ldrh	r2, [r7, #14]
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <cam_rgb2printable+0x6c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	4619      	mov	r1, r3
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <cam_rgb2printable+0x70>)
 800175a:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 800175e:	4618      	mov	r0, r3
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <cam_rgb2printable+0x6c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4908      	ldr	r1, [pc, #32]	; (8001788 <cam_rgb2printable+0x70>)
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	885b      	ldrh	r3, [r3, #2]
 800176c:	fb00 f303 	mul.w	r3, r0, r3
 8001770:	429a      	cmp	r2, r3
 8001772:	dbd9      	blt.n	8001728 <cam_rgb2printable+0x10>
	}
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	2000009b 	.word	0x2000009b
 8001788:	08008e7c 	.word	0x08008e7c

0800178c <HAL_GPIO_EXTI_Callback>:
#pragma GCC pop_options

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OV7725_VSYNC_PIN) {
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800179c:	d121      	bne.n	80017e2 <HAL_GPIO_EXTI_Callback+0x56>
		if (cam_state == CAM_CAPTURING) {
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d110      	bne.n	80017ca <HAL_GPIO_EXTI_Callback+0x3e>
			FIFO_WRST_L;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x68>)
 80017aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017ae:	619a      	str	r2, [r3, #24]
			FIFO_WE_H;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	619a      	str	r2, [r3, #24]

			cam_state = CAM_FRAME_READY;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80017b8:	2205      	movs	r2, #5
 80017ba:	701a      	strb	r2, [r3, #0]

			FIFO_WE_H;
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80017be:	2202      	movs	r2, #2
 80017c0:	619a      	str	r2, [r3, #24]
			FIFO_WRST_H;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x68>)
 80017c4:	2210      	movs	r2, #16
 80017c6:	619a      	str	r2, [r3, #24]
		} else if (cam_state == CAM_FRAME_READY) {
			FIFO_WE_L;
			cam_state = CAM_MISSED_FRAME;
		}
	}
}
 80017c8:	e00b      	b.n	80017e2 <HAL_GPIO_EXTI_Callback+0x56>
		} else if (cam_state == CAM_FRAME_READY) {
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d106      	bne.n	80017e2 <HAL_GPIO_EXTI_Callback+0x56>
			FIFO_WE_L;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80017d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017da:	619a      	str	r2, [r3, #24]
			cam_state = CAM_MISSED_FRAME;
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80017de:	2206      	movs	r2, #6
 80017e0:	701a      	strb	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2000012c 	.word	0x2000012c
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400

080017fc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_CAN1_Init+0x64>)
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <MX_CAN1_Init+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_CAN1_Init+0x64>)
 8001808:	2203      	movs	r2, #3
 800180a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_CAN1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MX_CAN1_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_CAN1_Init+0x64>)
 800181a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800181e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_CAN1_Init+0x64>)
 8001822:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001826:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <MX_CAN1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_CAN1_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MX_CAN1_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_CAN1_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <MX_CAN1_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_CAN1_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_CAN1_Init+0x64>)
 800184e:	f002 fee3 	bl	8004618 <HAL_CAN_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001858:	f002 f810 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000130 	.word	0x20000130
 8001864:	40006400 	.word	0x40006400

08001868 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_CAN2_Init+0x64>)
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <MX_CAN2_Init+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_CAN2_Init+0x64>)
 8001874:	2203      	movs	r2, #3
 8001876:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_CAN2_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_CAN2_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_CAN2_Init+0x64>)
 8001886:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800188a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_CAN2_Init+0x64>)
 800188e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001892:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <MX_CAN2_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_CAN2_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <MX_CAN2_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_CAN2_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <MX_CAN2_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_CAN2_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_CAN2_Init+0x64>)
 80018ba:	f002 fead 	bl	8004618 <HAL_CAN_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80018c4:	f001 ffda 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000158 	.word	0x20000158
 80018d0:	40006800 	.word	0x40006800

080018d4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a43      	ldr	r2, [pc, #268]	; (8001a00 <HAL_CAN_MspInit+0x12c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d136      	bne.n	8001964 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80018f6:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_CAN_MspInit+0x130>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	4a41      	ldr	r2, [pc, #260]	; (8001a04 <HAL_CAN_MspInit+0x130>)
 80018fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <HAL_CAN_MspInit+0x130>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d10d      	bne.n	8001924 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a3d      	ldr	r2, [pc, #244]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 8001912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	4a36      	ldr	r2, [pc, #216]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6313      	str	r3, [r2, #48]	; 0x30
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001940:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001952:	2309      	movs	r3, #9
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	482b      	ldr	r0, [pc, #172]	; (8001a0c <HAL_CAN_MspInit+0x138>)
 800195e:	f003 fbfb 	bl	8005158 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001962:	e048      	b.n	80019f6 <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <HAL_CAN_MspInit+0x13c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d143      	bne.n	80019f6 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 8001978:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_CAN_MspInit+0x130>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <HAL_CAN_MspInit+0x130>)
 8001992:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_CAN_MspInit+0x130>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d10d      	bne.n	80019b8 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 80019a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	6313      	str	r3, [r2, #48]	; 0x30
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_CAN_MspInit+0x134>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80019e6:	2309      	movs	r3, #9
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <HAL_CAN_MspInit+0x140>)
 80019f2:	f003 fbb1 	bl	8005158 <HAL_GPIO_Init>
}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	; 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40006400 	.word	0x40006400
 8001a04:	20000180 	.word	0x20000180
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40006800 	.word	0x40006800
 8001a14:	40020400 	.word	0x40020400

08001a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_DMA_Init+0x3c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <MX_DMA_Init+0x3c>)
 8001a28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_DMA_Init+0x3c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	203b      	movs	r0, #59	; 0x3b
 8001a40:	f002 ffc1 	bl	80049c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a44:	203b      	movs	r0, #59	; 0x3b
 8001a46:	f002 ffda 	bl	80049fe <HAL_NVIC_EnableIRQ>

}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a6b      	ldr	r2, [pc, #428]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b69      	ldr	r3, [pc, #420]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a64      	ldr	r2, [pc, #400]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b62      	ldr	r3, [pc, #392]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <MX_GPIO_Init+0x1cc>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f248 0150 	movw	r1, #32848	; 0x8050
 8001b00:	4849      	ldr	r0, [pc, #292]	; (8001c28 <MX_GPIO_Init+0x1d0>)
 8001b02:	f003 fcdd 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2130      	movs	r1, #48	; 0x30
 8001b0a:	4848      	ldr	r0, [pc, #288]	; (8001c2c <MX_GPIO_Init+0x1d4>)
 8001b0c:	f003 fcd8 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 8001b10:	2200      	movs	r2, #0
 8001b12:	f248 01f3 	movw	r1, #33011	; 0x80f3
 8001b16:	4846      	ldr	r0, [pc, #280]	; (8001c30 <MX_GPIO_Init+0x1d8>)
 8001b18:	f003 fcd2 	bl	80054c0 <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PC0 PC1 PC2
                           PC3 PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAM_D7_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001b1c:	f643 73cf 	movw	r3, #16335	; 0x3fcf
 8001b20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|CAM_D0_Pin|CAM_D1_Pin|CAM_D2_Pin
                          |CAM_D3_Pin|CAM_D4_Pin|CAM_D5_Pin|CAM_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	483e      	ldr	r0, [pc, #248]	; (8001c2c <MX_GPIO_Init+0x1d4>)
 8001b32:	f003 fb11 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_HREF_Pin|CAM_RRST_Pin;
 8001b36:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4837      	ldr	r0, [pc, #220]	; (8001c28 <MX_GPIO_Init+0x1d0>)
 8001b4c:	f003 fb04 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin;
 8001b50:	f248 0350 	movw	r3, #32848	; 0x8050
 8001b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	482f      	ldr	r0, [pc, #188]	; (8001c28 <MX_GPIO_Init+0x1d0>)
 8001b6a:	f003 faf5 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8001b6e:	2330      	movs	r3, #48	; 0x30
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4829      	ldr	r0, [pc, #164]	; (8001c2c <MX_GPIO_Init+0x1d4>)
 8001b86:	f003 fae7 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 8001b8a:	f248 03f3 	movw	r3, #33011	; 0x80f3
 8001b8e:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4823      	ldr	r0, [pc, #140]	; (8001c30 <MX_GPIO_Init+0x1d8>)
 8001ba4:	f003 fad8 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481d      	ldr	r0, [pc, #116]	; (8001c30 <MX_GPIO_Init+0x1d8>)
 8001bbc:	f003 facc 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 8001bc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4816      	ldr	r0, [pc, #88]	; (8001c30 <MX_GPIO_Init+0x1d8>)
 8001bd8:	f003 fabe 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4811      	ldr	r0, [pc, #68]	; (8001c34 <MX_GPIO_Init+0x1dc>)
 8001bf0:	f003 fab2 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	480a      	ldr	r0, [pc, #40]	; (8001c30 <MX_GPIO_Init+0x1d8>)
 8001c08:	f003 faa6 	bl	8005158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2028      	movs	r0, #40	; 0x28
 8001c12:	f002 fed8 	bl	80049c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c16:	2028      	movs	r0, #40	; 0x28
 8001c18:	f002 fef1 	bl	80049fe <HAL_NVIC_EnableIRQ>

}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020c00 	.word	0x40020c00

08001c38 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c3e:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <MX_I2C2_Init+0x54>)
 8001c40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_I2C2_Init+0x58>)
 8001c46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <MX_I2C2_Init+0x50>)
 8001c76:	f003 fc55 	bl	8005524 <HAL_I2C_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c80:	f001 fdfc 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000184 	.word	0x20000184
 8001c8c:	40005800 	.word	0x40005800
 8001c90:	000186a0 	.word	0x000186a0

08001c94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_I2C_MspInit+0x84>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12c      	bne.n	8001d10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = CAM_SCL_Pin|CAM_SDA_Pin;
 8001cd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd8:	2312      	movs	r3, #18
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	480c      	ldr	r0, [pc, #48]	; (8001d20 <HAL_I2C_MspInit+0x8c>)
 8001cf0:	f003 fa32 	bl	8005158 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d02:	6413      	str	r3, [r2, #64]	; 0x40
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d10:	bf00      	nop
 8001d12:	3728      	adds	r7, #40	; 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40005800 	.word	0x40005800
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020400 	.word	0x40020400

08001d24 <tft_char_is_changed>:
/* Macro */
#define TFT_XY(x, y) ((y)*char_max_x + (x))  // 2D to 1D index

// Useful function to improve performance
static inline bool tft_char_is_changed(const TFTBuffer buf, uint8_t x,
        uint8_t y) {
 8001d24:	b490      	push	{r4, r7}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
 8001d30:	4613      	mov	r3, r2
 8001d32:	70bb      	strb	r3, [r7, #2]
    const uint16_t idx = TFT_XY(x, y);
 8001d34:	78bb      	ldrb	r3, [r7, #2]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	4b3e      	ldr	r3, [pc, #248]	; (8001e34 <tft_char_is_changed+0x110>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	fb12 f303 	smulbb	r3, r2, r3
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	81fb      	strh	r3, [r7, #14]
    return ((buf->text_buf[buf->curr_screen][idx]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	89fa      	ldrh	r2, [r7, #14]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4603      	mov	r3, r0
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4403      	add	r3, r0
 8001d5c:	015b      	lsls	r3, r3, #5
 8001d5e:	440b      	add	r3, r1
 8001d60:	4413      	add	r3, r2
 8001d62:	3301      	adds	r3, #1
 8001d64:	781a      	ldrb	r2, [r3, #0]
            != buf->text_buf[!buf->curr_screen][idx])
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461c      	mov	r4, r3
 8001d76:	89f9      	ldrh	r1, [r7, #14]
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4423      	add	r3, r4
 8001d80:	015b      	lsls	r3, r3, #5
 8001d82:	4403      	add	r3, r0
 8001d84:	440b      	add	r3, r1
 8001d86:	3301      	adds	r3, #1
 8001d88:	781b      	ldrb	r3, [r3, #0]
            || (buf->text_color_buf[buf->curr_screen][idx]
                    != buf->text_color_buf[!buf->curr_screen][idx])
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d147      	bne.n	8001e1e <tft_char_is_changed+0xfa>
            || (buf->text_color_buf[buf->curr_screen][idx]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	89f9      	ldrh	r1, [r7, #14]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4603      	mov	r3, r0
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4403      	add	r3, r0
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	440b      	add	r3, r1
 8001da2:	33a0      	adds	r3, #160	; 0xa0
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	885a      	ldrh	r2, [r3, #2]
                    != buf->text_color_buf[!buf->curr_screen][idx])
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461c      	mov	r4, r3
 8001dba:	89f8      	ldrh	r0, [r7, #14]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4423      	add	r3, r4
 8001dc4:	015b      	lsls	r3, r3, #5
 8001dc6:	4403      	add	r3, r0
 8001dc8:	33a0      	adds	r3, #160	; 0xa0
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	440b      	add	r3, r1
 8001dce:	885b      	ldrh	r3, [r3, #2]
            || (buf->text_color_buf[buf->curr_screen][idx]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d124      	bne.n	8001e1e <tft_char_is_changed+0xfa>
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	89f9      	ldrh	r1, [r7, #14]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4603      	mov	r3, r0
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4403      	add	r3, r0
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	440b      	add	r3, r1
 8001de8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	885a      	ldrh	r2, [r3, #2]
                    != buf->bg_color_buf[!buf->curr_screen][idx]));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf0c      	ite	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2300      	movne	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461c      	mov	r4, r3
 8001e02:	89f8      	ldrh	r0, [r7, #14]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4623      	mov	r3, r4
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4423      	add	r3, r4
 8001e0c:	015b      	lsls	r3, r3, #5
 8001e0e:	4403      	add	r3, r0
 8001e10:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	440b      	add	r3, r1
 8001e18:	885b      	ldrh	r3, [r3, #2]
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <tft_char_is_changed+0xfe>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <tft_char_is_changed+0x100>
 8001e22:	2300      	movs	r3, #0
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc90      	pop	{r4, r7}
 8001e32:	4770      	bx	lr
 8001e34:	200001e1 	.word	0x200001e1

08001e38 <itos>:
 * @param      data  The string to write to
 * @param[in]  i     The signed integer to convert
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* itos(char *data, int32_t i) {
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
    if (i < 0) {
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	da07      	bge.n	8001e58 <itos+0x20>
        i = -i;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	603b      	str	r3, [r7, #0]
        *data++ = '-';
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	222d      	movs	r2, #45	; 0x2d
 8001e56:	701a      	strb	r2, [r3, #0]
    }
    char buf[14] = { 0 };
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	811a      	strh	r2, [r3, #8]
    char *ptr = &buf[1];
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
    do {
        *ptr++ = '0' + (i % 10);
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <itos+0xa8>)
 8001e74:	fb83 1302 	smull	r1, r3, r3, r2
 8001e78:	1099      	asrs	r1, r3, #2
 8001e7a:	17d3      	asrs	r3, r2, #31
 8001e7c:	1ac9      	subs	r1, r1, r3
 8001e7e:	460b      	mov	r3, r1
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	1ad1      	subs	r1, r2, r3
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	1c59      	adds	r1, r3, #1
 8001e8e:	61f9      	str	r1, [r7, #28]
 8001e90:	3230      	adds	r2, #48	; 0x30
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <itos+0xa8>)
 8001e9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e9e:	1092      	asrs	r2, r2, #2
 8001ea0:	17db      	asrs	r3, r3, #31
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	603b      	str	r3, [r7, #0]
    } while (i);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e1      	bne.n	8001e70 <itos+0x38>
    ptr--;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
    while (*ptr) {
 8001eb2:	e007      	b.n	8001ec4 <itos+0x8c>
        *data++ = *ptr--;
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	1e53      	subs	r3, r2, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	1c59      	adds	r1, r3, #1
 8001ebe:	6079      	str	r1, [r7, #4]
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f3      	bne.n	8001eb4 <itos+0x7c>
    }
    *data = '\0';
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
    return data;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3724      	adds	r7, #36	; 0x24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	66666667 	.word	0x66666667

08001ee4 <utos0>:
 * @param[in]  i       The unsigned integer
 * @param[in]  digits  The number of digits
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* utos0(char *data, uint32_t i, uint32_t digits) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b08d      	sub	sp, #52	; 0x34
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
    char buf[20] = { 0 };
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	f107 0318 	add.w	r3, r7, #24
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
    char *ptr = &buf[1];
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	3301      	adds	r3, #1
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    digits--;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	607b      	str	r3, [r7, #4]
    uint32_t n = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
        *ptr++ = '0' + (i % 10);
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <utos0+0xb8>)
 8001f18:	fba3 2301 	umull	r2, r3, r3, r1
 8001f1c:	08da      	lsrs	r2, r3, #3
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	1aca      	subs	r2, r1, r3
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	1c59      	adds	r1, r3, #1
 8001f2e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001f30:	3230      	adds	r2, #48	; 0x30
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <utos0+0xb8>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	08db      	lsrs	r3, r3, #3
 8001f40:	60bb      	str	r3, [r7, #8]
        n++;
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	3301      	adds	r3, #1
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (i);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1e2      	bne.n	8001f14 <utos0+0x30>
    ptr--;
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	3b01      	subs	r3, #1
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (n++ <= digits) {
 8001f54:	e004      	b.n	8001f60 <utos0+0x7c>
        *data++ = '0';
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	60fa      	str	r2, [r7, #12]
 8001f5c:	2230      	movs	r2, #48	; 0x30
 8001f5e:	701a      	strb	r2, [r3, #0]
    while (n++ <= digits) {
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d2f4      	bcs.n	8001f56 <utos0+0x72>
    }
    while (*ptr) {
 8001f6c:	e007      	b.n	8001f7e <utos0+0x9a>
        *data++ = *ptr--;
 8001f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f70:	1e53      	subs	r3, r2, #1
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	60f9      	str	r1, [r7, #12]
 8001f7a:	7812      	ldrb	r2, [r2, #0]
 8001f7c:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f3      	bne.n	8001f6e <utos0+0x8a>
    }
    *data = '\0';
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
    return data;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3734      	adds	r7, #52	; 0x34
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	cccccccd 	.word	0xcccccccd

08001fa0 <ftos>:
 * @param[in]  i       The float
 * @param[in]  digits  The number of decimal places
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* ftos(char *data, float a, uint32_t dp) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fac:	6079      	str	r1, [r7, #4]
    int32_t i = a;
 8001fae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb6:	ee17 3a90 	vmov	r3, s15
 8001fba:	61fb      	str	r3, [r7, #28]
    if (a < 0) {
 8001fbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	d515      	bpl.n	8001ff6 <ftos+0x56>
        *data++ = '-';
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	60fa      	str	r2, [r7, #12]
 8001fd0:	222d      	movs	r2, #45	; 0x2d
 8001fd2:	701a      	strb	r2, [r3, #0]
        i = -i;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	61fb      	str	r3, [r7, #28]
        a = -a - i;
 8001fda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fde:	eeb1 7a67 	vneg.f32	s14, s15
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff0:	edc7 7a02 	vstr	s15, [r7, #8]
 8001ff4:	e00a      	b.n	800200c <ftos+0x6c>
    } else {
        a = a - i;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002000:	ed97 7a02 	vldr	s14, [r7, #8]
 8002004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002008:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    data = itos(data, i);
 800200c:	69f9      	ldr	r1, [r7, #28]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff ff12 	bl	8001e38 <itos>
 8002014:	60f8      	str	r0, [r7, #12]
    *data++ = '.';
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	60fa      	str	r2, [r7, #12]
 800201c:	222e      	movs	r2, #46	; 0x2e
 800201e:	701a      	strb	r2, [r3, #0]
    float d = a;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	61bb      	str	r3, [r7, #24]
    uint32_t __dp = dp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	617b      	str	r3, [r7, #20]
    while (dp--) {
 8002028:	e007      	b.n	800203a <ftos+0x9a>
        d *= 10;
 800202a:	edd7 7a06 	vldr	s15, [r7, #24]
 800202e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002036:	edc7 7a06 	vstr	s15, [r7, #24]
    while (dp--) {
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	1e5a      	subs	r2, r3, #1
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f2      	bne.n	800202a <ftos+0x8a>
    }
    if (__dp != 0)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00e      	beq.n	8002068 <ftos+0xc8>
        data = utos0(data, (uint32_t) (d + 0.5f), __dp);
 800204a:	edd7 7a06 	vldr	s15, [r7, #24]
 800204e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	ee17 1a90 	vmov	r1, s15
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f7ff ff3f 	bl	8001ee4 <utos0>
 8002066:	60f8      	str	r0, [r7, #12]
    return data;
 8002068:	68fb      	ldr	r3, [r7, #12]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <prints>:
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad) {
 8002072:	b4f0      	push	{r4, r5, r6, r7}
 8002074:	b08a      	sub	sp, #40	; 0x28
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	603b      	str	r3, [r7, #0]
    register int pc = 0, padchar = ' ';
 8002080:	2400      	movs	r4, #0
 8002082:	2320      	movs	r3, #32
 8002084:	4619      	mov	r1, r3

    if (width > 0) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	dd17      	ble.n	80020bc <prints+0x4a>
        register int len = 0;
 800208c:	2500      	movs	r5, #0
        register const char *ptr;
        for (ptr = string; *ptr; ++ptr)
 800208e:	68be      	ldr	r6, [r7, #8]
 8002090:	e001      	b.n	8002096 <prints+0x24>
            ++len;
 8002092:	3501      	adds	r5, #1
        for (ptr = string; *ptr; ++ptr)
 8002094:	3601      	adds	r6, #1
 8002096:	7833      	ldrb	r3, [r6, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1fa      	bne.n	8002092 <prints+0x20>
        if (len >= width)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	429d      	cmp	r5, r3
 80020a0:	db02      	blt.n	80020a8 <prints+0x36>
            width = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e002      	b.n	80020ae <prints+0x3c>
        else
            width -= len;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1b5b      	subs	r3, r3, r5
 80020ac:	607b      	str	r3, [r7, #4]
        if (pad & PAD_ZERO)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <prints+0x4a>
            padchar = '0';
 80020b8:	2330      	movs	r3, #48	; 0x30
 80020ba:	4619      	mov	r1, r3
    }
    if (!(pad & PAD_RIGHT)) {
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d12c      	bne.n	8002120 <prints+0xae>
        for (; width > 0; --width) {
 80020c6:	e012      	b.n	80020ee <prints+0x7c>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
 80020cc:	460b      	mov	r3, r1
 80020ce:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6a3a      	ldr	r2, [r7, #32]
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]
    ++(*str);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	601a      	str	r2, [r3, #0]
}
 80020e4:	bf00      	nop
            printchar(out, padchar);
            ++pc;
 80020e6:	3401      	adds	r4, #1
        for (; width > 0; --width) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	dce9      	bgt.n	80020c8 <prints+0x56>
        }
    }
    for (; *string; ++string) {
 80020f4:	e014      	b.n	8002120 <prints+0xae>
        printchar(out, *string);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]
    ++(*str);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
        ++pc;
 8002118:	3401      	adds	r4, #1
    for (; *string; ++string) {
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3301      	adds	r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1e6      	bne.n	80020f6 <prints+0x84>
    }
    for (; width > 0; --width) {
 8002128:	e012      	b.n	8002150 <prints+0xde>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	460b      	mov	r3, r1
 8002130:	613b      	str	r3, [r7, #16]
    **str = (char) c;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]
    ++(*str);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	601a      	str	r2, [r3, #0]
}
 8002146:	bf00      	nop
        printchar(out, padchar);
        ++pc;
 8002148:	3401      	adds	r4, #1
    for (; width > 0; --width) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3b01      	subs	r3, #1
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	dce9      	bgt.n	800212a <prints+0xb8>
    }

    return pc;
 8002156:	4623      	mov	r3, r4
}
 8002158:	4618      	mov	r0, r3
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bcf0      	pop	{r4, r5, r6, r7}
 8002160:	4770      	bx	lr

08002162 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad,
        int letbase) {
 8002162:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002166:	b08b      	sub	sp, #44	; 0x2c
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
    char print_buf[PRINT_BUF_LEN];
    register char *s;
    register int t, neg = 0, pc = 0;
 8002172:	f04f 0900 	mov.w	r9, #0
 8002176:	2600      	movs	r6, #0
    register unsigned int u = (unsigned int) i;
 8002178:	68bd      	ldr	r5, [r7, #8]

    if (i == 0) {
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10c      	bne.n	800219a <printi+0x38>
        print_buf[0] = '0';
 8002180:	2330      	movs	r3, #48	; 0x30
 8002182:	753b      	strb	r3, [r7, #20]
        print_buf[1] = '\0';
 8002184:	2300      	movs	r3, #0
 8002186:	757b      	strb	r3, [r7, #21]
        return prints(out, print_buf, width, pad);
 8002188:	f107 0114 	add.w	r1, r7, #20
 800218c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800218e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f7ff ff6e 	bl	8002072 <prints>
 8002196:	4603      	mov	r3, r0
 8002198:	e055      	b.n	8002246 <printi+0xe4>
    }

    if (sg && b == 10 && i < 0) {
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <printi+0x54>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b0a      	cmp	r3, #10
 80021a4:	d107      	bne.n	80021b6 <printi+0x54>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	da04      	bge.n	80021b6 <printi+0x54>
        neg = 1;
 80021ac:	f04f 0901 	mov.w	r9, #1
        u = (unsigned int) -i;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	425b      	negs	r3, r3
 80021b4:	461d      	mov	r5, r3
    }

    s = print_buf + PRINT_BUF_LEN - 1;
 80021b6:	f107 0414 	add.w	r4, r7, #20
 80021ba:	340b      	adds	r4, #11
    *s = '\0';
 80021bc:	2300      	movs	r3, #0
 80021be:	7023      	strb	r3, [r4, #0]

    while (u) {
 80021c0:	e015      	b.n	80021ee <printi+0x8c>
        t = (unsigned int) u % b;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	fbb5 f2f3 	udiv	r2, r5, r3
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	1aeb      	subs	r3, r5, r3
 80021ce:	4698      	mov	r8, r3
        if (t >= 10)
 80021d0:	f1b8 0f09 	cmp.w	r8, #9
 80021d4:	dd02      	ble.n	80021dc <printi+0x7a>
            t += letbase - '0' - 10;
 80021d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d8:	3b3a      	subs	r3, #58	; 0x3a
 80021da:	4498      	add	r8, r3
        *--s = (char) (t + '0');
 80021dc:	fa5f f388 	uxtb.w	r3, r8
 80021e0:	3c01      	subs	r4, #1
 80021e2:	3330      	adds	r3, #48	; 0x30
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	7023      	strb	r3, [r4, #0]
        u /= b;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	fbb5 f5f3 	udiv	r5, r5, r3
    while (u) {
 80021ee:	2d00      	cmp	r5, #0
 80021f0:	d1e7      	bne.n	80021c2 <printi+0x60>
    }

    if (neg) {
 80021f2:	f1b9 0f00 	cmp.w	r9, #0
 80021f6:	d01e      	beq.n	8002236 <printi+0xd4>
        if (width && (pad & PAD_ZERO)) {
 80021f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d018      	beq.n	8002230 <printi+0xce>
 80021fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <printi+0xce>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
 800220c:	232d      	movs	r3, #45	; 0x2d
 800220e:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
    ++(*str);
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	601a      	str	r2, [r3, #0]
}
 8002224:	bf00      	nop
            printchar(out, '-');
            ++pc;
 8002226:	3601      	adds	r6, #1
            --width;
 8002228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222a:	3b01      	subs	r3, #1
 800222c:	64bb      	str	r3, [r7, #72]	; 0x48
 800222e:	e002      	b.n	8002236 <printi+0xd4>
        } else {
            *--s = '-';
 8002230:	3c01      	subs	r4, #1
 8002232:	232d      	movs	r3, #45	; 0x2d
 8002234:	7023      	strb	r3, [r4, #0]
        }
    }

    return pc + prints(out, s, width, pad);
 8002236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800223a:	4621      	mov	r1, r4
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff ff18 	bl	8002072 <prints>
 8002242:	4603      	mov	r3, r0
 8002244:	4433      	add	r3, r6
}
 8002246:	4618      	mov	r0, r3
 8002248:	372c      	adds	r7, #44	; 0x2c
 800224a:	46bd      	mov	sp, r7
 800224c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002250 <printf_>:

static int printf_(char **out, float f, int width, int dp, int pad) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b090      	sub	sp, #64	; 0x40
 8002254:	af00      	add	r7, sp, #0
 8002256:	6178      	str	r0, [r7, #20]
 8002258:	ed87 0a04 	vstr	s0, [r7, #16]
 800225c:	60f9      	str	r1, [r7, #12]
 800225e:	60ba      	str	r2, [r7, #8]
 8002260:	607b      	str	r3, [r7, #4]
    char buf[40] = { 0 };
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	2224      	movs	r2, #36	; 0x24
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f005 fe78 	bl	8007f64 <memset>
    ftos(buf, f, dp);
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	f107 0318 	add.w	r3, r7, #24
 800227a:	4611      	mov	r1, r2
 800227c:	ed97 0a04 	vldr	s0, [r7, #16]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fe8d 	bl	8001fa0 <ftos>
    return prints(out, buf, width, pad);
 8002286:	f107 0118 	add.w	r1, r7, #24
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff feef 	bl	8002072 <prints>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3740      	adds	r7, #64	; 0x40
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <print>:
 * @param out pointer to Output string
 * @param format Format string
 * @param args Arguments
 * @return length of string
 */
static int print(char **out, const char *format, va_list args) {
 80022a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a4:	b08c      	sub	sp, #48	; 0x30
 80022a6:	af04      	add	r7, sp, #16
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
    register int width, pad, dp;
    register int pc = 0;
 80022ae:	2400      	movs	r4, #0
    char scr[2];

    for (; *format != 0; ++format) {
 80022b0:	e109      	b.n	80024c6 <print+0x226>
        if (*format == '%') {
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b25      	cmp	r3, #37	; 0x25
 80022b8:	f040 80ed 	bne.w	8002496 <print+0x1f6>
            ++format;
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	3301      	adds	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
            width = pad = dp = 0;
 80022c2:	f04f 0800 	mov.w	r8, #0
 80022c6:	4646      	mov	r6, r8
 80022c8:	4635      	mov	r5, r6
            if (*format == '\0')
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80ff 	beq.w	80024d2 <print+0x232>
                break;
            if (*format == '%')
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b25      	cmp	r3, #37	; 0x25
 80022da:	f000 80de 	beq.w	800249a <print+0x1fa>
                goto out;
            if (*format == '-') {
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b2d      	cmp	r3, #45	; 0x2d
 80022e4:	d109      	bne.n	80022fa <print+0x5a>
                ++format;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
                pad = PAD_RIGHT;
 80022ec:	2601      	movs	r6, #1
            }
            while (*format == '0') {
 80022ee:	e004      	b.n	80022fa <print+0x5a>
                ++format;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3301      	adds	r3, #1
 80022f4:	60bb      	str	r3, [r7, #8]
                pad |= PAD_ZERO;
 80022f6:	f046 0602 	orr.w	r6, r6, #2
            while (*format == '0') {
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b30      	cmp	r3, #48	; 0x30
 8002300:	d0f6      	beq.n	80022f0 <print+0x50>
            }
            for (; *format >= '0' && *format <= '9'; ++format) {
 8002302:	e00b      	b.n	800231c <print+0x7c>
                width *= 10;
 8002304:	462b      	mov	r3, r5
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	442b      	add	r3, r5
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	461d      	mov	r5, r3
                width += *format - '0';
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	3b30      	subs	r3, #48	; 0x30
 8002314:	441d      	add	r5, r3
            for (; *format >= '0' && *format <= '9'; ++format) {
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3301      	adds	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b2f      	cmp	r3, #47	; 0x2f
 8002322:	d903      	bls.n	800232c <print+0x8c>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b39      	cmp	r3, #57	; 0x39
 800232a:	d9eb      	bls.n	8002304 <print+0x64>
            }
            if (*format == '.') {
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b2e      	cmp	r3, #46	; 0x2e
 8002332:	d117      	bne.n	8002364 <print+0xc4>
                ++format;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3301      	adds	r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
                for (; *format >= '0' && *format <= '9'; ++format) {
 800233a:	e00b      	b.n	8002354 <print+0xb4>
                    dp *= 10;
 800233c:	4643      	mov	r3, r8
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4443      	add	r3, r8
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4698      	mov	r8, r3
                    dp += *format - '0';
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	3b30      	subs	r3, #48	; 0x30
 800234c:	4498      	add	r8, r3
                for (; *format >= '0' && *format <= '9'; ++format) {
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3301      	adds	r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b2f      	cmp	r3, #47	; 0x2f
 800235a:	d903      	bls.n	8002364 <print+0xc4>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b39      	cmp	r3, #57	; 0x39
 8002362:	d9eb      	bls.n	800233c <print+0x9c>
                }
            }
            if (*format == 's') {
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b73      	cmp	r3, #115	; 0x73
 800236a:	d112      	bne.n	8002392 <print+0xf2>
                register char *s = (char*) va_arg(args, int);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	1d1a      	adds	r2, r3, #4
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4698      	mov	r8, r3
                pc += prints(out, s ? s : "(null)", width, pad);
 8002376:	f1b8 0f00 	cmp.w	r8, #0
 800237a:	d001      	beq.n	8002380 <print+0xe0>
 800237c:	4641      	mov	r1, r8
 800237e:	e000      	b.n	8002382 <print+0xe2>
 8002380:	4957      	ldr	r1, [pc, #348]	; (80024e0 <print+0x240>)
 8002382:	4633      	mov	r3, r6
 8002384:	462a      	mov	r2, r5
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff fe73 	bl	8002072 <prints>
 800238c:	4603      	mov	r3, r0
 800238e:	441c      	add	r4, r3
                continue;
 8002390:	e096      	b.n	80024c0 <print+0x220>
            }
            if (*format == 'd') {
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d10f      	bne.n	80023ba <print+0x11a>
                pc += printi(out, va_arg(args, int), 10, 1, width, pad, 'a');
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1d1a      	adds	r2, r3, #4
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	6819      	ldr	r1, [r3, #0]
 80023a2:	2361      	movs	r3, #97	; 0x61
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	9601      	str	r6, [sp, #4]
 80023a8:	9500      	str	r5, [sp, #0]
 80023aa:	2301      	movs	r3, #1
 80023ac:	220a      	movs	r2, #10
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff fed7 	bl	8002162 <printi>
 80023b4:	4603      	mov	r3, r0
 80023b6:	441c      	add	r4, r3
                continue;
 80023b8:	e082      	b.n	80024c0 <print+0x220>
            }
            if (*format == 'x') {
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b78      	cmp	r3, #120	; 0x78
 80023c0:	d10f      	bne.n	80023e2 <print+0x142>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'a');
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	1d1a      	adds	r2, r3, #4
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	2361      	movs	r3, #97	; 0x61
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	9601      	str	r6, [sp, #4]
 80023d0:	9500      	str	r5, [sp, #0]
 80023d2:	2300      	movs	r3, #0
 80023d4:	2210      	movs	r2, #16
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff fec3 	bl	8002162 <printi>
 80023dc:	4603      	mov	r3, r0
 80023de:	441c      	add	r4, r3
                continue;
 80023e0:	e06e      	b.n	80024c0 <print+0x220>
            }
            if (*format == 'X') {
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b58      	cmp	r3, #88	; 0x58
 80023e8:	d10f      	bne.n	800240a <print+0x16a>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'A');
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	1d1a      	adds	r2, r3, #4
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	2341      	movs	r3, #65	; 0x41
 80023f4:	9302      	str	r3, [sp, #8]
 80023f6:	9601      	str	r6, [sp, #4]
 80023f8:	9500      	str	r5, [sp, #0]
 80023fa:	2300      	movs	r3, #0
 80023fc:	2210      	movs	r2, #16
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7ff feaf 	bl	8002162 <printi>
 8002404:	4603      	mov	r3, r0
 8002406:	441c      	add	r4, r3
                continue;
 8002408:	e05a      	b.n	80024c0 <print+0x220>
            }
            if (*format == 'u') {
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b75      	cmp	r3, #117	; 0x75
 8002410:	d10f      	bne.n	8002432 <print+0x192>
                pc += printi(out, va_arg(args, int), 10, 0, width, pad, 'a');
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	1d1a      	adds	r2, r3, #4
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	2361      	movs	r3, #97	; 0x61
 800241c:	9302      	str	r3, [sp, #8]
 800241e:	9601      	str	r6, [sp, #4]
 8002420:	9500      	str	r5, [sp, #0]
 8002422:	2300      	movs	r3, #0
 8002424:	220a      	movs	r2, #10
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f7ff fe9b 	bl	8002162 <printi>
 800242c:	4603      	mov	r3, r0
 800242e:	441c      	add	r4, r3
                continue;
 8002430:	e046      	b.n	80024c0 <print+0x220>
            }
            if (*format == 'c') {
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b63      	cmp	r3, #99	; 0x63
 8002438:	d111      	bne.n	800245e <print+0x1be>
                /* char are converted to int then pushed on the stack */
                scr[0] = (char) va_arg(args, int);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	1d1a      	adds	r2, r3, #4
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	753b      	strb	r3, [r7, #20]
                scr[1] = '\0';
 8002446:	2300      	movs	r3, #0
 8002448:	757b      	strb	r3, [r7, #21]
                pc += prints(out, scr, width, pad);
 800244a:	f107 0114 	add.w	r1, r7, #20
 800244e:	4633      	mov	r3, r6
 8002450:	462a      	mov	r2, r5
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7ff fe0d 	bl	8002072 <prints>
 8002458:	4603      	mov	r3, r0
 800245a:	441c      	add	r4, r3
                continue;
 800245c:	e030      	b.n	80024c0 <print+0x220>
            }
            if (*format == 'f') {
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b66      	cmp	r3, #102	; 0x66
 8002464:	d12c      	bne.n	80024c0 <print+0x220>
                pc += printf_(out, va_arg(args, double), width, dp, pad);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3307      	adds	r3, #7
 800246a:	f023 0307 	bic.w	r3, r3, #7
 800246e:	f103 0208 	add.w	r2, r3, #8
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fb30 	bl	8000ae0 <__aeabi_d2f>
 8002480:	4633      	mov	r3, r6
 8002482:	4642      	mov	r2, r8
 8002484:	4629      	mov	r1, r5
 8002486:	ee00 0a10 	vmov	s0, r0
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff fee0 	bl	8002250 <printf_>
 8002490:	4603      	mov	r3, r0
 8002492:	441c      	add	r4, r3
                continue;
 8002494:	e014      	b.n	80024c0 <print+0x220>
            }
        } else {
            out: printchar(out, *format);
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <print+0x1fc>
                goto out;
 800249a:	bf00      	nop
            out: printchar(out, *format);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]
    ++(*str);
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	601a      	str	r2, [r3, #0]
}
 80024bc:	bf00      	nop
            ++pc;
 80024be:	3401      	adds	r4, #1
    for (; *format != 0; ++format) {
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f47f aef1 	bne.w	80022b2 <print+0x12>
 80024d0:	e000      	b.n	80024d4 <print+0x234>
                break;
 80024d2:	bf00      	nop
        }
    }
    va_end(args);
    return pc;
 80024d4:	4623      	mov	r3, r4
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024e0:	08008e20 	.word	0x08008e20

080024e4 <write_command>:
uint8_t buf_ptr = 0;
static uint8_t tft_dma_bufs[2][TFT_DMA_BUF_SIZE];
#define curr_tft_dma_buf tft_dma_bufs[buf_ptr]

/* TFT SPI communication - with MCU */
static inline void write_command(uint8_t command) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 80024ee:	bf00      	nop
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <write_command+0x40>)
 80024f2:	f004 f98d 	bl	8006810 <HAL_SPI_GetState>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d1f9      	bne.n	80024f0 <write_command+0xc>
        // wait for the spi to be ready
        ;

    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET); // Data-Command Pin 0-Command 1-Data
 80024fc:	2200      	movs	r2, #0
 80024fe:	2110      	movs	r1, #16
 8002500:	4809      	ldr	r0, [pc, #36]	; (8002528 <write_command+0x44>)
 8002502:	f002 ffdd 	bl	80054c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) &command, 1, 1);
 8002506:	1df9      	adds	r1, r7, #7
 8002508:	2301      	movs	r3, #1
 800250a:	2201      	movs	r2, #1
 800250c:	4805      	ldr	r0, [pc, #20]	; (8002524 <write_command+0x40>)
 800250e:	f003 fe6e 	bl	80061ee <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8002512:	2201      	movs	r2, #1
 8002514:	2110      	movs	r1, #16
 8002516:	4804      	ldr	r0, [pc, #16]	; (8002528 <write_command+0x44>)
 8002518:	f002 ffd2 	bl	80054c0 <HAL_GPIO_WritePin>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20005830 	.word	0x20005830
 8002528:	40020800 	.word	0x40020800

0800252c <write_data>:
static inline void write_data(uint8_t *data, uint16_t size) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) data, size, 1);
 8002538:	887a      	ldrh	r2, [r7, #2]
 800253a:	2301      	movs	r3, #1
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4803      	ldr	r0, [pc, #12]	; (800254c <write_data+0x20>)
 8002540:	f003 fe55 	bl	80061ee <HAL_SPI_Transmit>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20005830 	.word	0x20005830

08002550 <write_many>:
static inline void write_many(uint8_t command, uint8_t *data, uint16_t size) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
 800255c:	4613      	mov	r3, r2
 800255e:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ffbe 	bl	80024e4 <write_command>
    write_data(data, size);
 8002568:	88bb      	ldrh	r3, [r7, #4]
 800256a:	4619      	mov	r1, r3
 800256c:	6838      	ldr	r0, [r7, #0]
 800256e:	f7ff ffdd 	bl	800252c <write_data>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <write_many_dma>:
static inline void write_many_dma(uint8_t command, uint8_t *data, uint16_t size) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
 8002588:	4613      	mov	r3, r2
 800258a:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ffa8 	bl	80024e4 <write_command>
    HAL_SPI_Transmit_DMA(&TFT_SPI, (uint8_t*) data, size);
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	461a      	mov	r2, r3
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	4803      	ldr	r0, [pc, #12]	; (80025a8 <write_many_dma+0x2c>)
 800259c:	f003 ff64 	bl	8006468 <HAL_SPI_Transmit_DMA>
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20005830 	.word	0x20005830

080025ac <write_byte>:
static inline void write_byte(uint8_t command, uint8_t data) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	460a      	mov	r2, r1
 80025b6:	71fb      	strb	r3, [r7, #7]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71bb      	strb	r3, [r7, #6]
    write_command(command);
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff90 	bl	80024e4 <write_command>
    write_data(&data, 1);
 80025c4:	1dbb      	adds	r3, r7, #6
 80025c6:	2101      	movs	r1, #1
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ffaf 	bl	800252c <write_data>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <write_2hword>:
static inline void write_2hword(uint8_t command, uint16_t a, uint16_t b) {
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	460b      	mov	r3, r1
 80025e2:	80bb      	strh	r3, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	807b      	strh	r3, [r7, #2]
    write_command(command);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff7a 	bl	80024e4 <write_command>
    uint8_t buf[4] = { a >> 8, a & 0xFF, b >> 8, b & 0xFF };
 80025f0:	88bb      	ldrh	r3, [r7, #4]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	733b      	strb	r3, [r7, #12]
 80025fa:	88bb      	ldrh	r3, [r7, #4]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	737b      	strb	r3, [r7, #13]
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	b29b      	uxth	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	73bb      	strb	r3, [r7, #14]
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	73fb      	strb	r3, [r7, #15]
    write_data(buf, 4);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	2104      	movs	r1, #4
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff88 	bl	800252c <write_data>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <tft_clear>:

/**
 * @brief Clear the whole text buffer
 *
 */
static inline void tft_clear(void) {
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 800262a:	2300      	movs	r3, #0
 800262c:	71fb      	strb	r3, [r7, #7]
 800262e:	e023      	b.n	8002678 <tft_clear+0x54>
        for (uint8_t x = 0; x < char_max_x; x++) {
 8002630:	2300      	movs	r3, #0
 8002632:	71bb      	strb	r3, [r7, #6]
 8002634:	e018      	b.n	8002668 <tft_clear+0x44>
            curr_text_buf[TFT_XY(x, y)] = ' ';
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <tft_clear+0x6c>)
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <tft_clear+0x6c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	4a13      	ldr	r2, [pc, #76]	; (8002694 <tft_clear+0x70>)
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	fb03 f202 	mul.w	r2, r3, r2
 800264c:	79bb      	ldrb	r3, [r7, #6]
 800264e:	441a      	add	r2, r3
 8002650:	4603      	mov	r3, r0
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4403      	add	r3, r0
 8002656:	015b      	lsls	r3, r3, #5
 8002658:	440b      	add	r3, r1
 800265a:	4413      	add	r3, r2
 800265c:	3301      	adds	r3, #1
 800265e:	2220      	movs	r2, #32
 8002660:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < char_max_x; x++) {
 8002662:	79bb      	ldrb	r3, [r7, #6]
 8002664:	3301      	adds	r3, #1
 8002666:	71bb      	strb	r3, [r7, #6]
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <tft_clear+0x70>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	79ba      	ldrb	r2, [r7, #6]
 800266e:	429a      	cmp	r2, r3
 8002670:	d3e1      	bcc.n	8002636 <tft_clear+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	3301      	adds	r3, #1
 8002676:	71fb      	strb	r3, [r7, #7]
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <tft_clear+0x74>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	79fa      	ldrb	r2, [r7, #7]
 800267e:	429a      	cmp	r2, r3
 8002680:	d3d6      	bcc.n	8002630 <tft_clear+0xc>
        }
    }
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	2000009c 	.word	0x2000009c
 8002694:	200001e1 	.word	0x200001e1
 8002698:	200001e2 	.word	0x200001e2

0800269c <tft_clear_full>:

/**
 * @brief Clear the whole text buffer and color buffers
 *
 */
static inline void tft_clear_full(void) {
 800269c:	b490      	push	{r4, r7}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 80026a2:	2300      	movs	r3, #0
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	e050      	b.n	800274a <tft_clear_full+0xae>
        for (uint8_t x = 0; x < char_max_x; x++) {
 80026a8:	2300      	movs	r3, #0
 80026aa:	71bb      	strb	r3, [r7, #6]
 80026ac:	e045      	b.n	800273a <tft_clear_full+0x9e>
            uint16_t idx = TFT_XY(x, y);
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <tft_clear_full+0xc4>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	fb12 f303 	smulbb	r3, r2, r3
 80026bc:	b29a      	uxth	r2, r3
 80026be:	79bb      	ldrb	r3, [r7, #6]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	80bb      	strh	r3, [r7, #4]
            curr_text_buf[idx] = ' ';
 80026c6:	4b27      	ldr	r3, [pc, #156]	; (8002764 <tft_clear_full+0xc8>)
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <tft_clear_full+0xc8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	88ba      	ldrh	r2, [r7, #4]
 80026d4:	4603      	mov	r3, r0
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4403      	add	r3, r0
 80026da:	015b      	lsls	r3, r3, #5
 80026dc:	440b      	add	r3, r1
 80026de:	4413      	add	r3, r2
 80026e0:	3301      	adds	r3, #1
 80026e2:	2220      	movs	r2, #32
 80026e4:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[idx] = curr_text_color;
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <tft_clear_full+0xc8>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <tft_clear_full+0xc8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	88b9      	ldrh	r1, [r7, #4]
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <tft_clear_full+0xcc>)
 80026f6:	881c      	ldrh	r4, [r3, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4403      	add	r3, r0
 80026fe:	015b      	lsls	r3, r3, #5
 8002700:	440b      	add	r3, r1
 8002702:	33a0      	adds	r3, #160	; 0xa0
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	4622      	mov	r2, r4
 800270a:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[idx] = curr_bg_color;
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <tft_clear_full+0xc8>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <tft_clear_full+0xc8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	88b9      	ldrh	r1, [r7, #4]
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <tft_clear_full+0xd0>)
 800271c:	881c      	ldrh	r4, [r3, #0]
 800271e:	4603      	mov	r3, r0
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4403      	add	r3, r0
 8002724:	015b      	lsls	r3, r3, #5
 8002726:	440b      	add	r3, r1
 8002728:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	4622      	mov	r2, r4
 8002732:	805a      	strh	r2, [r3, #2]
        for (uint8_t x = 0; x < char_max_x; x++) {
 8002734:	79bb      	ldrb	r3, [r7, #6]
 8002736:	3301      	adds	r3, #1
 8002738:	71bb      	strb	r3, [r7, #6]
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <tft_clear_full+0xc4>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	79ba      	ldrb	r2, [r7, #6]
 8002740:	429a      	cmp	r2, r3
 8002742:	d3b4      	bcc.n	80026ae <tft_clear_full+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	3301      	adds	r3, #1
 8002748:	71fb      	strb	r3, [r7, #7]
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <tft_clear_full+0xd4>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	79fa      	ldrb	r2, [r7, #7]
 8002750:	429a      	cmp	r2, r3
 8002752:	d3a9      	bcc.n	80026a8 <tft_clear_full+0xc>
        }
    }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bc90      	pop	{r4, r7}
 800275e:	4770      	bx	lr
 8002760:	200001e1 	.word	0x200001e1
 8002764:	2000009c 	.word	0x2000009c
 8002768:	200001dc 	.word	0x200001dc
 800276c:	200001d8 	.word	0x200001d8
 8002770:	200001e2 	.word	0x200001e2

08002774 <tft_set_region>:

static inline void tft_set_region(uint16_t x, uint16_t y, uint16_t w,
        uint16_t h) {
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	461a      	mov	r2, r3
 8002782:	4623      	mov	r3, r4
 8002784:	80fb      	strh	r3, [r7, #6]
 8002786:	4603      	mov	r3, r0
 8002788:	80bb      	strh	r3, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	807b      	strh	r3, [r7, #2]
 800278e:	4613      	mov	r3, r2
 8002790:	803b      	strh	r3, [r7, #0]
    uint16_t startx = x;
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	81fb      	strh	r3, [r7, #14]
    uint16_t starty = y;
 8002796:	88bb      	ldrh	r3, [r7, #4]
 8002798:	81bb      	strh	r3, [r7, #12]
    uint16_t endx = x + w;
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	4413      	add	r3, r2
 80027a0:	817b      	strh	r3, [r7, #10]
    uint16_t endy = y + h;
 80027a2:	88ba      	ldrh	r2, [r7, #4]
 80027a4:	883b      	ldrh	r3, [r7, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	813b      	strh	r3, [r7, #8]

#ifdef MODEL_ST7735
    startx += col_shift;
 80027aa:	4b14      	ldr	r3, [pc, #80]	; (80027fc <tft_set_region+0x88>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	4413      	add	r3, r2
 80027b4:	81fb      	strh	r3, [r7, #14]
    starty += row_shift;
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <tft_set_region+0x8c>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	89bb      	ldrh	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	81bb      	strh	r3, [r7, #12]
    endx += col_shift;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <tft_set_region+0x88>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	897b      	ldrh	r3, [r7, #10]
 80027ca:	4413      	add	r3, r2
 80027cc:	817b      	strh	r3, [r7, #10]
    endy += row_shift;
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <tft_set_region+0x8c>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	893b      	ldrh	r3, [r7, #8]
 80027d6:	4413      	add	r3, r2
 80027d8:	813b      	strh	r3, [r7, #8]
#endif

    write_2hword(0x2a, startx, endx);  // Column addr set
 80027da:	897a      	ldrh	r2, [r7, #10]
 80027dc:	89fb      	ldrh	r3, [r7, #14]
 80027de:	4619      	mov	r1, r3
 80027e0:	202a      	movs	r0, #42	; 0x2a
 80027e2:	f7ff fef8 	bl	80025d6 <write_2hword>
    write_2hword(0x2b, starty, endy);  // Row addr set
 80027e6:	893a      	ldrh	r2, [r7, #8]
 80027e8:	89bb      	ldrh	r3, [r7, #12]
 80027ea:	4619      	mov	r1, r3
 80027ec:	202b      	movs	r0, #43	; 0x2b
 80027ee:	f7ff fef2 	bl	80025d6 <write_2hword>
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000826 	.word	0x20000826
 8002800:	20000827 	.word	0x20000827

08002804 <tft_init>:
 * @param  text_color: default text color
 * @param  text_color_sp: default special text color
 * @param  highlight_color: default highlight color
 */
void tft_init(TFT_ORIENTATION orientation, uint16_t bg_color,
        uint16_t text_color, uint16_t text_color_sp, uint16_t highlight_color) {
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	4604      	mov	r4, r0
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4623      	mov	r3, r4
 8002814:	71fb      	strb	r3, [r7, #7]
 8002816:	4603      	mov	r3, r0
 8002818:	80bb      	strh	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	807b      	strh	r3, [r7, #2]
 800281e:	4613      	mov	r3, r2
 8002820:	803b      	strh	r3, [r7, #0]
    curr_screen = 0;
 8002822:	4b6e      	ldr	r3, [pc, #440]	; (80029dc <tft_init+0x1d8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
    tft_orientation = orientation;
 800282a:	4a6d      	ldr	r2, [pc, #436]	; (80029e0 <tft_init+0x1dc>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	7013      	strb	r3, [r2, #0]

    char_max_x =
            (orientation % 2) ? CHAR_MAX_X_HORIZONTAL : CHAR_MAX_X_VERTICAL;
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
    char_max_x =
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <tft_init+0x3c>
 800283c:	2214      	movs	r2, #20
 800283e:	e000      	b.n	8002842 <tft_init+0x3e>
 8002840:	2210      	movs	r2, #16
 8002842:	4b68      	ldr	r3, [pc, #416]	; (80029e4 <tft_init+0x1e0>)
 8002844:	701a      	strb	r2, [r3, #0]
    char_max_y =
            (orientation % 2) ? CHAR_MAX_Y_HORIZONTAL : CHAR_MAX_Y_VERTICAL;
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
    char_max_y =
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <tft_init+0x52>
 8002852:	2208      	movs	r2, #8
 8002854:	e000      	b.n	8002858 <tft_init+0x54>
 8002856:	220a      	movs	r2, #10
 8002858:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <tft_init+0x1e4>)
 800285a:	701a      	strb	r2, [r3, #0]

    TFT_SPI_INIT();
 800285c:	f001 fa20 	bl	8003ca0 <MX_SPI1_Init>

    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8002860:	2201      	movs	r2, #1
 8002862:	2140      	movs	r1, #64	; 0x40
 8002864:	4861      	ldr	r0, [pc, #388]	; (80029ec <tft_init+0x1e8>)
 8002866:	f002 fe2b 	bl	80054c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800286a:	2064      	movs	r0, #100	; 0x64
 800286c:	f001 feb0 	bl	80045d0 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8002870:	2200      	movs	r2, #0
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	485d      	ldr	r0, [pc, #372]	; (80029ec <tft_init+0x1e8>)
 8002876:	f002 fe23 	bl	80054c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800287a:	2064      	movs	r0, #100	; 0x64
 800287c:	f001 fea8 	bl	80045d0 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8002880:	2201      	movs	r2, #1
 8002882:	2140      	movs	r1, #64	; 0x40
 8002884:	4859      	ldr	r0, [pc, #356]	; (80029ec <tft_init+0x1e8>)
 8002886:	f002 fe1b 	bl	80054c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800288a:	2064      	movs	r0, #100	; 0x64
 800288c:	f001 fea0 	bl	80045d0 <HAL_Delay>

    HAL_GPIO_WritePin(TFT_BL_GPIO_Port, TFT_BL_Pin, GPIO_PIN_SET);
 8002890:	2201      	movs	r2, #1
 8002892:	2101      	movs	r1, #1
 8002894:	4856      	ldr	r0, [pc, #344]	; (80029f0 <tft_init+0x1ec>)
 8002896:	f002 fe13 	bl	80054c0 <HAL_GPIO_WritePin>

#if defined(TFT_CS_Pin) && !defined(MODEL_ST7735)
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
#endif

    uint32_t i = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 800289e:	e058      	b.n	8002952 <tft_init+0x14e>
        if (tft_init_code[i] == TFT_ORIENTATION_CMD) {
 80028a0:	4a54      	ldr	r2, [pc, #336]	; (80029f4 <tft_init+0x1f0>)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b36      	cmp	r3, #54	; 0x36
 80028aa:	d110      	bne.n	80028ce <tft_init+0xca>
            write_byte(tft_init_code[i],
 80028ac:	4a51      	ldr	r2, [pc, #324]	; (80029f4 <tft_init+0x1f0>)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <tft_init+0x1dc>)
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4a4f      	ldr	r2, [pc, #316]	; (80029f8 <tft_init+0x1f4>)
 80028bc:	5c52      	ldrb	r2, [r2, r1]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fe73 	bl	80025ac <write_byte>
                    tft_orientation_init_code[tft_orientation]);
            i++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3301      	adds	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e041      	b.n	8002952 <tft_init+0x14e>
        } else if (tft_init_code[i] == TFT_DELAY_MARKER) {
 80028ce:	4a49      	ldr	r2, [pc, #292]	; (80029f4 <tft_init+0x1f0>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2bff      	cmp	r3, #255	; 0xff
 80028d8:	d10a      	bne.n	80028f0 <tft_init+0xec>
            i += 3;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3303      	adds	r3, #3
 80028de:	60fb      	str	r3, [r7, #12]
            HAL_Delay(tft_init_code[i]);
 80028e0:	4a44      	ldr	r2, [pc, #272]	; (80029f4 <tft_init+0x1f0>)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4413      	add	r3, r2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 fe71 	bl	80045d0 <HAL_Delay>
 80028ee:	e030      	b.n	8002952 <tft_init+0x14e>
        } else if (tft_init_code[i + 1] == TFT_EOL_MARKER) {
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	4a3f      	ldr	r2, [pc, #252]	; (80029f4 <tft_init+0x1f0>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	2b43      	cmp	r3, #67	; 0x43
 80028fa:	d10a      	bne.n	8002912 <tft_init+0x10e>
            write_command(tft_init_code[i]);
 80028fc:	4a3d      	ldr	r2, [pc, #244]	; (80029f4 <tft_init+0x1f0>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4413      	add	r3, r2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fded 	bl	80024e4 <write_command>
            i++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3301      	adds	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e01f      	b.n	8002952 <tft_init+0x14e>
        } else {
            int len;
            for (len = 0; tft_init_code[i + len + 1] != TFT_EOL_MARKER; len++) {
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	e002      	b.n	800291e <tft_init+0x11a>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	3301      	adds	r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	3301      	adds	r3, #1
 8002926:	4a33      	ldr	r2, [pc, #204]	; (80029f4 <tft_init+0x1f0>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	2b43      	cmp	r3, #67	; 0x43
 800292c:	d1f4      	bne.n	8002918 <tft_init+0x114>
            }
            write_many(tft_init_code[i], (uint8_t*) &tft_init_code[i + 1], len);
 800292e:	4a31      	ldr	r2, [pc, #196]	; (80029f4 <tft_init+0x1f0>)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	7818      	ldrb	r0, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3301      	adds	r3, #1
 800293a:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <tft_init+0x1f0>)
 800293c:	4413      	add	r3, r2
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	b292      	uxth	r2, r2
 8002942:	4619      	mov	r1, r3
 8002944:	f7ff fe04 	bl	8002550 <write_many>
            i += len + 1;
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4413      	add	r3, r2
 800294e:	3301      	adds	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3301      	adds	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <tft_init+0x1f0>)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b42      	cmp	r3, #66	; 0x42
 8002962:	d19d      	bne.n	80028a0 <tft_init+0x9c>
        }
    }

#ifdef MODEL_ST7735
    switch (tft_orientation) {
 8002964:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <tft_init+0x1dc>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d01a      	beq.n	80029a2 <tft_init+0x19e>
 800296c:	2b03      	cmp	r3, #3
 800296e:	dc03      	bgt.n	8002978 <tft_init+0x174>
 8002970:	2b01      	cmp	r3, #1
 8002972:	d008      	beq.n	8002986 <tft_init+0x182>
 8002974:	2b02      	cmp	r3, #2
 8002976:	d00d      	beq.n	8002994 <tft_init+0x190>
    default:
    case 0:
        col_shift = 2;
 8002978:	4b20      	ldr	r3, [pc, #128]	; (80029fc <tft_init+0x1f8>)
 800297a:	2202      	movs	r2, #2
 800297c:	701a      	strb	r2, [r3, #0]
        row_shift = 1;
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <tft_init+0x1fc>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
        break;
 8002984:	e014      	b.n	80029b0 <tft_init+0x1ac>
    case 1:
        col_shift = 1;
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <tft_init+0x1f8>)
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <tft_init+0x1fc>)
 800298e:	2202      	movs	r2, #2
 8002990:	701a      	strb	r2, [r3, #0]
        break;
 8002992:	e00d      	b.n	80029b0 <tft_init+0x1ac>
    case 2:
        col_shift = 2;
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <tft_init+0x1f8>)
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <tft_init+0x1fc>)
 800299c:	2202      	movs	r2, #2
 800299e:	701a      	strb	r2, [r3, #0]
        break;
 80029a0:	e006      	b.n	80029b0 <tft_init+0x1ac>
    case 3:
        col_shift = 1;
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <tft_init+0x1f8>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 80029a8:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <tft_init+0x1fc>)
 80029aa:	2202      	movs	r2, #2
 80029ac:	701a      	strb	r2, [r3, #0]
        break;
 80029ae:	bf00      	nop
    }
#endif

    tft_set_bg_color(bg_color);
 80029b0:	88bb      	ldrh	r3, [r7, #4]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f826 	bl	8002a04 <tft_set_bg_color>
    tft_set_text_color(text_color);
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f842 	bl	8002a44 <tft_set_text_color>
    tft_set_special_color(text_color_sp);
 80029c0:	883b      	ldrh	r3, [r7, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f84e 	bl	8002a64 <tft_set_special_color>
    tft_set_highlight_color(highlight_color);
 80029c8:	8c3b      	ldrh	r3, [r7, #32]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f82a 	bl	8002a24 <tft_set_highlight_color>

    tft_force_clear();
 80029d0:	f000 f858 	bl	8002a84 <tft_force_clear>
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd90      	pop	{r4, r7, pc}
 80029dc:	2000009c 	.word	0x2000009c
 80029e0:	200001e0 	.word	0x200001e0
 80029e4:	200001e1 	.word	0x200001e1
 80029e8:	200001e2 	.word	0x200001e2
 80029ec:	40020000 	.word	0x40020000
 80029f0:	40020400 	.word	0x40020400
 80029f4:	08009c9c 	.word	0x08009c9c
 80029f8:	08009d10 	.word	0x08009d10
 80029fc:	20000826 	.word	0x20000826
 8002a00:	20000827 	.word	0x20000827

08002a04 <tft_set_bg_color>:
/**
 * @brief Set current background color
 *
 * @param bg_color (BLACK, BLUE, RED, ...)
 */
void tft_set_bg_color(uint16_t bg_color) {
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	80fb      	strh	r3, [r7, #6]
    curr_bg_color = bg_color;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <tft_set_bg_color+0x1c>)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	8013      	strh	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	200001d8 	.word	0x200001d8

08002a24 <tft_set_highlight_color>:
/**
 * @brief Set current highlight color
 *
 * @param highlight_color (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_highlight_color(uint16_t highlight_color) {
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	80fb      	strh	r3, [r7, #6]
    curr_highlight_color = highlight_color;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <tft_set_highlight_color+0x1c>)
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	8013      	strh	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	200001da 	.word	0x200001da

08002a44 <tft_set_text_color>:
/**
 * @brief Set current text color
 *
 * @param text_color (WHITE, SKYBLUE, GREEN, ...)
 */
void tft_set_text_color(uint16_t text_color) {
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
    curr_text_color = text_color;
 8002a4e:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <tft_set_text_color+0x1c>)
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	8013      	strh	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	200001dc 	.word	0x200001dc

08002a64 <tft_set_special_color>:
/**
 * @brief Set current special text color
 *
 * @param text_color_sp (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_special_color(uint16_t text_color_sp) {
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80fb      	strh	r3, [r7, #6]
    curr_text_color_sp = text_color_sp;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <tft_set_special_color+0x1c>)
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	8013      	strh	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	200001de 	.word	0x200001de

08002a84 <tft_force_clear>:

/**
 * @brief  Clear every pixels on the screen
 */
void tft_force_clear(void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af02      	add	r7, sp, #8
    tft_clear_full();
 8002a8a:	f7ff fe07 	bl	800269c <tft_clear_full>
    tft_update(0);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f000 fb22 	bl	80030d8 <tft_update>
    tft_clear_full();
 8002a94:	f7ff fe02 	bl	800269c <tft_clear_full>
    if (tft_orientation % 2)
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <tft_force_clear+0x50>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <tft_force_clear+0x36>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_HEIGHT, MAX_WIDTH);
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <tft_force_clear+0x54>)
 8002aa8:	8818      	ldrh	r0, [r3, #0]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	23a0      	movs	r3, #160	; 0xa0
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	f000 fa5a 	bl	8002f6c <tft_print_rectangle>
    else
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
}
 8002ab8:	e008      	b.n	8002acc <tft_force_clear+0x48>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <tft_force_clear+0x54>)
 8002abc:	8818      	ldrh	r0, [r3, #0]
 8002abe:	23a0      	movs	r3, #160	; 0xa0
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f000 fa50 	bl	8002f6c <tft_print_rectangle>
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200001e0 	.word	0x200001e0
 8002ad8:	200001d8 	.word	0x200001d8

08002adc <tft_print_colored>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fp pointer to the character(s)
 */
void tft_print_colored(uint8_t x, uint8_t y, const char *fp,
        uint16_t text_color, uint16_t bg_color) {
 8002adc:	b490      	push	{r4, r7}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	603a      	str	r2, [r7, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
 8002aea:	460b      	mov	r3, r1
 8002aec:	71bb      	strb	r3, [r7, #6]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80bb      	strh	r3, [r7, #4]
    uint8_t i = x;
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	73fb      	strb	r3, [r7, #15]
    uint8_t j = y;
 8002af6:	79bb      	ldrb	r3, [r7, #6]
 8002af8:	73bb      	strb	r3, [r7, #14]
    uint8_t is_special = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	737b      	strb	r3, [r7, #13]
    uint8_t is_highlighted = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	733b      	strb	r3, [r7, #12]
    uint8_t is_underlined = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	72fb      	strb	r3, [r7, #11]

    while (*fp && i < char_max_x && j < char_max_y) {
 8002b06:	e14a      	b.n	8002d9e <tft_print_colored+0x2c2>
        switch (*fp) {
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b7d      	cmp	r3, #125	; 0x7d
 8002b0e:	f300 80e0 	bgt.w	8002cd2 <tft_print_colored+0x1f6>
 8002b12:	2b5b      	cmp	r3, #91	; 0x5b
 8002b14:	da04      	bge.n	8002b20 <tft_print_colored+0x44>
 8002b16:	2b0a      	cmp	r3, #10
 8002b18:	d050      	beq.n	8002bbc <tft_print_colored+0xe0>
 8002b1a:	2b0d      	cmp	r3, #13
 8002b1c:	d051      	beq.n	8002bc2 <tft_print_colored+0xe6>
 8002b1e:	e0d8      	b.n	8002cd2 <tft_print_colored+0x1f6>
 8002b20:	3b5b      	subs	r3, #91	; 0x5b
 8002b22:	2b22      	cmp	r3, #34	; 0x22
 8002b24:	f200 80d5 	bhi.w	8002cd2 <tft_print_colored+0x1f6>
 8002b28:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <tft_print_colored+0x54>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002c9f 	.word	0x08002c9f
 8002b34:	08002cd3 	.word	0x08002cd3
 8002b38:	08002c9f 	.word	0x08002c9f
 8002b3c:	08002cd3 	.word	0x08002cd3
 8002b40:	08002cd3 	.word	0x08002cd3
 8002b44:	08002bc9 	.word	0x08002bc9
 8002b48:	08002cd3 	.word	0x08002cd3
 8002b4c:	08002cd3 	.word	0x08002cd3
 8002b50:	08002cd3 	.word	0x08002cd3
 8002b54:	08002cd3 	.word	0x08002cd3
 8002b58:	08002cd3 	.word	0x08002cd3
 8002b5c:	08002cd3 	.word	0x08002cd3
 8002b60:	08002cd3 	.word	0x08002cd3
 8002b64:	08002cd3 	.word	0x08002cd3
 8002b68:	08002cd3 	.word	0x08002cd3
 8002b6c:	08002cd3 	.word	0x08002cd3
 8002b70:	08002cd3 	.word	0x08002cd3
 8002b74:	08002cd3 	.word	0x08002cd3
 8002b78:	08002cd3 	.word	0x08002cd3
 8002b7c:	08002cd3 	.word	0x08002cd3
 8002b80:	08002cd3 	.word	0x08002cd3
 8002b84:	08002cd3 	.word	0x08002cd3
 8002b88:	08002cd3 	.word	0x08002cd3
 8002b8c:	08002cd3 	.word	0x08002cd3
 8002b90:	08002cd3 	.word	0x08002cd3
 8002b94:	08002cd3 	.word	0x08002cd3
 8002b98:	08002cd3 	.word	0x08002cd3
 8002b9c:	08002cd3 	.word	0x08002cd3
 8002ba0:	08002cd3 	.word	0x08002cd3
 8002ba4:	08002cd3 	.word	0x08002cd3
 8002ba8:	08002cd3 	.word	0x08002cd3
 8002bac:	08002cd3 	.word	0x08002cd3
 8002bb0:	08002cb1 	.word	0x08002cb1
 8002bb4:	08002cc3 	.word	0x08002cc3
 8002bb8:	08002cb1 	.word	0x08002cb1
        case '\n':
            j++;  // fall through
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	73bb      	strb	r3, [r7, #14]
        case '\r':
            i = x;
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	73fb      	strb	r3, [r7, #15]
            break;
 8002bc6:	e0e7      	b.n	8002d98 <tft_print_colored+0x2bc>
        case '`': // escape character
            if (*(fp + 1) != '\0') {
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80e1 	beq.w	8002d96 <tft_print_colored+0x2ba>
                fp++;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	603b      	str	r3, [r7, #0]
                curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	7afa      	ldrb	r2, [r7, #11]
 8002be2:	2a00      	cmp	r2, #0
 8002be4:	d002      	beq.n	8002bec <tft_print_colored+0x110>
 8002be6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002bea:	e000      	b.n	8002bee <tft_print_colored+0x112>
 8002bec:	2200      	movs	r2, #0
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	b25c      	sxtb	r4, r3
 8002bf2:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	4b74      	ldr	r3, [pc, #464]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	7bbb      	ldrb	r3, [r7, #14]
 8002c00:	4a72      	ldr	r2, [pc, #456]	; (8002dcc <tft_print_colored+0x2f0>)
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	fb03 f202 	mul.w	r2, r3, r2
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	441a      	add	r2, r3
 8002c0c:	b2e4      	uxtb	r4, r4
 8002c0e:	4603      	mov	r3, r0
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4403      	add	r3, r0
 8002c14:	015b      	lsls	r3, r3, #5
 8002c16:	440b      	add	r3, r1
 8002c18:	4413      	add	r3, r2
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4622      	mov	r2, r4
 8002c1e:	701a      	strb	r2, [r3, #0]
                curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 8002c20:	7b7b      	ldrb	r3, [r7, #13]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <tft_print_colored+0x150>
 8002c26:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <tft_print_colored+0x2f4>)
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	e000      	b.n	8002c2e <tft_print_colored+0x152>
 8002c2c:	88ba      	ldrh	r2, [r7, #4]
 8002c2e:	4b66      	ldr	r3, [pc, #408]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	4b65      	ldr	r3, [pc, #404]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461c      	mov	r4, r3
 8002c3a:	7bbb      	ldrb	r3, [r7, #14]
 8002c3c:	4863      	ldr	r0, [pc, #396]	; (8002dcc <tft_print_colored+0x2f0>)
 8002c3e:	7800      	ldrb	r0, [r0, #0]
 8002c40:	fb03 f000 	mul.w	r0, r3, r0
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	4418      	add	r0, r3
 8002c48:	4623      	mov	r3, r4
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4423      	add	r3, r4
 8002c4e:	015b      	lsls	r3, r3, #5
 8002c50:	4403      	add	r3, r0
 8002c52:	33a0      	adds	r3, #160	; 0xa0
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	440b      	add	r3, r1
 8002c58:	805a      	strh	r2, [r3, #2]
                curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 8002c5a:	7b3b      	ldrb	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <tft_print_colored+0x18a>
 8002c60:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <tft_print_colored+0x2f8>)
 8002c62:	881a      	ldrh	r2, [r3, #0]
 8002c64:	e000      	b.n	8002c68 <tft_print_colored+0x18c>
 8002c66:	8b3a      	ldrh	r2, [r7, #24]
 8002c68:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002c6a:	6819      	ldr	r1, [r3, #0]
 8002c6c:	4b56      	ldr	r3, [pc, #344]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461c      	mov	r4, r3
 8002c74:	7bbb      	ldrb	r3, [r7, #14]
 8002c76:	4855      	ldr	r0, [pc, #340]	; (8002dcc <tft_print_colored+0x2f0>)
 8002c78:	7800      	ldrb	r0, [r0, #0]
 8002c7a:	fb03 f000 	mul.w	r0, r3, r0
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	4418      	add	r0, r3
 8002c82:	4623      	mov	r3, r4
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4423      	add	r3, r4
 8002c88:	015b      	lsls	r3, r3, #5
 8002c8a:	4403      	add	r3, r0
 8002c8c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	440b      	add	r3, r1
 8002c94:	805a      	strh	r2, [r3, #2]
                i++;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8002c9c:	e07b      	b.n	8002d96 <tft_print_colored+0x2ba>
        case '[':
        case ']':
            is_special = (*fp == '[');
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b5b      	cmp	r3, #91	; 0x5b
 8002ca4:	bf0c      	ite	eq
 8002ca6:	2301      	moveq	r3, #1
 8002ca8:	2300      	movne	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	737b      	strb	r3, [r7, #13]
            break;
 8002cae:	e073      	b.n	8002d98 <tft_print_colored+0x2bc>
        case '{':
        case '}':
            is_highlighted = (*fp == '{');
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b7b      	cmp	r3, #123	; 0x7b
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	733b      	strb	r3, [r7, #12]
            break;
 8002cc0:	e06a      	b.n	8002d98 <tft_print_colored+0x2bc>
        case '|':
            is_underlined = !is_underlined;
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	72fb      	strb	r3, [r7, #11]
            break;
 8002cd0:	e062      	b.n	8002d98 <tft_print_colored+0x2bc>
        default:
            curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	7afa      	ldrb	r2, [r7, #11]
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	d002      	beq.n	8002ce4 <tft_print_colored+0x208>
 8002cde:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002ce2:	e000      	b.n	8002ce6 <tft_print_colored+0x20a>
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	b25c      	sxtb	r4, r3
 8002cea:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	7bbb      	ldrb	r3, [r7, #14]
 8002cf8:	4a34      	ldr	r2, [pc, #208]	; (8002dcc <tft_print_colored+0x2f0>)
 8002cfa:	7812      	ldrb	r2, [r2, #0]
 8002cfc:	fb03 f202 	mul.w	r2, r3, r2
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	441a      	add	r2, r3
 8002d04:	b2e4      	uxtb	r4, r4
 8002d06:	4603      	mov	r3, r0
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4403      	add	r3, r0
 8002d0c:	015b      	lsls	r3, r3, #5
 8002d0e:	440b      	add	r3, r1
 8002d10:	4413      	add	r3, r2
 8002d12:	3301      	adds	r3, #1
 8002d14:	4622      	mov	r2, r4
 8002d16:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 8002d18:	7b7b      	ldrb	r3, [r7, #13]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <tft_print_colored+0x248>
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <tft_print_colored+0x2f4>)
 8002d20:	881a      	ldrh	r2, [r3, #0]
 8002d22:	e000      	b.n	8002d26 <tft_print_colored+0x24a>
 8002d24:	88ba      	ldrh	r2, [r7, #4]
 8002d26:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002d28:	6819      	ldr	r1, [r3, #0]
 8002d2a:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461c      	mov	r4, r3
 8002d32:	7bbb      	ldrb	r3, [r7, #14]
 8002d34:	4825      	ldr	r0, [pc, #148]	; (8002dcc <tft_print_colored+0x2f0>)
 8002d36:	7800      	ldrb	r0, [r0, #0]
 8002d38:	fb03 f000 	mul.w	r0, r3, r0
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	4418      	add	r0, r3
 8002d40:	4623      	mov	r3, r4
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4423      	add	r3, r4
 8002d46:	015b      	lsls	r3, r3, #5
 8002d48:	4403      	add	r3, r0
 8002d4a:	33a0      	adds	r3, #160	; 0xa0
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	440b      	add	r3, r1
 8002d50:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 8002d52:	7b3b      	ldrb	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <tft_print_colored+0x282>
 8002d58:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <tft_print_colored+0x2f8>)
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	e000      	b.n	8002d60 <tft_print_colored+0x284>
 8002d5e:	8b3a      	ldrh	r2, [r7, #24]
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <tft_print_colored+0x2ec>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461c      	mov	r4, r3
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	4817      	ldr	r0, [pc, #92]	; (8002dcc <tft_print_colored+0x2f0>)
 8002d70:	7800      	ldrb	r0, [r0, #0]
 8002d72:	fb03 f000 	mul.w	r0, r3, r0
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	4418      	add	r0, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4423      	add	r3, r4
 8002d80:	015b      	lsls	r3, r3, #5
 8002d82:	4403      	add	r3, r0
 8002d84:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	440b      	add	r3, r1
 8002d8c:	805a      	strh	r2, [r3, #2]
            i++;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	3301      	adds	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
            break;
 8002d94:	e000      	b.n	8002d98 <tft_print_colored+0x2bc>
            break;
 8002d96:	bf00      	nop
        }
        fp++;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	603b      	str	r3, [r7, #0]
    while (*fp && i < char_max_x && j < char_max_y) {
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <tft_print_colored+0x2e0>
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <tft_print_colored+0x2f0>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d205      	bcs.n	8002dbc <tft_print_colored+0x2e0>
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <tft_print_colored+0x2fc>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	7bba      	ldrb	r2, [r7, #14]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	f4ff aea6 	bcc.w	8002b08 <tft_print_colored+0x2c>
    }
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc90      	pop	{r4, r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	2000009c 	.word	0x2000009c
 8002dcc:	200001e1 	.word	0x200001e1
 8002dd0:	200001de 	.word	0x200001de
 8002dd4:	200001da 	.word	0x200001da
 8002dd8:	200001e2 	.word	0x200001e2

08002ddc <tft_printc>:
 *
 * @param x x-coordinate
 * @param y y-coordinate
 * @param fp pointer to character
 */
void tft_printc(uint8_t x, uint8_t y, const char *fp) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	4603      	mov	r3, r0
 8002de4:	603a      	str	r2, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
 8002de8:	460b      	mov	r3, r1
 8002dea:	71bb      	strb	r3, [r7, #6]
    tft_print_colored(x, y, fp, curr_text_color, curr_bg_color);
 8002dec:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <tft_printc+0x30>)
 8002dee:	881a      	ldrh	r2, [r3, #0]
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <tft_printc+0x34>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	79b9      	ldrb	r1, [r7, #6]
 8002df6:	79f8      	ldrb	r0, [r7, #7]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	f7ff fe6d 	bl	8002adc <tft_print_colored>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200001dc 	.word	0x200001dc
 8002e10:	200001d8 	.word	0x200001d8

08002e14 <tft_prints>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fmt string to be printed with format
 * @param __VA_ARGS__ variables to replace spaceholders
 */
void tft_prints(uint8_t x, uint8_t y, const char *fmt, ...) {
 8002e14:	b40c      	push	{r2, r3}
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b08e      	sub	sp, #56	; 0x38
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	460a      	mov	r2, r1
 8002e20:	71fb      	strb	r3, [r7, #7]
 8002e22:	4613      	mov	r3, r2
 8002e24:	71bb      	strb	r3, [r7, #6]
    char buf[CHAR_MAX_X * 2] = { 0 }, *fp = buf;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	2224      	movs	r2, #36	; 0x24
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f005 f896 	bl	8007f64 <memset>
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	60fb      	str	r3, [r7, #12]

    va_list args;
    va_start(args, fmt);
 8002e3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e42:	60bb      	str	r3, [r7, #8]
    print(&fp, fmt, args);
 8002e44:	f107 030c 	add.w	r3, r7, #12
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fa27 	bl	80022a0 <print>

    tft_printc(x, y, buf);
 8002e52:	f107 0210 	add.w	r2, r7, #16
 8002e56:	79b9      	ldrb	r1, [r7, #6]
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ffbe 	bl	8002ddc <tft_printc>
}
 8002e60:	bf00      	nop
 8002e62:	3738      	adds	r7, #56	; 0x38
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e6a:	b002      	add	sp, #8
 8002e6c:	4770      	bx	lr
	...

08002e70 <tft_print_rectangle_dma>:
#endif
    }
}

void tft_print_rectangle_dma(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t l = (i > TFT_DMA_BUF_PIXELS) ? TFT_DMA_BUF_PIXELS : i; // safety guard
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e90:	bf28      	it	cs
 8002e92:	f44f 53a0 	movcs.w	r3, #5120	; 0x1400
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
    tft_buffer_pixels(curr_tft_dma_buf, color, l);
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <tft_print_rectangle_dma+0xf0>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	02db      	lsls	r3, r3, #11
 8002ea6:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <tft_print_rectangle_dma+0xf4>)
 8002ea8:	441a      	add	r2, r3
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	627a      	str	r2, [r7, #36]	; 0x24
 8002eae:	89fa      	ldrh	r2, [r7, #14]
 8002eb0:	847a      	strh	r2, [r7, #34]	; 0x22
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ebc:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8002ebe:	8afb      	ldrh	r3, [r7, #22]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	8afa      	ldrh	r2, [r7, #22]
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]
}
 8002ed4:	bf00      	nop
    while (len--) {
 8002ed6:	e009      	b.n	8002eec <tft_print_rectangle_dma+0x7c>
        *out++ = buf[0];
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	627a      	str	r2, [r7, #36]	; 0x24
 8002ede:	7d3a      	ldrb	r2, [r7, #20]
 8002ee0:	701a      	strb	r2, [r3, #0]
        *out++ = buf[1];
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	627a      	str	r2, [r7, #36]	; 0x24
 8002ee8:	7d7a      	ldrb	r2, [r7, #21]
 8002eea:	701a      	strb	r2, [r3, #0]
    while (len--) {
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	1e5a      	subs	r2, r3, #1
 8002ef0:	61fa      	str	r2, [r7, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <tft_print_rectangle_dma+0x68>
}
 8002ef6:	bf00      	nop
    tft_set_region(x, y, w - 1, h - 1);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	b298      	uxth	r0, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	b299      	uxth	r1, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f7ff fc30 	bl	8002774 <tft_set_region>
    write_command(0x2c);
 8002f14:	202c      	movs	r0, #44	; 0x2c
 8002f16:	f7ff fae5 	bl	80024e4 <write_command>
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8002f1a:	bf00      	nop
 8002f1c:	4812      	ldr	r0, [pc, #72]	; (8002f68 <tft_print_rectangle_dma+0xf8>)
 8002f1e:	f003 fc77 	bl	8006810 <HAL_SPI_GetState>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d1f9      	bne.n	8002f1c <tft_print_rectangle_dma+0xac>
        ;
    write_many_dma(0x2c, curr_tft_dma_buf, l * PIXEL_BYTES);
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <tft_print_rectangle_dma+0xf0>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	02db      	lsls	r3, r3, #11
 8002f36:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <tft_print_rectangle_dma+0xf4>)
 8002f38:	1899      	adds	r1, r3, r2
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	202c      	movs	r0, #44	; 0x2c
 8002f46:	f7ff fb19 	bl	800257c <write_many_dma>
    buf_ptr ^= 0x1;
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <tft_print_rectangle_dma+0xf0>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <tft_print_rectangle_dma+0xf0>)
 8002f56:	701a      	strb	r2, [r3, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	3730      	adds	r7, #48	; 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000828 	.word	0x20000828
 8002f64:	2000082c 	.word	0x2000082c
 8002f68:	20005830 	.word	0x20005830

08002f6c <tft_print_rectangle>:
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_rectangle(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b08d      	sub	sp, #52	; 0x34
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4603      	mov	r3, r0
 8002f7a:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    if (i <= (64)) {
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	2b40      	cmp	r3, #64	; 0x40
 8002f8a:	d82f      	bhi.n	8002fec <tft_print_rectangle+0x80>
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	89fb      	ldrh	r3, [r7, #14]
 8002f94:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8002f96:	8afb      	ldrh	r3, [r7, #22]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	8afa      	ldrh	r2, [r7, #22]
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]
}
 8002fac:	bf00      	nop
        uint8_t buf[PIXEL_BYTES];
        tft_buffer_pixel(buf, color);

        tft_set_region(x, y, w - 1, h - 1);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	b298      	uxth	r0, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	b299      	uxth	r1, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f7ff fbd5 	bl	8002774 <tft_set_region>
        write_command(0x2c);
 8002fca:	202c      	movs	r0, #44	; 0x2c
 8002fcc:	f7ff fa8a 	bl	80024e4 <write_command>
        for (; i != 0; i--) {
 8002fd0:	e008      	b.n	8002fe4 <tft_print_rectangle+0x78>
            write_data(buf, PIXEL_BYTES);
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff faa7 	bl	800252c <write_data>
        for (; i != 0; i--) {
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f3      	bne.n	8002fd2 <tft_print_rectangle+0x66>
        if (h % buf_max_h > 0) {
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
                    h % buf_max_h);
        }
    }
}
 8002fea:	e040      	b.n	800306e <tft_print_rectangle+0x102>
        uint16_t buf_max_h = TFT_DMA_BUF_PIXELS / w;
 8002fec:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	83fb      	strh	r3, [r7, #30]
        uint16_t num_section = h / buf_max_h;
 8002ff8:	8bfb      	ldrh	r3, [r7, #30]
 8002ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	83bb      	strh	r3, [r7, #28]
        for (int k = 0; k < num_section; ++k) {
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	e010      	b.n	800302a <tft_print_rectangle+0xbe>
            tft_print_rectangle_dma(color, x, y + k * buf_max_h, w, buf_max_h);
 8003008:	8bfb      	ldrh	r3, [r7, #30]
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	461a      	mov	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	441a      	add	r2, r3
 8003016:	8bfb      	ldrh	r3, [r7, #30]
 8003018:	89f8      	ldrh	r0, [r7, #14]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	f7ff ff26 	bl	8002e70 <tft_print_rectangle_dma>
        for (int k = 0; k < num_section; ++k) {
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	3301      	adds	r3, #1
 8003028:	623b      	str	r3, [r7, #32]
 800302a:	8bbb      	ldrh	r3, [r7, #28]
 800302c:	6a3a      	ldr	r2, [r7, #32]
 800302e:	429a      	cmp	r2, r3
 8003030:	dbea      	blt.n	8003008 <tft_print_rectangle+0x9c>
        if (h % buf_max_h > 0) {
 8003032:	8bfa      	ldrh	r2, [r7, #30]
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	fbb3 f1f2 	udiv	r1, r3, r2
 800303a:	fb01 f202 	mul.w	r2, r1, r2
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d014      	beq.n	800306e <tft_print_rectangle+0x102>
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
 8003044:	8bbb      	ldrh	r3, [r7, #28]
 8003046:	8bfa      	ldrh	r2, [r7, #30]
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	18d4      	adds	r4, r2, r3
 8003052:	8bfa      	ldrh	r2, [r7, #30]
 8003054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003056:	fbb3 f1f2 	udiv	r1, r3, r2
 800305a:	fb01 f202 	mul.w	r2, r1, r2
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	89f8      	ldrh	r0, [r7, #14]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4622      	mov	r2, r4
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	f7ff ff01 	bl	8002e70 <tft_print_rectangle_dma>
}
 800306e:	bf00      	nop
 8003070:	372c      	adds	r7, #44	; 0x2c
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
	...

08003078 <tft_print_image>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_image(void *buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8003086:	bf00      	nop
 8003088:	4812      	ldr	r0, [pc, #72]	; (80030d4 <tft_print_image+0x5c>)
 800308a:	f003 fbc1 	bl	8006810 <HAL_SPI_GetState>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d1f9      	bne.n	8003088 <tft_print_image+0x10>
        ;  // wait for the SPI to be ready

    tft_set_region(x, y, w - 1, h - 1);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	b298      	uxth	r0, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	b299      	uxth	r1, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f7ff fb62 	bl	8002774 <tft_set_region>

    write_many_dma(0x2c, buf, w * h * PIXEL_BYTES);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	fb12 f303 	smulbb	r3, r2, r3
 80030bc:	b29b      	uxth	r3, r3
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	68f9      	ldr	r1, [r7, #12]
 80030c6:	202c      	movs	r0, #44	; 0x2c
 80030c8:	f7ff fa58 	bl	800257c <write_many_dma>
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20005830 	.word	0x20005830

080030d8 <tft_update>:
 * @brief Update the screen in certain period
 *
 * @param period time in ms
 * @return state
 */
uint8_t tft_update(uint32_t period) {
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b08d      	sub	sp, #52	; 0x34
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
    static uint32_t last_update = 0;
    if ((HAL_GetTick() - last_update) < period)
 80030e0:	f001 fa6a 	bl	80045b8 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4ba0      	ldr	r3, [pc, #640]	; (8003368 <tft_update+0x290>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d901      	bls.n	80030f6 <tft_update+0x1e>
        return 2;
 80030f2:	2302      	movs	r3, #2
 80030f4:	e133      	b.n	800335e <tft_update+0x286>
    last_update = HAL_GetTick();
 80030f6:	f001 fa5f 	bl	80045b8 <HAL_GetTick>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a9a      	ldr	r2, [pc, #616]	; (8003368 <tft_update+0x290>)
 80030fe:	6013      	str	r3, [r2, #0]

    for (uint8_t j = 0; j < char_max_y; j++) {
 8003100:	2300      	movs	r3, #0
 8003102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003106:	e115      	b.n	8003334 <tft_update+0x25c>
        for (uint8_t i = 0; i < char_max_x; i++) {
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800310e:	e105      	b.n	800331c <tft_update+0x244>
            if (tft_char_is_changed(tft_screens, i, j)) {
 8003110:	4b96      	ldr	r3, [pc, #600]	; (800336c <tft_update+0x294>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003118:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe fe01 	bl	8001d24 <tft_char_is_changed>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80f4 	beq.w	8003312 <tft_update+0x23a>
                uint8_t adj_cnt = 1;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8003130:	e004      	b.n	800313c <tft_update+0x64>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
                    adj_cnt++;  // Search for diff char
 8003132:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003136:	3301      	adds	r3, #1
 8003138:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 800313c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003140:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003144:	4413      	add	r3, r2
 8003146:	4a8a      	ldr	r2, [pc, #552]	; (8003370 <tft_update+0x298>)
 8003148:	7812      	ldrb	r2, [r2, #0]
 800314a:	4293      	cmp	r3, r2
 800314c:	da13      	bge.n	8003176 <tft_update+0x9e>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
 800314e:	4b87      	ldr	r3, [pc, #540]	; (800336c <tft_update+0x294>)
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003156:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800315a:	4413      	add	r3, r2
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003162:	4619      	mov	r1, r3
 8003164:	f7fe fdde 	bl	8001d24 <tft_char_is_changed>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <tft_update+0x9e>
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
 800316e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003172:	2b27      	cmp	r3, #39	; 0x27
 8003174:	d9dd      	bls.n	8003132 <tft_update+0x5a>

                uint16_t px = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	847b      	strh	r3, [r7, #34]	; 0x22
                uint16_t y = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 800317e:	e09a      	b.n	80032b6 <tft_update+0x1de>
                    uint8_t char_cnt = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 8003184:	e08e      	b.n	80032a4 <tft_update+0x1cc>
                        const uint8_t char_ptr = (CHAR_PTR(
 8003186:	4b79      	ldr	r3, [pc, #484]	; (800336c <tft_update+0x294>)
 8003188:	6819      	ldr	r1, [r3, #0]
 800318a:	4b78      	ldr	r3, [pc, #480]	; (800336c <tft_update+0x294>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	461c      	mov	r4, r3
 8003192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003196:	4a76      	ldr	r2, [pc, #472]	; (8003370 <tft_update+0x298>)
 8003198:	7812      	ldrb	r2, [r2, #0]
 800319a:	fb03 f202 	mul.w	r2, r3, r2
 800319e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80031a2:	7ffb      	ldrb	r3, [r7, #31]
 80031a4:	4403      	add	r3, r0
 80031a6:	441a      	add	r2, r3
 80031a8:	4623      	mov	r3, r4
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4423      	add	r3, r4
 80031ae:	015b      	lsls	r3, r3, #5
 80031b0:	440b      	add	r3, r1
 80031b2:	4413      	add	r3, r2
 80031b4:	3301      	adds	r3, #1
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	3b20      	subs	r3, #32
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	461a      	mov	r2, r3
                                curr_text_buf[TFT_XY(i + char_cnt, j)]))[y];
 80031be:	8c3b      	ldrh	r3, [r7, #32]
 80031c0:	4413      	add	r3, r2
 80031c2:	4a6c      	ldr	r2, [pc, #432]	; (8003374 <tft_update+0x29c>)
 80031c4:	4413      	add	r3, r2
                        const uint8_t char_ptr = (CHAR_PTR(
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	777b      	strb	r3, [r7, #29]
                        uint16_t fg = curr_text_color_buf[TFT_XY(i + char_cnt, j)];
 80031ca:	4b68      	ldr	r3, [pc, #416]	; (800336c <tft_update+0x294>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b67      	ldr	r3, [pc, #412]	; (800336c <tft_update+0x294>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	461c      	mov	r4, r3
 80031d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031da:	4965      	ldr	r1, [pc, #404]	; (8003370 <tft_update+0x298>)
 80031dc:	7809      	ldrb	r1, [r1, #0]
 80031de:	fb03 f101 	mul.w	r1, r3, r1
 80031e2:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80031e6:	7ffb      	ldrb	r3, [r7, #31]
 80031e8:	4403      	add	r3, r0
 80031ea:	4419      	add	r1, r3
 80031ec:	4623      	mov	r3, r4
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4423      	add	r3, r4
 80031f2:	015b      	lsls	r3, r3, #5
 80031f4:	440b      	add	r3, r1
 80031f6:	33a0      	adds	r3, #160	; 0xa0
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	885b      	ldrh	r3, [r3, #2]
 80031fe:	837b      	strh	r3, [r7, #26]
                        uint16_t bg = curr_bg_color_buf[TFT_XY(i + char_cnt, j)];
 8003200:	4b5a      	ldr	r3, [pc, #360]	; (800336c <tft_update+0x294>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b59      	ldr	r3, [pc, #356]	; (800336c <tft_update+0x294>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461c      	mov	r4, r3
 800320c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003210:	4957      	ldr	r1, [pc, #348]	; (8003370 <tft_update+0x298>)
 8003212:	7809      	ldrb	r1, [r1, #0]
 8003214:	fb03 f101 	mul.w	r1, r3, r1
 8003218:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800321c:	7ffb      	ldrb	r3, [r7, #31]
 800321e:	4403      	add	r3, r0
 8003220:	4419      	add	r1, r3
 8003222:	4623      	mov	r3, r4
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4423      	add	r3, r4
 8003228:	015b      	lsls	r3, r3, #5
 800322a:	440b      	add	r3, r1
 800322c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	885b      	ldrh	r3, [r3, #2]
 8003236:	833b      	strh	r3, [r7, #24]
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 8003238:	2308      	movs	r3, #8
 800323a:	77bb      	strb	r3, [r7, #30]
 800323c:	e02c      	b.n	8003298 <tft_update+0x1c0>
                            uint16_t color =
                                    ((char_ptr >> (x - 1)) & 0x01) ? fg : bg;
 800323e:	7f7a      	ldrb	r2, [r7, #29]
 8003240:	7fbb      	ldrb	r3, [r7, #30]
 8003242:	3b01      	subs	r3, #1
 8003244:	fa42 f303 	asr.w	r3, r2, r3
 8003248:	f003 0301 	and.w	r3, r3, #1
                            uint16_t color =
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <tft_update+0x17c>
 8003250:	8b7b      	ldrh	r3, [r7, #26]
 8003252:	e000      	b.n	8003256 <tft_update+0x17e>
 8003254:	8b3b      	ldrh	r3, [r7, #24]
 8003256:	82fb      	strh	r3, [r7, #22]
                            tft_buffer_pixel(&tft_dma_bufs[buf_ptr][px], color);
 8003258:	4b47      	ldr	r3, [pc, #284]	; (8003378 <tft_update+0x2a0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003260:	460b      	mov	r3, r1
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	02db      	lsls	r3, r3, #11
 8003268:	4413      	add	r3, r2
 800326a:	4a44      	ldr	r2, [pc, #272]	; (800337c <tft_update+0x2a4>)
 800326c:	4413      	add	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	8afb      	ldrh	r3, [r7, #22]
 8003272:	81fb      	strh	r3, [r7, #14]
    out[0] = rgb565 >> 8;
 8003274:	89fb      	ldrh	r3, [r7, #14]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	b29b      	uxth	r3, r3
 800327a:	b2da      	uxtb	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	3301      	adds	r3, #1
 8003284:	89fa      	ldrh	r2, [r7, #14]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
}
 800328a:	bf00      	nop
                            px += PIXEL_BYTES;
 800328c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800328e:	3302      	adds	r3, #2
 8003290:	847b      	strh	r3, [r7, #34]	; 0x22
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 8003292:	7fbb      	ldrb	r3, [r7, #30]
 8003294:	3b01      	subs	r3, #1
 8003296:	77bb      	strb	r3, [r7, #30]
 8003298:	7fbb      	ldrb	r3, [r7, #30]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1cf      	bne.n	800323e <tft_update+0x166>
                        }
                        char_cnt++;
 800329e:	7ffb      	ldrb	r3, [r7, #31]
 80032a0:	3301      	adds	r3, #1
 80032a2:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 80032a4:	7ffa      	ldrb	r2, [r7, #31]
 80032a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032aa:	429a      	cmp	r2, r3
 80032ac:	f47f af6b 	bne.w	8003186 <tft_update+0xae>
                    }
                    y++;
 80032b0:	8c3b      	ldrh	r3, [r7, #32]
 80032b2:	3301      	adds	r3, #1
 80032b4:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 80032b6:	8c3b      	ldrh	r3, [r7, #32]
 80032b8:	2b0f      	cmp	r3, #15
 80032ba:	f67f af61 	bls.w	8003180 <tft_update+0xa8>
                }

                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 80032be:	4b2e      	ldr	r3, [pc, #184]	; (8003378 <tft_update+0x2a0>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	02db      	lsls	r3, r3, #11
 80032cc:	4a2b      	ldr	r2, [pc, #172]	; (800337c <tft_update+0x2a4>)
 80032ce:	1898      	adds	r0, r3, r2
 80032d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4619      	mov	r1, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 80032d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032dc:	011b      	lsls	r3, r3, #4
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 80032de:	461a      	mov	r2, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 80032e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032e4:	00db      	lsls	r3, r3, #3
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 80032e6:	461c      	mov	r4, r3
 80032e8:	2310      	movs	r3, #16
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4623      	mov	r3, r4
 80032ee:	f7ff fec3 	bl	8003078 <tft_print_image>
                        CHAR_HEIGHT);
                buf_ptr ^= 0x1;
 80032f2:	4b21      	ldr	r3, [pc, #132]	; (8003378 <tft_update+0x2a0>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	f083 0301 	eor.w	r3, r3, #1
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <tft_update+0x2a0>)
 80032fe:	701a      	strb	r2, [r3, #0]
                i += adj_cnt - 1;
 8003300:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003308:	4413      	add	r3, r2
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t i = 0; i < char_max_x; i++) {
 8003312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003316:	3301      	adds	r3, #1
 8003318:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <tft_update+0x298>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003324:	429a      	cmp	r2, r3
 8003326:	f4ff aef3 	bcc.w	8003110 <tft_update+0x38>
    for (uint8_t j = 0; j < char_max_y; j++) {
 800332a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800332e:	3301      	adds	r3, #1
 8003330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <tft_update+0x2a8>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800333c:	429a      	cmp	r2, r3
 800333e:	f4ff aee3 	bcc.w	8003108 <tft_update+0x30>
            }
        }
    }

    // Swap pointers
    curr_screen = !curr_screen;
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <tft_update+0x294>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <tft_update+0x294>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	701a      	strb	r2, [r3, #0]

    tft_clear();
 8003358:	f7ff f964 	bl	8002624 <tft_clear>

    return 0;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	372c      	adds	r7, #44	; 0x2c
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	bf00      	nop
 8003368:	2000582c 	.word	0x2000582c
 800336c:	2000009c 	.word	0x2000009c
 8003370:	200001e1 	.word	0x200001e1
 8003374:	08008e9c 	.word	0x08008e9c
 8003378:	20000828 	.word	0x20000828
 800337c:	2000082c 	.word	0x2000082c
 8003380:	200001e2 	.word	0x200001e2
 8003384:	00000000 	.word	0x00000000

08003388 <sobelFilter>:
			*(processed_dataPtr + width * y + x) = magnitude/2 | *(processed_dataPtr + width * y + x); // blue
		}
	}
}

void sobelFilter(uint16_t width, uint16_t height, uint16_t* originalPTR, uint16_t* processed_dataPtr) {
 8003388:	b5b0      	push	{r4, r5, r7, lr}
 800338a:	b09a      	sub	sp, #104	; 0x68
 800338c:	af00      	add	r7, sp, #0
 800338e:	60ba      	str	r2, [r7, #8]
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	4603      	mov	r3, r0
 8003394:	81fb      	strh	r3, [r7, #14]
 8003396:	460b      	mov	r3, r1
 8003398:	81bb      	strh	r3, [r7, #12]
    int16_t window[9]; //set an array to store values of 3x3 matrix
    int16_t gx[] = {1,0,-1,2,0,-2,1,0,-1};
 800339a:	4ba9      	ldr	r3, [pc, #676]	; (8003640 <sobelFilter+0x2b8>)
 800339c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80033a0:	461d      	mov	r5, r3
 80033a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a6:	682b      	ldr	r3, [r5, #0]
 80033a8:	8023      	strh	r3, [r4, #0]
    int16_t gy[] = {1,2,1,0,0,0,-1,-2,-1};
 80033aa:	4ba6      	ldr	r3, [pc, #664]	; (8003644 <sobelFilter+0x2bc>)
 80033ac:	f107 0414 	add.w	r4, r7, #20
 80033b0:	461d      	mov	r5, r3
 80033b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b6:	682b      	ldr	r3, [r5, #0]
 80033b8:	8023      	strh	r3, [r4, #0]

    for (uint16_t x=1; x<width-1; x++) //outer edge of image will be ignored
 80033ba:	2301      	movs	r3, #1
 80033bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80033c0:	e12d      	b.n	800361e <sobelFilter+0x296>
    {
        for (uint16_t y=1; y<height-1; y++) //outer edge of image will be ignored
 80033c2:	2301      	movs	r3, #1
 80033c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80033c8:	e11d      	b.n	8003606 <sobelFilter+0x27e>
        {
        	//fill the 3x3 window
            uint8_t k =0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            for (int u=x-1; u <=x+1; u++) //horizontal
 80033d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80033d4:	3b01      	subs	r3, #1
 80033d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033d8:	e026      	b.n	8003428 <sobelFilter+0xa0>
            {
                for (int v=y-1; v<=y+1; v++) //vertical
 80033da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80033de:	3b01      	subs	r3, #1
 80033e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80033e2:	e018      	b.n	8003416 <sobelFilter+0x8e>
                {
                    window[k++] = *(originalPTR + width * v + u);
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033e8:	fb02 f303 	mul.w	r3, r2, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f0:	4413      	add	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	4413      	add	r3, r2
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	f887 1063 	strb.w	r1, [r7, #99]	; 0x63
 8003404:	b212      	sxth	r2, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	3368      	adds	r3, #104	; 0x68
 800340a:	443b      	add	r3, r7
 800340c:	f823 2c2c 	strh.w	r2, [r3, #-44]
                for (int v=y-1; v<=y+1; v++) //vertical
 8003410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003412:	3301      	adds	r3, #1
 8003414:	65bb      	str	r3, [r7, #88]	; 0x58
 8003416:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800341a:	3301      	adds	r3, #1
 800341c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800341e:	429a      	cmp	r2, r3
 8003420:	dde0      	ble.n	80033e4 <sobelFilter+0x5c>
            for (int u=x-1; u <=x+1; u++) //horizontal
 8003422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003424:	3301      	adds	r3, #1
 8003426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003428:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800342c:	3301      	adds	r3, #1
 800342e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003430:	429a      	cmp	r2, r3
 8003432:	ddd2      	ble.n	80033da <sobelFilter+0x52>
                }
            }
            //Pass through SobelFilter
            int16_t sumX = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            int16_t sumY = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

            for (uint16_t i = 0; i < 9; i++)
 8003440:	2300      	movs	r3, #0
 8003442:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003446:	e036      	b.n	80034b6 <sobelFilter+0x12e>
            {
            	uint16_t blue = (window[i] & 0x001F);
 8003448:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	3368      	adds	r3, #104	; 0x68
 8003450:	443b      	add	r3, r7
 8003452:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                sumX += blue*gx[i];
 8003460:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	3368      	adds	r3, #104	; 0x68
 8003468:	443b      	add	r3, r7
 800346a:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003474:	fb12 f303 	smulbb	r3, r2, r3
 8003478:	b29a      	uxth	r2, r3
 800347a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800347e:	4413      	add	r3, r2
 8003480:	b29b      	uxth	r3, r3
 8003482:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                sumY += blue*gy[i];
 8003486:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	3368      	adds	r3, #104	; 0x68
 800348e:	443b      	add	r3, r7
 8003490:	f933 3c54 	ldrsh.w	r3, [r3, #-84]
 8003494:	b29b      	uxth	r3, r3
 8003496:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800349a:	fb12 f303 	smulbb	r3, r2, r3
 800349e:	b29a      	uxth	r2, r3
 80034a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80034a4:	4413      	add	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            for (uint16_t i = 0; i < 9; i++)
 80034ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034b0:	3301      	adds	r3, #1
 80034b2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80034b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d9c4      	bls.n	8003448 <sobelFilter+0xc0>
            }
            uint16_t magnitudeBlue = sqrt(pow(sumX, 2) + pow(sumY, 2))/5;
 80034be:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fc ffd2 	bl	800046c <__aeabi_i2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8003638 <sobelFilter+0x2b0>
 80034d0:	ec43 2b10 	vmov	d0, r2, r3
 80034d4:	f004 fd4e 	bl	8007f74 <pow>
 80034d8:	ec55 4b10 	vmov	r4, r5, d0
 80034dc:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fc ffc3 	bl	800046c <__aeabi_i2d>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8003638 <sobelFilter+0x2b0>
 80034ee:	ec43 2b10 	vmov	d0, r2, r3
 80034f2:	f004 fd3f 	bl	8007f74 <pow>
 80034f6:	ec53 2b10 	vmov	r2, r3, d0
 80034fa:	4620      	mov	r0, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	f7fc fe69 	bl	80001d4 <__adddf3>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	ec43 2b17 	vmov	d7, r2, r3
 800350a:	eeb0 0a47 	vmov.f32	s0, s14
 800350e:	eef0 0a67 	vmov.f32	s1, s15
 8003512:	f004 fd9f 	bl	8008054 <sqrt>
 8003516:	ec51 0b10 	vmov	r0, r1, d0
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <sobelFilter+0x2c0>)
 8003520:	f7fd f938 	bl	8000794 <__aeabi_ddiv>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	f7fd fab8 	bl	8000aa0 <__aeabi_d2uiz>
 8003530:	4603      	mov	r3, r0
 8003532:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            *(processed_dataPtr + width * y + x) = ((magnitudeBlue | *(processed_dataPtr + width * y + x)) << 6); // red
 8003536:	89fb      	ldrh	r3, [r7, #14]
 8003538:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	461a      	mov	r2, r3
 8003542:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003546:	4413      	add	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	881a      	ldrh	r2, [r3, #0]
 8003550:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003554:	4313      	orrs	r3, r2
 8003556:	b29a      	uxth	r2, r3
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4619      	mov	r1, r3
 8003564:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003568:	440b      	add	r3, r1
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	440b      	add	r3, r1
 8003570:	0192      	lsls	r2, r2, #6
 8003572:	b292      	uxth	r2, r2
 8003574:	801a      	strh	r2, [r3, #0]
            *(processed_dataPtr + width * y + x) = ((magnitudeBlue *2 | *(processed_dataPtr + width * y + x)) << 5); // green
 8003576:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	b21a      	sxth	r2, r3
 8003580:	89fb      	ldrh	r3, [r7, #14]
 8003582:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4619      	mov	r1, r3
 800358c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003590:	440b      	add	r3, r1
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	440b      	add	r3, r1
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b21b      	sxth	r3, r3
 800359c:	4313      	orrs	r3, r2
 800359e:	b21b      	sxth	r3, r3
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	89fb      	ldrh	r3, [r7, #14]
 80035a4:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4619      	mov	r1, r3
 80035ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80035b2:	440b      	add	r3, r1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	440b      	add	r3, r1
 80035ba:	0152      	lsls	r2, r2, #5
 80035bc:	b292      	uxth	r2, r2
 80035be:	801a      	strh	r2, [r3, #0]
            *(processed_dataPtr + width * y + x) = magnitudeBlue | *(processed_dataPtr + width * y + x); // blue
 80035c0:	89fb      	ldrh	r3, [r7, #14]
 80035c2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80035d0:	4413      	add	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	8819      	ldrh	r1, [r3, #0]
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80035ea:	4413      	add	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80035f6:	430a      	orrs	r2, r1
 80035f8:	b292      	uxth	r2, r2
 80035fa:	801a      	strh	r2, [r3, #0]
        for (uint16_t y=1; y<height-1; y++) //outer edge of image will be ignored
 80035fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003600:	3301      	adds	r3, #1
 8003602:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003606:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800360a:	89bb      	ldrh	r3, [r7, #12]
 800360c:	3b01      	subs	r3, #1
 800360e:	429a      	cmp	r2, r3
 8003610:	f6ff aedb 	blt.w	80033ca <sobelFilter+0x42>
    for (uint16_t x=1; x<width-1; x++) //outer edge of image will be ignored
 8003614:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003618:	3301      	adds	r3, #1
 800361a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800361e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003622:	89fb      	ldrh	r3, [r7, #14]
 8003624:	3b01      	subs	r3, #1
 8003626:	429a      	cmp	r2, r3
 8003628:	f6ff aecb 	blt.w	80033c2 <sobelFilter+0x3a>
        }
    }
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3768      	adds	r7, #104	; 0x68
 8003632:	46bd      	mov	sp, r7
 8003634:	bdb0      	pop	{r4, r5, r7, pc}
 8003636:	bf00      	nop
 8003638:	00000000 	.word	0x00000000
 800363c:	40000000 	.word	0x40000000
 8003640:	08008e28 	.word	0x08008e28
 8003644:	08008e3c 	.word	0x08008e3c
 8003648:	40140000 	.word	0x40140000

0800364c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	f5ad 3d96 	sub.w	sp, sp, #76800	; 0x12c00
 8003652:	b082      	sub	sp, #8
 8003654:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003656:	f000 ff49 	bl	80044ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800365a:	f000 f8a5 	bl	80037a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800365e:	f7fe f9fb 	bl	8001a58 <MX_GPIO_Init>
  MX_CAN1_Init();
 8003662:	f7fe f8cb 	bl	80017fc <MX_CAN1_Init>
  MX_CAN2_Init();
 8003666:	f7fe f8ff 	bl	8001868 <MX_CAN2_Init>
  MX_SPI1_Init();
 800366a:	f000 fb19 	bl	8003ca0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800366e:	f000 fe43 	bl	80042f8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003672:	f7fe fae1 	bl	8001c38 <MX_I2C2_Init>
  MX_DMA_Init();
 8003676:	f7fe f9cf 	bl	8001a18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800367a:	f000 fe67 	bl	800434c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800367e:	f000 fc5b 	bl	8003f38 <MX_TIM5_Init>
  MX_TIM6_Init();
 8003682:	f000 fccf 	bl	8004024 <MX_TIM6_Init>
  MX_TIM10_Init();
 8003686:	f000 fd03 	bl	8004090 <MX_TIM10_Init>
  MX_TIM11_Init();
 800368a:	f000 fd25 	bl	80040d8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  led_off(LED1);
 800368e:	2201      	movs	r2, #1
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	4841      	ldr	r0, [pc, #260]	; (8003798 <main+0x14c>)
 8003694:	f001 ff14 	bl	80054c0 <HAL_GPIO_WritePin>
  led_off(LED2);
 8003698:	2201      	movs	r2, #1
 800369a:	2140      	movs	r1, #64	; 0x40
 800369c:	483e      	ldr	r0, [pc, #248]	; (8003798 <main+0x14c>)
 800369e:	f001 ff0f 	bl	80054c0 <HAL_GPIO_WritePin>
  led_off(LED3);
 80036a2:	2201      	movs	r2, #1
 80036a4:	2120      	movs	r1, #32
 80036a6:	483c      	ldr	r0, [pc, #240]	; (8003798 <main+0x14c>)
 80036a8:	f001 ff0a 	bl	80054c0 <HAL_GPIO_WritePin>
  led_off(LED4);
 80036ac:	2201      	movs	r2, #1
 80036ae:	2110      	movs	r1, #16
 80036b0:	4839      	ldr	r0, [pc, #228]	; (8003798 <main+0x14c>)
 80036b2:	f001 ff05 	bl	80054c0 <HAL_GPIO_WritePin>
  tft_init(PIN_ON_TOP, BLACK, WHITE, YELLOW, DARK_GREEN);
 80036b6:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c4:	2100      	movs	r1, #0
 80036c6:	2000      	movs	r0, #0
 80036c8:	f7ff f89c 	bl	8002804 <tft_init>

  camera_GPIO_init();
 80036cc:	f7fd fc88 	bl	8000fe0 <camera_GPIO_init>
  	tft_prints(0, 0, "Initing camera");
 80036d0:	4a32      	ldr	r2, [pc, #200]	; (800379c <main+0x150>)
 80036d2:	2100      	movs	r1, #0
 80036d4:	2000      	movs	r0, #0
 80036d6:	f7ff fb9d 	bl	8002e14 <tft_prints>
  	tft_update(0);
 80036da:	2000      	movs	r0, #0
 80036dc:	f7ff fcfc 	bl	80030d8 <tft_update>
  	if (camera_init() == CAM_NOT_INITED || camera_init() == CAM_INIT_ERROR) {
 80036e0:	f7fd fcd2 	bl	8001088 <camera_init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <main+0xa8>
 80036ea:	f7fd fccd 	bl	8001088 <camera_init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <main+0xb4>
  		tft_prints(0, 0, "No OV7725 module");
 80036f4:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <main+0x154>)
 80036f6:	2100      	movs	r1, #0
 80036f8:	2000      	movs	r0, #0
 80036fa:	f7ff fb8b 	bl	8002e14 <tft_prints>
 80036fe:	e007      	b.n	8003710 <main+0xc4>
  	}
  	else {
  		tft_prints(0, 0, "Inited");
 8003700:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <main+0x158>)
 8003702:	2100      	movs	r1, #0
 8003704:	2000      	movs	r0, #0
 8003706:	f7ff fb85 	bl	8002e14 <tft_prints>
  		cam_set_state(CAM_CAPTURING);
 800370a:	2004      	movs	r0, #4
 800370c:	f7fd fd00 	bl	8001110 <cam_set_state>
  	}
  	tft_update(0);
 8003710:	2000      	movs	r0, #0
 8003712:	f7ff fce1 	bl	80030d8 <tft_update>
  	cam_set_window(0, 0, QQVGA_120x160);
 8003716:	2203      	movs	r2, #3
 8003718:	2100      	movs	r1, #0
 800371a:	2000      	movs	r0, #0
 800371c:	f7fd fd1a 	bl	8001154 <cam_set_window>
//  	cam_set_framesize(QQVGA_120x160);
  	//cam_set_framerate(CAM_75FPS);
  	cam_set_colormode(CAM_GRAYSCALE);
 8003720:	2000      	movs	r0, #0
 8003722:	f7fd fd05 	bl	8001130 <cam_set_colormode>
  	cam_set_lightmode(CAM_LIGHT_AUTO);
 8003726:	2000      	movs	r0, #0
 8003728:	f7fd fdca 	bl	80012c0 <cam_set_lightmode>
  //	TIM5 ->PSC = 9;

#define IMG_WIDTH 120
#define IMG_HEIGHT 160

  	uint16_t image[IMG_HEIGHT*IMG_WIDTH] = {0};
 800372c:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8003730:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8003734:	4618      	mov	r0, r3
 8003736:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800373a:	461a      	mov	r2, r3
 800373c:	2100      	movs	r1, #0
 800373e:	f004 fc11 	bl	8007f64 <memset>
//  	uint16_t img_data[IMG_HEIGHT*IMG_WIDTH] = {0};
  	uint16_t processed[IMG_HEIGHT*IMG_WIDTH] = {0};
 8003742:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8003746:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800374a:	4618      	mov	r0, r3
 800374c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003750:	461a      	mov	r2, r3
 8003752:	2100      	movs	r1, #0
 8003754:	f004 fc06 	bl	8007f64 <memset>
  	while (1)
  	{
//  		gpio_reset(LED1);
  		//tft_prints(0,0,"Hello World!");
  		//tft_update(10);
  		if (cam_is_frame_ready())
 8003758:	f7fd ff4e 	bl	80015f8 <cam_is_frame_ready>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0fa      	beq.n	8003758 <main+0x10c>
  		{
  			//Get image from camera
  			cam_get_rgb565(image);
 8003762:	f507 4316 	add.w	r3, r7, #38400	; 0x9600
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd ff58 	bl	800161c <cam_get_rgb565>
  			//Commence Grayscale
  			//grayscale(IMG_WIDTH, IMG_HEIGHT, image, processed);
  			//Commence SobelOperation:
  			sobelFilter(IMG_WIDTH, IMG_HEIGHT, image, processed);
 800376c:	463b      	mov	r3, r7
 800376e:	f507 4216 	add.w	r2, r7, #38400	; 0x9600
 8003772:	21a0      	movs	r1, #160	; 0xa0
 8003774:	2078      	movs	r0, #120	; 0x78
 8003776:	f7ff fe07 	bl	8003388 <sobelFilter>
  			//Convert image into printable
  			cam_rgb2printable(processed, processed);
 800377a:	463a      	mov	r2, r7
 800377c:	463b      	mov	r3, r7
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7fd ffc9 	bl	8001718 <cam_rgb2printable>
  			//Print Image
  			tft_print_image(processed,0,0,120,160);
 8003786:	4638      	mov	r0, r7
 8003788:	23a0      	movs	r3, #160	; 0xa0
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2378      	movs	r3, #120	; 0x78
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	f7ff fc71 	bl	8003078 <tft_print_image>
  		if (cam_is_frame_ready())
 8003796:	e7df      	b.n	8003758 <main+0x10c>
 8003798:	40020400 	.word	0x40020400
 800379c:	08008e50 	.word	0x08008e50
 80037a0:	08008e60 	.word	0x08008e60
 80037a4:	08008e74 	.word	0x08008e74

080037a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b094      	sub	sp, #80	; 0x50
 80037ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ae:	f107 0320 	add.w	r3, r7, #32
 80037b2:	2230      	movs	r2, #48	; 0x30
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 fbd4 	bl	8007f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	4b28      	ldr	r3, [pc, #160]	; (8003874 <SystemClock_Config+0xcc>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4a27      	ldr	r2, [pc, #156]	; (8003874 <SystemClock_Config+0xcc>)
 80037d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037da:	6413      	str	r3, [r2, #64]	; 0x40
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <SystemClock_Config+0xcc>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e8:	2300      	movs	r3, #0
 80037ea:	607b      	str	r3, [r7, #4]
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <SystemClock_Config+0xd0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a21      	ldr	r2, [pc, #132]	; (8003878 <SystemClock_Config+0xd0>)
 80037f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <SystemClock_Config+0xd0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003804:	2301      	movs	r3, #1
 8003806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800380e:	2302      	movs	r3, #2
 8003810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003818:	2304      	movs	r3, #4
 800381a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800381c:	23a8      	movs	r3, #168	; 0xa8
 800381e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003820:	2302      	movs	r3, #2
 8003822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003824:	2304      	movs	r3, #4
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003828:	f107 0320 	add.w	r3, r7, #32
 800382c:	4618      	mov	r0, r3
 800382e:	f001 ffbd 	bl	80057ac <HAL_RCC_OscConfig>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003838:	f000 f820 	bl	800387c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800383c:	230f      	movs	r3, #15
 800383e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003840:	2302      	movs	r3, #2
 8003842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003848:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800384c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800384e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	2105      	movs	r1, #5
 800385a:	4618      	mov	r0, r3
 800385c:	f002 fa1e 	bl	8005c9c <HAL_RCC_ClockConfig>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003866:	f000 f809 	bl	800387c <Error_Handler>
  }
}
 800386a:	bf00      	nop
 800386c:	3750      	adds	r7, #80	; 0x50
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000

0800387c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003880:	b672      	cpsid	i
}
 8003882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {}
 8003884:	e7fe      	b.n	8003884 <Error_Handler+0x8>
	...

08003888 <SCCB_GPIO_init>:
#include "tim.h"

#include "stm32f4xx.h"
#define SCCB_TIMER htim5

void SCCB_GPIO_init(void) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure = {0};
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800389c:	2300      	movs	r3, #0
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <SCCB_GPIO_init+0x6c>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <SCCB_GPIO_init+0x6c>)
 80038a6:	f043 0302 	orr.w	r3, r3, #2
 80038aa:	6313      	str	r3, [r2, #48]	; 0x30
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <SCCB_GPIO_init+0x6c>)
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStructure.Pin = OV7725_SDA_PIN;
 80038b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80038be:	2301      	movs	r3, #1
 80038c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80038c2:	2311      	movs	r3, #17
 80038c4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(OV7725_SDA_PORT, &GPIO_InitStructure);
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	480b      	ldr	r0, [pc, #44]	; (80038f8 <SCCB_GPIO_init+0x70>)
 80038cc:	f001 fc44 	bl	8005158 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_SCL_PIN;
 80038d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(OV7725_SCL_PORT, &GPIO_InitStructure);
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4807      	ldr	r0, [pc, #28]	; (80038f8 <SCCB_GPIO_init+0x70>)
 80038dc:	f001 fc3c 	bl	8005158 <HAL_GPIO_Init>
	HAL_TIM_Base_Init(&SCCB_TIMER);
 80038e0:	4806      	ldr	r0, [pc, #24]	; (80038fc <SCCB_GPIO_init+0x74>)
 80038e2:	f003 f903 	bl	8006aec <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&SCCB_TIMER);
 80038e6:	4805      	ldr	r0, [pc, #20]	; (80038fc <SCCB_GPIO_init+0x74>)
 80038e8:	f003 f950 	bl	8006b8c <HAL_TIM_Base_Start>
}
 80038ec:	bf00      	nop
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40020400 	.word	0x40020400
 80038fc:	200058e8 	.word	0x200058e8

08003900 <delay_us>:

static inline void delay_us(uint16_t us) {
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&SCCB_TIMER, 0);
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <delay_us+0x30>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&SCCB_TIMER) < us)
 8003912:	bf00      	nop
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <delay_us+0x30>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	429a      	cmp	r2, r3
 800391e:	d3f9      	bcc.n	8003914 <delay_us+0x14>
		;
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	200058e8 	.word	0x200058e8

08003934 <SCCB_delay>:

static inline void SCCB_delay(void) {
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
	// volatile uint16_t i = 400;
	// while (i--)
	// 	;
	delay_us(12); // min 12us
 8003938:	200c      	movs	r0, #12
 800393a:	f7ff ffe1 	bl	8003900 <delay_us>
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <SCCB_start>:

static inline SCCBState SCCB_start(void) {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
	SDA_H;
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <SCCB_start+0x60>)
 800394a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800394e:	619a      	str	r2, [r3, #24]
	SCL_H;
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <SCCB_start+0x60>)
 8003952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003956:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003958:	f7ff ffec 	bl	8003934 <SCCB_delay>
	if (!SDA_READ)
 800395c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003960:	4810      	ldr	r0, [pc, #64]	; (80039a4 <SCCB_start+0x60>)
 8003962:	f001 fd95 	bl	8005490 <HAL_GPIO_ReadPin>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <SCCB_start+0x2c>
		return SCCB_FAIL; // If SDA is low, bus is busy
 800396c:	2300      	movs	r3, #0
 800396e:	e016      	b.n	800399e <SCCB_start+0x5a>
	SDA_L;
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <SCCB_start+0x60>)
 8003972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003976:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003978:	f7ff ffdc 	bl	8003934 <SCCB_delay>
	if (SDA_READ)
 800397c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003980:	4808      	ldr	r0, [pc, #32]	; (80039a4 <SCCB_start+0x60>)
 8003982:	f001 fd85 	bl	8005490 <HAL_GPIO_ReadPin>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <SCCB_start+0x4c>
		return SCCB_FAIL; // If SDA is high, bus error
 800398c:	2300      	movs	r3, #0
 800398e:	e006      	b.n	800399e <SCCB_start+0x5a>
	SDA_L;
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <SCCB_start+0x60>)
 8003992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003996:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003998:	f7ff ffcc 	bl	8003934 <SCCB_delay>
	return SCCB_OK;
 800399c:	2301      	movs	r3, #1
}
 800399e:	4618      	mov	r0, r3
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40020400 	.word	0x40020400

080039a8 <SCCB_stop>:

static inline void SCCB_stop(void) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
	SCL_L;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <SCCB_stop+0x38>)
 80039ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80039b2:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80039b4:	f7ff ffbe 	bl	8003934 <SCCB_delay>
	SDA_L;
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <SCCB_stop+0x38>)
 80039ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039be:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80039c0:	f7ff ffb8 	bl	8003934 <SCCB_delay>
	SCL_H;
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <SCCB_stop+0x38>)
 80039c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ca:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80039cc:	f7ff ffb2 	bl	8003934 <SCCB_delay>
	SDA_H;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <SCCB_stop+0x38>)
 80039d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d6:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80039d8:	f7ff ffac 	bl	8003934 <SCCB_delay>
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40020400 	.word	0x40020400

080039e4 <SCCB_ack>:

static inline void SCCB_ack(void) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
	SCL_L;
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <SCCB_ack+0x38>)
 80039ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80039ee:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80039f0:	f7ff ffa0 	bl	8003934 <SCCB_delay>
	SDA_L;
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <SCCB_ack+0x38>)
 80039f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039fa:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80039fc:	f7ff ff9a 	bl	8003934 <SCCB_delay>
	SCL_H;
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <SCCB_ack+0x38>)
 8003a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a06:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003a08:	f7ff ff94 	bl	8003934 <SCCB_delay>
	SCL_L;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <SCCB_ack+0x38>)
 8003a0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a12:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003a14:	f7ff ff8e 	bl	8003934 <SCCB_delay>
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40020400 	.word	0x40020400

08003a20 <SCCB_noAck>:

static inline void SCCB_noAck(void) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	SCL_L;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <SCCB_noAck+0x38>)
 8003a26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a2a:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003a2c:	f7ff ff82 	bl	8003934 <SCCB_delay>
	SDA_H;
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <SCCB_noAck+0x38>)
 8003a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a36:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003a38:	f7ff ff7c 	bl	8003934 <SCCB_delay>
	SCL_H;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <SCCB_noAck+0x38>)
 8003a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a42:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003a44:	f7ff ff76 	bl	8003934 <SCCB_delay>
	SCL_L;
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <SCCB_noAck+0x38>)
 8003a4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a4e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003a50:	f7ff ff70 	bl	8003934 <SCCB_delay>
}
 8003a54:	bf00      	nop
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40020400 	.word	0x40020400

08003a5c <SCCB_waitAck>:

static inline SCCBState SCCB_waitAck(void) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
	SCL_L;
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <SCCB_waitAck+0x54>)
 8003a62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a66:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003a68:	f7ff ff64 	bl	8003934 <SCCB_delay>
	SDA_H;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <SCCB_waitAck+0x54>)
 8003a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a72:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003a74:	f7ff ff5e 	bl	8003934 <SCCB_delay>
	SCL_H;
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <SCCB_waitAck+0x54>)
 8003a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a7e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003a80:	f7ff ff58 	bl	8003934 <SCCB_delay>
	if (SDA_READ) {
 8003a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a88:	4809      	ldr	r0, [pc, #36]	; (8003ab0 <SCCB_waitAck+0x54>)
 8003a8a:	f001 fd01 	bl	8005490 <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <SCCB_waitAck+0x44>
		SCL_L;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <SCCB_waitAck+0x54>)
 8003a96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a9a:	619a      	str	r2, [r3, #24]
		return SCCB_FAIL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e004      	b.n	8003aaa <SCCB_waitAck+0x4e>
	}
	SCL_L;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <SCCB_waitAck+0x54>)
 8003aa2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003aa6:	619a      	str	r2, [r3, #24]
	return SCCB_OK;
 8003aa8:	2301      	movs	r3, #1
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40020400 	.word	0x40020400

08003ab4 <SCCB_TxByte>:

static inline void SCCB_TxByte(uint8_t SendByte) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t i = 8;
 8003abe:	2308      	movs	r3, #8
 8003ac0:	73fb      	strb	r3, [r7, #15]
	while (i--) {
 8003ac2:	e01d      	b.n	8003b00 <SCCB_TxByte+0x4c>
		SCL_L;
 8003ac4:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <SCCB_TxByte+0x6c>)
 8003ac6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003aca:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8003acc:	f7ff ff32 	bl	8003934 <SCCB_delay>
		if (SendByte & 0x80) {
 8003ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	da04      	bge.n	8003ae2 <SCCB_TxByte+0x2e>
			SDA_H;
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <SCCB_TxByte+0x6c>)
 8003ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ade:	619a      	str	r2, [r3, #24]
 8003ae0:	e003      	b.n	8003aea <SCCB_TxByte+0x36>
		} else {
			SDA_L;
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <SCCB_TxByte+0x6c>)
 8003ae4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ae8:	619a      	str	r2, [r3, #24]
		}
		SendByte <<= 1;
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	71fb      	strb	r3, [r7, #7]
		SCCB_delay();
 8003af0:	f7ff ff20 	bl	8003934 <SCCB_delay>
		SCL_H;
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <SCCB_TxByte+0x6c>)
 8003af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003afa:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8003afc:	f7ff ff1a 	bl	8003934 <SCCB_delay>
	while (i--) {
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	73fa      	strb	r2, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1da      	bne.n	8003ac4 <SCCB_TxByte+0x10>
	}
	SCL_L;
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <SCCB_TxByte+0x6c>)
 8003b10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b14:	619a      	str	r2, [r3, #24]
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40020400 	.word	0x40020400

08003b24 <SCCB_RxByte>:

static inline uint8_t SCCB_RxByte(void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
	volatile uint8_t i = 8;
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	71bb      	strb	r3, [r7, #6]
	uint8_t ReceiveByte = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	71fb      	strb	r3, [r7, #7]

	SDA_H;
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <SCCB_RxByte+0x70>)
 8003b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b38:	619a      	str	r2, [r3, #24]
	while (i--) {
 8003b3a:	e01a      	b.n	8003b72 <SCCB_RxByte+0x4e>
		ReceiveByte <<= 1;
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	71fb      	strb	r3, [r7, #7]
		SCL_L;
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <SCCB_RxByte+0x70>)
 8003b44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b48:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8003b4a:	f7ff fef3 	bl	8003934 <SCCB_delay>
		SCL_H;
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <SCCB_RxByte+0x70>)
 8003b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b54:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8003b56:	f7ff feed 	bl	8003934 <SCCB_delay>
		if (SDA_READ) {
 8003b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b5e:	480d      	ldr	r0, [pc, #52]	; (8003b94 <SCCB_RxByte+0x70>)
 8003b60:	f001 fc96 	bl	8005490 <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <SCCB_RxByte+0x4e>
			ReceiveByte |= 0x01;
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	71fb      	strb	r3, [r7, #7]
	while (i--) {
 8003b72:	79bb      	ldrb	r3, [r7, #6]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	1e5a      	subs	r2, r3, #1
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	71ba      	strb	r2, [r7, #6]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1dd      	bne.n	8003b3c <SCCB_RxByte+0x18>
		}
	}
	SCL_L;
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <SCCB_RxByte+0x70>)
 8003b82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b86:	619a      	str	r2, [r3, #24]
	return ReceiveByte & 0xFF;
 8003b88:	79fb      	ldrb	r3, [r7, #7]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40020400 	.word	0x40020400

08003b98 <SCCB_send_byte>:

SCCBState SCCB_send_byte(uint16_t WriteAddress, uint8_t SendByte) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	80fb      	strh	r3, [r7, #6]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	717b      	strb	r3, [r7, #5]
	if (!SCCB_start()) {
 8003ba8:	f7ff fecc 	bl	8003944 <SCCB_start>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <SCCB_send_byte+0x1e>
		return SCCB_FAIL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e01b      	b.n	8003bee <SCCB_send_byte+0x56>
	}
	SCCB_TxByte(OV7725_ADDR); // device address
 8003bb6:	2042      	movs	r0, #66	; 0x42
 8003bb8:	f7ff ff7c 	bl	8003ab4 <SCCB_TxByte>
	if (!SCCB_waitAck()) {
 8003bbc:	f7ff ff4e 	bl	8003a5c <SCCB_waitAck>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <SCCB_send_byte+0x36>
		SCCB_stop();
 8003bc6:	f7ff feef 	bl	80039a8 <SCCB_stop>
		return SCCB_FAIL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e00f      	b.n	8003bee <SCCB_send_byte+0x56>
	}
	SCCB_TxByte((uint8_t)(WriteAddress & 0x00FF));
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff6e 	bl	8003ab4 <SCCB_TxByte>
	SCCB_waitAck();
 8003bd8:	f7ff ff40 	bl	8003a5c <SCCB_waitAck>
	SCCB_TxByte(SendByte);
 8003bdc:	797b      	ldrb	r3, [r7, #5]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ff68 	bl	8003ab4 <SCCB_TxByte>
	SCCB_waitAck();
 8003be4:	f7ff ff3a 	bl	8003a5c <SCCB_waitAck>
	SCCB_stop();
 8003be8:	f7ff fede 	bl	80039a8 <SCCB_stop>
	return SCCB_OK;
 8003bec:	2301      	movs	r3, #1
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <SCCB_read_byte>:

SCCBState SCCB_read_byte(uint8_t addr, uint8_t* buf, uint16_t len) {
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	6039      	str	r1, [r7, #0]
 8003c00:	71fb      	strb	r3, [r7, #7]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80bb      	strh	r3, [r7, #4]
	if (!SCCB_start()) {
 8003c06:	f7ff fe9d 	bl	8003944 <SCCB_start>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <SCCB_read_byte+0x1e>
		return SCCB_FAIL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e040      	b.n	8003c96 <SCCB_read_byte+0xa0>
	}
	SCCB_TxByte(OV7725_ADDR); // device address
 8003c14:	2042      	movs	r0, #66	; 0x42
 8003c16:	f7ff ff4d 	bl	8003ab4 <SCCB_TxByte>
	if (!SCCB_waitAck()) {
 8003c1a:	f7ff ff1f 	bl	8003a5c <SCCB_waitAck>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d103      	bne.n	8003c2c <SCCB_read_byte+0x36>
		SCCB_stop();
 8003c24:	f7ff fec0 	bl	80039a8 <SCCB_stop>
		return SCCB_FAIL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e034      	b.n	8003c96 <SCCB_read_byte+0xa0>
	}
	SCCB_TxByte(addr);
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ff40 	bl	8003ab4 <SCCB_TxByte>
	SCCB_waitAck();
 8003c34:	f7ff ff12 	bl	8003a5c <SCCB_waitAck>
	SCCB_stop();
 8003c38:	f7ff feb6 	bl	80039a8 <SCCB_stop>

	if (!SCCB_start()) {
 8003c3c:	f7ff fe82 	bl	8003944 <SCCB_start>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <SCCB_read_byte+0x54>
		return SCCB_FAIL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e025      	b.n	8003c96 <SCCB_read_byte+0xa0>
	}
	SCCB_TxByte(OV7725_ADDR + 1);
 8003c4a:	2043      	movs	r0, #67	; 0x43
 8003c4c:	f7ff ff32 	bl	8003ab4 <SCCB_TxByte>
	if (!SCCB_waitAck()) {
 8003c50:	f7ff ff04 	bl	8003a5c <SCCB_waitAck>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d117      	bne.n	8003c8a <SCCB_read_byte+0x94>
		SCCB_stop();
 8003c5a:	f7ff fea5 	bl	80039a8 <SCCB_stop>
		return SCCB_FAIL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e019      	b.n	8003c96 <SCCB_read_byte+0xa0>
	}
	while (len) {
		*buf = SCCB_RxByte();
 8003c62:	f7ff ff5f 	bl	8003b24 <SCCB_RxByte>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	701a      	strb	r2, [r3, #0]
		if (len == 1) {
 8003c6e:	88bb      	ldrh	r3, [r7, #4]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <SCCB_read_byte+0x84>
			SCCB_noAck();
 8003c74:	f7ff fed4 	bl	8003a20 <SCCB_noAck>
 8003c78:	e001      	b.n	8003c7e <SCCB_read_byte+0x88>
		} else {
			SCCB_ack();
 8003c7a:	f7ff feb3 	bl	80039e4 <SCCB_ack>
		}
		buf++;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	603b      	str	r3, [r7, #0]
		len--;
 8003c84:	88bb      	ldrh	r3, [r7, #4]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	80bb      	strh	r3, [r7, #4]
	while (len) {
 8003c8a:	88bb      	ldrh	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e8      	bne.n	8003c62 <SCCB_read_byte+0x6c>
	}
	SCCB_stop();
 8003c90:	f7ff fe8a 	bl	80039a8 <SCCB_stop>
	return SCCB_OK;
 8003c94:	2301      	movs	r3, #1
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ca4:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <MX_SPI1_Init+0x68>)
 8003ca8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cb8:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003cec:	220a      	movs	r2, #10
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cf0:	4804      	ldr	r0, [pc, #16]	; (8003d04 <MX_SPI1_Init+0x64>)
 8003cf2:	f002 f9f3 	bl	80060dc <HAL_SPI_Init>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cfc:	f7ff fdbe 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20005830 	.word	0x20005830
 8003d08:	40013000 	.word	0x40013000

08003d0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a39      	ldr	r2, [pc, #228]	; (8003e10 <HAL_SPI_MspInit+0x104>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d16b      	bne.n	8003e06 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	4b38      	ldr	r3, [pc, #224]	; (8003e14 <HAL_SPI_MspInit+0x108>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	4a37      	ldr	r2, [pc, #220]	; (8003e14 <HAL_SPI_MspInit+0x108>)
 8003d38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3e:	4b35      	ldr	r3, [pc, #212]	; (8003e14 <HAL_SPI_MspInit+0x108>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_SPI_MspInit+0x108>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a30      	ldr	r2, [pc, #192]	; (8003e14 <HAL_SPI_MspInit+0x108>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <HAL_SPI_MspInit+0x108>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MOSI_Pin;
 8003d66:	23a0      	movs	r3, #160	; 0xa0
 8003d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d72:	2303      	movs	r3, #3
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d76:	2305      	movs	r3, #5
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4825      	ldr	r0, [pc, #148]	; (8003e18 <HAL_SPI_MspInit+0x10c>)
 8003d82:	f001 f9e9 	bl	8005158 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003d86:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003d88:	4a25      	ldr	r2, [pc, #148]	; (8003e20 <HAL_SPI_MspInit+0x114>)
 8003d8a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003d8e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003d92:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d94:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003d96:	2240      	movs	r2, #64	; 0x40
 8003d98:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003da0:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003da6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003da8:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dba:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003dc0:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003dc8:	2203      	movs	r2, #3
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_INC16;
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003dce:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003dda:	4810      	ldr	r0, [pc, #64]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003ddc:	f000 fe2a 	bl	8004a34 <HAL_DMA_Init>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8003de6:	f7ff fd49 	bl	800387c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003dee:	649a      	str	r2, [r3, #72]	; 0x48
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <HAL_SPI_MspInit+0x110>)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003df6:	2200      	movs	r2, #0
 8003df8:	2100      	movs	r1, #0
 8003dfa:	2023      	movs	r0, #35	; 0x23
 8003dfc:	f000 fde3 	bl	80049c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003e00:	2023      	movs	r0, #35	; 0x23
 8003e02:	f000 fdfc 	bl	80049fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003e06:	bf00      	nop
 8003e08:	3728      	adds	r7, #40	; 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40013000 	.word	0x40013000
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020000 	.word	0x40020000
 8003e1c:	20005888 	.word	0x20005888
 8003e20:	40026458 	.word	0x40026458

08003e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_MspInit+0x4c>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <HAL_MspInit+0x4c>)
 8003e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e38:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <HAL_MspInit+0x4c>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_MspInit+0x4c>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <HAL_MspInit+0x4c>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6413      	str	r3, [r2, #64]	; 0x40
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_MspInit+0x4c>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800

08003e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e78:	e7fe      	b.n	8003e78 <NMI_Handler+0x4>

08003e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e7e:	e7fe      	b.n	8003e7e <HardFault_Handler+0x4>

08003e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e84:	e7fe      	b.n	8003e84 <MemManage_Handler+0x4>

08003e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e86:	b480      	push	{r7}
 8003e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e8a:	e7fe      	b.n	8003e8a <BusFault_Handler+0x4>

08003e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e90:	e7fe      	b.n	8003e90 <UsageFault_Handler+0x4>

08003e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e92:	b480      	push	{r7}
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ec0:	f000 fb66 	bl	8004590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <SPI1_IRQHandler+0x10>)
 8003ece:	f002 fb81 	bl	80065d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20005830 	.word	0x20005830

08003edc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAM_VSYNC_Pin);
 8003ee0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ee4:	f001 fb06 	bl	80054f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <TIM5_IRQHandler+0x10>)
 8003ef2:	f002 ff0c 	bl	8006d0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200058e8 	.word	0x200058e8

08003f00 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003f04:	4802      	ldr	r0, [pc, #8]	; (8003f10 <DMA2_Stream3_IRQHandler+0x10>)
 8003f06:	f000 febd 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20005888 	.word	0x20005888

08003f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <SystemInit+0x20>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <SystemInit+0x20>)
 8003f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <MX_TIM5_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08e      	sub	sp, #56	; 0x38
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f4c:	f107 0320 	add.w	r3, r7, #32
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
 8003f64:	615a      	str	r2, [r3, #20]
 8003f66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f68:	4b2c      	ldr	r3, [pc, #176]	; (800401c <MX_TIM5_Init+0xe4>)
 8003f6a:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <MX_TIM5_Init+0xe8>)
 8003f6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8003f6e:	4b2b      	ldr	r3, [pc, #172]	; (800401c <MX_TIM5_Init+0xe4>)
 8003f70:	2253      	movs	r2, #83	; 0x53
 8003f72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f74:	4b29      	ldr	r3, [pc, #164]	; (800401c <MX_TIM5_Init+0xe4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8003f7a:	4b28      	ldr	r3, [pc, #160]	; (800401c <MX_TIM5_Init+0xe4>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f80:	4b26      	ldr	r3, [pc, #152]	; (800401c <MX_TIM5_Init+0xe4>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f86:	4b25      	ldr	r3, [pc, #148]	; (800401c <MX_TIM5_Init+0xe4>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003f8c:	4823      	ldr	r0, [pc, #140]	; (800401c <MX_TIM5_Init+0xe4>)
 8003f8e:	f002 fdad 	bl	8006aec <HAL_TIM_Base_Init>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8003f98:	f7ff fc70 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	481c      	ldr	r0, [pc, #112]	; (800401c <MX_TIM5_Init+0xe4>)
 8003faa:	f003 f87b 	bl	80070a4 <HAL_TIM_ConfigClockSource>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8003fb4:	f7ff fc62 	bl	800387c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003fb8:	4818      	ldr	r0, [pc, #96]	; (800401c <MX_TIM5_Init+0xe4>)
 8003fba:	f002 fe4f 	bl	8006c5c <HAL_TIM_PWM_Init>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8003fc4:	f7ff fc5a 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003fd0:	f107 0320 	add.w	r3, r7, #32
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4811      	ldr	r0, [pc, #68]	; (800401c <MX_TIM5_Init+0xe4>)
 8003fd8:	f003 fc48 	bl	800786c <HAL_TIMEx_MasterConfigSynchronization>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8003fe2:	f7ff fc4b 	bl	800387c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fe6:	2360      	movs	r3, #96	; 0x60
 8003fe8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4807      	ldr	r0, [pc, #28]	; (800401c <MX_TIM5_Init+0xe4>)
 8003ffe:	f002 ff8f 	bl	8006f20 <HAL_TIM_PWM_ConfigChannel>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8004008:	f7ff fc38 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800400c:	4803      	ldr	r0, [pc, #12]	; (800401c <MX_TIM5_Init+0xe4>)
 800400e:	f000 f939 	bl	8004284 <HAL_TIM_MspPostInit>

}
 8004012:	bf00      	nop
 8004014:	3738      	adds	r7, #56	; 0x38
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	200058e8 	.word	0x200058e8
 8004020:	40000c00 	.word	0x40000c00

08004024 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800402a:	463b      	mov	r3, r7
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <MX_TIM6_Init+0x64>)
 8004034:	4a15      	ldr	r2, [pc, #84]	; (800408c <MX_TIM6_Init+0x68>)
 8004036:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8004038:	4b13      	ldr	r3, [pc, #76]	; (8004088 <MX_TIM6_Init+0x64>)
 800403a:	2253      	movs	r2, #83	; 0x53
 800403c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <MX_TIM6_Init+0x64>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <MX_TIM6_Init+0x64>)
 8004046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800404a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <MX_TIM6_Init+0x64>)
 800404e:	2200      	movs	r2, #0
 8004050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004052:	480d      	ldr	r0, [pc, #52]	; (8004088 <MX_TIM6_Init+0x64>)
 8004054:	f002 fd4a 	bl	8006aec <HAL_TIM_Base_Init>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800405e:	f7ff fc0d 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800406a:	463b      	mov	r3, r7
 800406c:	4619      	mov	r1, r3
 800406e:	4806      	ldr	r0, [pc, #24]	; (8004088 <MX_TIM6_Init+0x64>)
 8004070:	f003 fbfc 	bl	800786c <HAL_TIMEx_MasterConfigSynchronization>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800407a:	f7ff fbff 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20005930 	.word	0x20005930
 800408c:	40001000 	.word	0x40001000

08004090 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <MX_TIM10_Init+0x40>)
 8004096:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <MX_TIM10_Init+0x44>)
 8004098:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <MX_TIM10_Init+0x40>)
 800409c:	2253      	movs	r2, #83	; 0x53
 800409e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <MX_TIM10_Init+0x40>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <MX_TIM10_Init+0x40>)
 80040a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <MX_TIM10_Init+0x40>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <MX_TIM10_Init+0x40>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80040ba:	4805      	ldr	r0, [pc, #20]	; (80040d0 <MX_TIM10_Init+0x40>)
 80040bc:	f002 fd16 	bl	8006aec <HAL_TIM_Base_Init>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80040c6:	f7ff fbd9 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20005978 	.word	0x20005978
 80040d4:	40014400 	.word	0x40014400

080040d8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80040dc:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <MX_TIM11_Init+0x40>)
 80040de:	4a0f      	ldr	r2, [pc, #60]	; (800411c <MX_TIM11_Init+0x44>)
 80040e0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <MX_TIM11_Init+0x40>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <MX_TIM11_Init+0x40>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <MX_TIM11_Init+0x40>)
 80040f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040f4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <MX_TIM11_Init+0x40>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <MX_TIM11_Init+0x40>)
 80040fe:	2200      	movs	r2, #0
 8004100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004102:	4805      	ldr	r0, [pc, #20]	; (8004118 <MX_TIM11_Init+0x40>)
 8004104:	f002 fcf2 	bl	8006aec <HAL_TIM_Base_Init>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800410e:	f7ff fbb5 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200059c0 	.word	0x200059c0
 800411c:	40014800 	.word	0x40014800

08004120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08e      	sub	sp, #56	; 0x38
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a4b      	ldr	r2, [pc, #300]	; (800426c <HAL_TIM_Base_MspInit+0x14c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d116      	bne.n	8004170 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	623b      	str	r3, [r7, #32]
 8004146:	4b4a      	ldr	r3, [pc, #296]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a49      	ldr	r2, [pc, #292]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 800414c:	f043 0308 	orr.w	r3, r3, #8
 8004150:	6413      	str	r3, [r2, #64]	; 0x40
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	623b      	str	r3, [r7, #32]
 800415c:	6a3b      	ldr	r3, [r7, #32]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800415e:	2200      	movs	r2, #0
 8004160:	2100      	movs	r1, #0
 8004162:	2032      	movs	r0, #50	; 0x32
 8004164:	f000 fc2f 	bl	80049c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004168:	2032      	movs	r0, #50	; 0x32
 800416a:	f000 fc48 	bl	80049fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800416e:	e078      	b.n	8004262 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM6)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a3f      	ldr	r2, [pc, #252]	; (8004274 <HAL_TIM_Base_MspInit+0x154>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a3b      	ldr	r2, [pc, #236]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 8004184:	f043 0310 	orr.w	r3, r3, #16
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b39      	ldr	r3, [pc, #228]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	69fb      	ldr	r3, [r7, #28]
}
 8004196:	e064      	b.n	8004262 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM10)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a36      	ldr	r2, [pc, #216]	; (8004278 <HAL_TIM_Base_MspInit+0x158>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d12d      	bne.n	80041fe <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	4b32      	ldr	r3, [pc, #200]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	4a31      	ldr	r2, [pc, #196]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 80041ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b0:	6453      	str	r3, [r2, #68]	; 0x44
 80041b2:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	4a2a      	ldr	r2, [pc, #168]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 80041c8:	f043 0302 	orr.w	r3, r3, #2
 80041cc:	6313      	str	r3, [r2, #48]	; 0x30
 80041ce:	4b28      	ldr	r3, [pc, #160]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e0:	2302      	movs	r3, #2
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e8:	2300      	movs	r3, #0
 80041ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80041ec:	2303      	movs	r3, #3
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f4:	4619      	mov	r1, r3
 80041f6:	4821      	ldr	r0, [pc, #132]	; (800427c <HAL_TIM_Base_MspInit+0x15c>)
 80041f8:	f000 ffae 	bl	8005158 <HAL_GPIO_Init>
}
 80041fc:	e031      	b.n	8004262 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM11)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1f      	ldr	r2, [pc, #124]	; (8004280 <HAL_TIM_Base_MspInit+0x160>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d12c      	bne.n	8004262 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 800420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004210:	4a17      	ldr	r2, [pc, #92]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 8004212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004216:	6453      	str	r3, [r2, #68]	; 0x44
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	4a10      	ldr	r2, [pc, #64]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	6313      	str	r3, [r2, #48]	; 0x30
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <HAL_TIM_Base_MspInit+0x150>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004246:	2302      	movs	r3, #2
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424a:	2300      	movs	r3, #0
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424e:	2300      	movs	r3, #0
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004252:	2303      	movs	r3, #3
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425a:	4619      	mov	r1, r3
 800425c:	4807      	ldr	r0, [pc, #28]	; (800427c <HAL_TIM_Base_MspInit+0x15c>)
 800425e:	f000 ff7b 	bl	8005158 <HAL_GPIO_Init>
}
 8004262:	bf00      	nop
 8004264:	3738      	adds	r7, #56	; 0x38
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40000c00 	.word	0x40000c00
 8004270:	40023800 	.word	0x40023800
 8004274:	40001000 	.word	0x40001000
 8004278:	40014400 	.word	0x40014400
 800427c:	40020400 	.word	0x40020400
 8004280:	40014800 	.word	0x40014800

08004284 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428c:	f107 030c 	add.w	r3, r7, #12
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a12      	ldr	r2, [pc, #72]	; (80042ec <HAL_TIM_MspPostInit+0x68>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d11d      	bne.n	80042e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <HAL_TIM_MspPostInit+0x6c>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <HAL_TIM_MspPostInit+0x6c>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30
 80042b6:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <HAL_TIM_MspPostInit+0x6c>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042c2:	2301      	movs	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c6:	2302      	movs	r3, #2
 80042c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80042d2:	2302      	movs	r3, #2
 80042d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d6:	f107 030c 	add.w	r3, r7, #12
 80042da:	4619      	mov	r1, r3
 80042dc:	4805      	ldr	r0, [pc, #20]	; (80042f4 <HAL_TIM_MspPostInit+0x70>)
 80042de:	f000 ff3b 	bl	8005158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80042e2:	bf00      	nop
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40020000 	.word	0x40020000

080042f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <MX_USART1_UART_Init+0x4c>)
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <MX_USART1_UART_Init+0x50>)
 8004300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <MX_USART1_UART_Init+0x4c>)
 8004304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <MX_USART1_UART_Init+0x4c>)
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <MX_USART1_UART_Init+0x4c>)
 8004312:	2200      	movs	r2, #0
 8004314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <MX_USART1_UART_Init+0x4c>)
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <MX_USART1_UART_Init+0x4c>)
 800431e:	220c      	movs	r2, #12
 8004320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <MX_USART1_UART_Init+0x4c>)
 8004324:	2200      	movs	r2, #0
 8004326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <MX_USART1_UART_Init+0x4c>)
 800432a:	2200      	movs	r2, #0
 800432c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800432e:	4805      	ldr	r0, [pc, #20]	; (8004344 <MX_USART1_UART_Init+0x4c>)
 8004330:	f003 fb2c 	bl	800798c <HAL_UART_Init>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800433a:	f7ff fa9f 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20005a08 	.word	0x20005a08
 8004348:	40011000 	.word	0x40011000

0800434c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004350:	4b11      	ldr	r3, [pc, #68]	; (8004398 <MX_USART2_UART_Init+0x4c>)
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <MX_USART2_UART_Init+0x50>)
 8004354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <MX_USART2_UART_Init+0x4c>)
 8004358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800435c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800435e:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <MX_USART2_UART_Init+0x4c>)
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <MX_USART2_UART_Init+0x4c>)
 8004366:	2200      	movs	r2, #0
 8004368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <MX_USART2_UART_Init+0x4c>)
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <MX_USART2_UART_Init+0x4c>)
 8004372:	220c      	movs	r2, #12
 8004374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <MX_USART2_UART_Init+0x4c>)
 8004378:	2200      	movs	r2, #0
 800437a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <MX_USART2_UART_Init+0x4c>)
 800437e:	2200      	movs	r2, #0
 8004380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004382:	4805      	ldr	r0, [pc, #20]	; (8004398 <MX_USART2_UART_Init+0x4c>)
 8004384:	f003 fb02 	bl	800798c <HAL_UART_Init>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800438e:	f7ff fa75 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20005a4c 	.word	0x20005a4c
 800439c:	40004400 	.word	0x40004400

080043a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a8:	f107 031c 	add.w	r3, r7, #28
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a32      	ldr	r2, [pc, #200]	; (8004488 <HAL_UART_MspInit+0xe8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d12d      	bne.n	800441e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_UART_MspInit+0xec>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	4a30      	ldr	r2, [pc, #192]	; (800448c <HAL_UART_MspInit+0xec>)
 80043cc:	f043 0310 	orr.w	r3, r3, #16
 80043d0:	6453      	str	r3, [r2, #68]	; 0x44
 80043d2:	4b2e      	ldr	r3, [pc, #184]	; (800448c <HAL_UART_MspInit+0xec>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	4b2a      	ldr	r3, [pc, #168]	; (800448c <HAL_UART_MspInit+0xec>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_UART_MspInit+0xec>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	6313      	str	r3, [r2, #48]	; 0x30
 80043ee:	4b27      	ldr	r3, [pc, #156]	; (800448c <HAL_UART_MspInit+0xec>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004400:	2302      	movs	r3, #2
 8004402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004404:	2300      	movs	r3, #0
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004408:	2303      	movs	r3, #3
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800440c:	2307      	movs	r3, #7
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004410:	f107 031c 	add.w	r3, r7, #28
 8004414:	4619      	mov	r1, r3
 8004416:	481e      	ldr	r0, [pc, #120]	; (8004490 <HAL_UART_MspInit+0xf0>)
 8004418:	f000 fe9e 	bl	8005158 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800441c:	e030      	b.n	8004480 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <HAL_UART_MspInit+0xf4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d12b      	bne.n	8004480 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	4b17      	ldr	r3, [pc, #92]	; (800448c <HAL_UART_MspInit+0xec>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	4a16      	ldr	r2, [pc, #88]	; (800448c <HAL_UART_MspInit+0xec>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004436:	6413      	str	r3, [r2, #64]	; 0x40
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <HAL_UART_MspInit+0xec>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_UART_MspInit+0xec>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	4a0f      	ldr	r2, [pc, #60]	; (800448c <HAL_UART_MspInit+0xec>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6313      	str	r3, [r2, #48]	; 0x30
 8004454:	4b0d      	ldr	r3, [pc, #52]	; (800448c <HAL_UART_MspInit+0xec>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004460:	230c      	movs	r3, #12
 8004462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004464:	2302      	movs	r3, #2
 8004466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004468:	2300      	movs	r3, #0
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446c:	2303      	movs	r3, #3
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004470:	2307      	movs	r3, #7
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004474:	f107 031c 	add.w	r3, r7, #28
 8004478:	4619      	mov	r1, r3
 800447a:	4805      	ldr	r0, [pc, #20]	; (8004490 <HAL_UART_MspInit+0xf0>)
 800447c:	f000 fe6c 	bl	8005158 <HAL_GPIO_Init>
}
 8004480:	bf00      	nop
 8004482:	3730      	adds	r7, #48	; 0x30
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40011000 	.word	0x40011000
 800448c:	40023800 	.word	0x40023800
 8004490:	40020000 	.word	0x40020000
 8004494:	40004400 	.word	0x40004400

08004498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800449c:	480d      	ldr	r0, [pc, #52]	; (80044d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800449e:	490e      	ldr	r1, [pc, #56]	; (80044d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044a0:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044a4:	e002      	b.n	80044ac <LoopCopyDataInit>

080044a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044aa:	3304      	adds	r3, #4

080044ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044b0:	d3f9      	bcc.n	80044a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044b2:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044b4:	4c0b      	ldr	r4, [pc, #44]	; (80044e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044b8:	e001      	b.n	80044be <LoopFillZerobss>

080044ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044bc:	3204      	adds	r2, #4

080044be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044c0:	d3fb      	bcc.n	80044ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044c2:	f7ff fd27 	bl	8003f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044c6:	f003 fd29 	bl	8007f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044ca:	f7ff f8bf 	bl	800364c <main>
  bx  lr    
 80044ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044d8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80044dc:	08009d78 	.word	0x08009d78
  ldr r2, =_sbss
 80044e0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80044e4:	20005a94 	.word	0x20005a94

080044e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044e8:	e7fe      	b.n	80044e8 <ADC_IRQHandler>
	...

080044ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044f0:	4b0e      	ldr	r3, [pc, #56]	; (800452c <HAL_Init+0x40>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a0d      	ldr	r2, [pc, #52]	; (800452c <HAL_Init+0x40>)
 80044f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_Init+0x40>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <HAL_Init+0x40>)
 8004502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004508:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_Init+0x40>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a07      	ldr	r2, [pc, #28]	; (800452c <HAL_Init+0x40>)
 800450e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004514:	2003      	movs	r0, #3
 8004516:	f000 fa4b 	bl	80049b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800451a:	200f      	movs	r0, #15
 800451c:	f000 f808 	bl	8004530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004520:	f7ff fc80 	bl	8003e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40023c00 	.word	0x40023c00

08004530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004538:	4b12      	ldr	r3, [pc, #72]	; (8004584 <HAL_InitTick+0x54>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_InitTick+0x58>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	4619      	mov	r1, r3
 8004542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004546:	fbb3 f3f1 	udiv	r3, r3, r1
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fa63 	bl	8004a1a <HAL_SYSTICK_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e00e      	b.n	800457c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b0f      	cmp	r3, #15
 8004562:	d80a      	bhi.n	800457a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004564:	2200      	movs	r2, #0
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	f000 fa2b 	bl	80049c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004570:	4a06      	ldr	r2, [pc, #24]	; (800458c <HAL_InitTick+0x5c>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e000      	b.n	800457c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200000a0 	.word	0x200000a0
 8004588:	200000a8 	.word	0x200000a8
 800458c:	200000a4 	.word	0x200000a4

08004590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_IncTick+0x20>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_IncTick+0x24>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4413      	add	r3, r2
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <HAL_IncTick+0x24>)
 80045a2:	6013      	str	r3, [r2, #0]
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	200000a8 	.word	0x200000a8
 80045b4:	20005a90 	.word	0x20005a90

080045b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return uwTick;
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <HAL_GetTick+0x14>)
 80045be:	681b      	ldr	r3, [r3, #0]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20005a90 	.word	0x20005a90

080045d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045d8:	f7ff ffee 	bl	80045b8 <HAL_GetTick>
 80045dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d005      	beq.n	80045f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <HAL_Delay+0x44>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045f6:	bf00      	nop
 80045f8:	f7ff ffde 	bl	80045b8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	429a      	cmp	r2, r3
 8004606:	d8f7      	bhi.n	80045f8 <HAL_Delay+0x28>
  {
  }
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	200000a8 	.word	0x200000a8

08004618 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e0ed      	b.n	8004806 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fd f94c 	bl	80018d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800464c:	f7ff ffb4 	bl	80045b8 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004652:	e012      	b.n	800467a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004654:	f7ff ffb0 	bl	80045b8 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b0a      	cmp	r3, #10
 8004660:	d90b      	bls.n	800467a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2205      	movs	r2, #5
 8004672:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0c5      	b.n	8004806 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0e5      	beq.n	8004654 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0202 	bic.w	r2, r2, #2
 8004696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004698:	f7ff ff8e 	bl	80045b8 <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800469e:	e012      	b.n	80046c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046a0:	f7ff ff8a 	bl	80045b8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b0a      	cmp	r3, #10
 80046ac:	d90b      	bls.n	80046c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2205      	movs	r2, #5
 80046be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e09f      	b.n	8004806 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e5      	bne.n	80046a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7e1b      	ldrb	r3, [r3, #24]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d108      	bne.n	80046ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e007      	b.n	80046fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	7e5b      	ldrb	r3, [r3, #25]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d108      	bne.n	8004718 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e007      	b.n	8004728 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004726:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7e9b      	ldrb	r3, [r3, #26]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d108      	bne.n	8004742 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0220 	orr.w	r2, r2, #32
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e007      	b.n	8004752 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0220 	bic.w	r2, r2, #32
 8004750:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7edb      	ldrb	r3, [r3, #27]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d108      	bne.n	800476c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0210 	bic.w	r2, r2, #16
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e007      	b.n	800477c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0210 	orr.w	r2, r2, #16
 800477a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	7f1b      	ldrb	r3, [r3, #28]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d108      	bne.n	8004796 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0208 	orr.w	r2, r2, #8
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e007      	b.n	80047a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0208 	bic.w	r2, r2, #8
 80047a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	7f5b      	ldrb	r3, [r3, #29]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d108      	bne.n	80047c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0204 	orr.w	r2, r2, #4
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e007      	b.n	80047d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0204 	bic.w	r2, r2, #4
 80047ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	1e5a      	subs	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004820:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <__NVIC_SetPriorityGrouping+0x44>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800482c:	4013      	ands	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800483c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004842:	4a04      	ldr	r2, [pc, #16]	; (8004854 <__NVIC_SetPriorityGrouping+0x44>)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	60d3      	str	r3, [r2, #12]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <__NVIC_GetPriorityGrouping+0x18>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	0a1b      	lsrs	r3, r3, #8
 8004862:	f003 0307 	and.w	r3, r3, #7
}
 8004866:	4618      	mov	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	2b00      	cmp	r3, #0
 8004884:	db0b      	blt.n	800489e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	f003 021f 	and.w	r2, r3, #31
 800488c:	4907      	ldr	r1, [pc, #28]	; (80048ac <__NVIC_EnableIRQ+0x38>)
 800488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2001      	movs	r0, #1
 8004896:	fa00 f202 	lsl.w	r2, r0, r2
 800489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	e000e100 	.word	0xe000e100

080048b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	6039      	str	r1, [r7, #0]
 80048ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	db0a      	blt.n	80048da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	490c      	ldr	r1, [pc, #48]	; (80048fc <__NVIC_SetPriority+0x4c>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	440b      	add	r3, r1
 80048d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d8:	e00a      	b.n	80048f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4908      	ldr	r1, [pc, #32]	; (8004900 <__NVIC_SetPriority+0x50>)
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	3b04      	subs	r3, #4
 80048e8:	0112      	lsls	r2, r2, #4
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	440b      	add	r3, r1
 80048ee:	761a      	strb	r2, [r3, #24]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000e100 	.word	0xe000e100
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	; 0x24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f1c3 0307 	rsb	r3, r3, #7
 800491e:	2b04      	cmp	r3, #4
 8004920:	bf28      	it	cs
 8004922:	2304      	movcs	r3, #4
 8004924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3304      	adds	r3, #4
 800492a:	2b06      	cmp	r3, #6
 800492c:	d902      	bls.n	8004934 <NVIC_EncodePriority+0x30>
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3b03      	subs	r3, #3
 8004932:	e000      	b.n	8004936 <NVIC_EncodePriority+0x32>
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43da      	mvns	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	401a      	ands	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800494c:	f04f 31ff 	mov.w	r1, #4294967295
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	43d9      	mvns	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800495c:	4313      	orrs	r3, r2
         );
}
 800495e:	4618      	mov	r0, r3
 8004960:	3724      	adds	r7, #36	; 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800497c:	d301      	bcc.n	8004982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800497e:	2301      	movs	r3, #1
 8004980:	e00f      	b.n	80049a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004982:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <SysTick_Config+0x40>)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3b01      	subs	r3, #1
 8004988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800498a:	210f      	movs	r1, #15
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	f7ff ff8e 	bl	80048b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <SysTick_Config+0x40>)
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800499a:	4b04      	ldr	r3, [pc, #16]	; (80049ac <SysTick_Config+0x40>)
 800499c:	2207      	movs	r2, #7
 800499e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	e000e010 	.word	0xe000e010

080049b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff29 	bl	8004810 <__NVIC_SetPriorityGrouping>
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b086      	sub	sp, #24
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	4603      	mov	r3, r0
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d8:	f7ff ff3e 	bl	8004858 <__NVIC_GetPriorityGrouping>
 80049dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	6978      	ldr	r0, [r7, #20]
 80049e4:	f7ff ff8e 	bl	8004904 <NVIC_EncodePriority>
 80049e8:	4602      	mov	r2, r0
 80049ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ee:	4611      	mov	r1, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff5d 	bl	80048b0 <__NVIC_SetPriority>
}
 80049f6:	bf00      	nop
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ff31 	bl	8004874 <__NVIC_EnableIRQ>
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ffa2 	bl	800496c <SysTick_Config>
 8004a28:	4603      	mov	r3, r0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a40:	f7ff fdba 	bl	80045b8 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e099      	b.n	8004b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a70:	e00f      	b.n	8004a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a72:	f7ff fda1 	bl	80045b8 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d908      	bls.n	8004a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2203      	movs	r2, #3
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e078      	b.n	8004b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e8      	bne.n	8004a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4b38      	ldr	r3, [pc, #224]	; (8004b8c <HAL_DMA_Init+0x158>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d107      	bne.n	8004afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	4313      	orrs	r3, r2
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0307 	bic.w	r3, r3, #7
 8004b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d117      	bne.n	8004b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00e      	beq.n	8004b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fa91 	bl	8005060 <DMA_CheckFifoParam>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2240      	movs	r2, #64	; 0x40
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b52:	2301      	movs	r3, #1
 8004b54:	e016      	b.n	8004b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa48 	bl	8004ff4 <DMA_CalcBaseAndBitshift>
 8004b64:	4603      	mov	r3, r0
 8004b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	223f      	movs	r2, #63	; 0x3f
 8004b6e:	409a      	lsls	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	f010803f 	.word	0xf010803f

08004b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_DMA_Start_IT+0x26>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e040      	b.n	8004c38 <HAL_DMA_Start_IT+0xa8>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d12f      	bne.n	8004c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f9da 	bl	8004f98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be8:	223f      	movs	r2, #63	; 0x3f
 8004bea:	409a      	lsls	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0216 	orr.w	r2, r2, #22
 8004bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0208 	orr.w	r2, r2, #8
 8004c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e005      	b.n	8004c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
 8004c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d004      	beq.n	8004c5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e00c      	b.n	8004c78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2205      	movs	r2, #5
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c90:	4b8e      	ldr	r3, [pc, #568]	; (8004ecc <HAL_DMA_IRQHandler+0x248>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a8e      	ldr	r2, [pc, #568]	; (8004ed0 <HAL_DMA_IRQHandler+0x24c>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	2208      	movs	r2, #8
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01a      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d013      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0204 	bic.w	r2, r2, #4
 8004cd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cdc:	2208      	movs	r2, #8
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	f043 0201 	orr.w	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d012      	beq.n	8004d26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d12:	2201      	movs	r2, #1
 8004d14:	409a      	lsls	r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	f043 0202 	orr.w	r2, r3, #2
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d012      	beq.n	8004d5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d48:	2204      	movs	r2, #4
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d60:	2210      	movs	r2, #16
 8004d62:	409a      	lsls	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d043      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d03c      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	2210      	movs	r2, #16
 8004d80:	409a      	lsls	r2, r3
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d018      	beq.n	8004dc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d024      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
 8004db2:	e01f      	b.n	8004df4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01b      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
 8004dc4:	e016      	b.n	8004df4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d107      	bne.n	8004de4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0208 	bic.w	r2, r2, #8
 8004de2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df8:	2220      	movs	r2, #32
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 808f 	beq.w	8004f24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8087 	beq.w	8004f24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d136      	bne.n	8004e9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0216 	bic.w	r2, r2, #22
 8004e3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d103      	bne.n	8004e5e <HAL_DMA_IRQHandler+0x1da>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0208 	bic.w	r2, r2, #8
 8004e6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	223f      	movs	r2, #63	; 0x3f
 8004e74:	409a      	lsls	r2, r3
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d07e      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
        }
        return;
 8004e9a:	e079      	b.n	8004f90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01d      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10d      	bne.n	8004ed4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d031      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
 8004ec8:	e02c      	b.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
 8004eca:	bf00      	nop
 8004ecc:	200000a0 	.word	0x200000a0
 8004ed0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d023      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
 8004ee4:	e01e      	b.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0210 	bic.w	r2, r2, #16
 8004f02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d032      	beq.n	8004f92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d022      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2205      	movs	r2, #5
 8004f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d307      	bcc.n	8004f6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f2      	bne.n	8004f50 <HAL_DMA_IRQHandler+0x2cc>
 8004f6a:	e000      	b.n	8004f6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
 8004f8e:	e000      	b.n	8004f92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f90:	bf00      	nop
    }
  }
}
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d108      	bne.n	8004fd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fd6:	e007      	b.n	8004fe8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	3b10      	subs	r3, #16
 8005004:	4a14      	ldr	r2, [pc, #80]	; (8005058 <DMA_CalcBaseAndBitshift+0x64>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800500e:	4a13      	ldr	r2, [pc, #76]	; (800505c <DMA_CalcBaseAndBitshift+0x68>)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d909      	bls.n	8005036 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	659a      	str	r2, [r3, #88]	; 0x58
 8005034:	e007      	b.n	8005046 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800503e:	f023 0303 	bic.w	r3, r3, #3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	aaaaaaab 	.word	0xaaaaaaab
 800505c:	08009d2c 	.word	0x08009d2c

08005060 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11f      	bne.n	80050ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d856      	bhi.n	800512e <DMA_CheckFifoParam+0xce>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <DMA_CheckFifoParam+0x28>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	08005099 	.word	0x08005099
 800508c:	080050ab 	.word	0x080050ab
 8005090:	08005099 	.word	0x08005099
 8005094:	0800512f 	.word	0x0800512f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d046      	beq.n	8005132 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a8:	e043      	b.n	8005132 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050b2:	d140      	bne.n	8005136 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b8:	e03d      	b.n	8005136 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c2:	d121      	bne.n	8005108 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d837      	bhi.n	800513a <DMA_CheckFifoParam+0xda>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <DMA_CheckFifoParam+0x70>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050e7 	.word	0x080050e7
 80050d8:	080050e1 	.word	0x080050e1
 80050dc:	080050f9 	.word	0x080050f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
      break;
 80050e4:	e030      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d025      	beq.n	800513e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050f6:	e022      	b.n	800513e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005100:	d11f      	bne.n	8005142 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005106:	e01c      	b.n	8005142 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d903      	bls.n	8005116 <DMA_CheckFifoParam+0xb6>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d003      	beq.n	800511c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005114:	e018      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
      break;
 800511a:	e015      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
      break;
 800512c:	e00b      	b.n	8005146 <DMA_CheckFifoParam+0xe6>
      break;
 800512e:	bf00      	nop
 8005130:	e00a      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 8005132:	bf00      	nop
 8005134:	e008      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 8005136:	bf00      	nop
 8005138:	e006      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 800513a:	bf00      	nop
 800513c:	e004      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 800513e:	bf00      	nop
 8005140:	e002      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;   
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 8005146:	bf00      	nop
    }
  } 
  
  return status; 
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop

08005158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	; 0x24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005166:	2300      	movs	r3, #0
 8005168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e16b      	b.n	800544c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005174:	2201      	movs	r2, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4013      	ands	r3, r2
 8005186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	429a      	cmp	r2, r3
 800518e:	f040 815a 	bne.w	8005446 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d005      	beq.n	80051aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d130      	bne.n	800520c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	2203      	movs	r2, #3
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051e0:	2201      	movs	r2, #1
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 0201 	and.w	r2, r3, #1
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4313      	orrs	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	2b03      	cmp	r3, #3
 8005216:	d017      	beq.n	8005248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	2203      	movs	r2, #3
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	4313      	orrs	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d123      	bne.n	800529c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	08da      	lsrs	r2, r3, #3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3208      	adds	r2, #8
 800525c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	220f      	movs	r2, #15
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	43db      	mvns	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4313      	orrs	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	08da      	lsrs	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3208      	adds	r2, #8
 8005296:	69b9      	ldr	r1, [r7, #24]
 8005298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	2203      	movs	r2, #3
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0203 	and.w	r2, r3, #3
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80b4 	beq.w	8005446 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	4b60      	ldr	r3, [pc, #384]	; (8005464 <HAL_GPIO_Init+0x30c>)
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	4a5f      	ldr	r2, [pc, #380]	; (8005464 <HAL_GPIO_Init+0x30c>)
 80052e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052ec:	6453      	str	r3, [r2, #68]	; 0x44
 80052ee:	4b5d      	ldr	r3, [pc, #372]	; (8005464 <HAL_GPIO_Init+0x30c>)
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052fa:	4a5b      	ldr	r2, [pc, #364]	; (8005468 <HAL_GPIO_Init+0x310>)
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	089b      	lsrs	r3, r3, #2
 8005300:	3302      	adds	r3, #2
 8005302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	220f      	movs	r2, #15
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	43db      	mvns	r3, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	4013      	ands	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a52      	ldr	r2, [pc, #328]	; (800546c <HAL_GPIO_Init+0x314>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d02b      	beq.n	800537e <HAL_GPIO_Init+0x226>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a51      	ldr	r2, [pc, #324]	; (8005470 <HAL_GPIO_Init+0x318>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d025      	beq.n	800537a <HAL_GPIO_Init+0x222>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a50      	ldr	r2, [pc, #320]	; (8005474 <HAL_GPIO_Init+0x31c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01f      	beq.n	8005376 <HAL_GPIO_Init+0x21e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a4f      	ldr	r2, [pc, #316]	; (8005478 <HAL_GPIO_Init+0x320>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d019      	beq.n	8005372 <HAL_GPIO_Init+0x21a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a4e      	ldr	r2, [pc, #312]	; (800547c <HAL_GPIO_Init+0x324>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_GPIO_Init+0x216>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4d      	ldr	r2, [pc, #308]	; (8005480 <HAL_GPIO_Init+0x328>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00d      	beq.n	800536a <HAL_GPIO_Init+0x212>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a4c      	ldr	r2, [pc, #304]	; (8005484 <HAL_GPIO_Init+0x32c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <HAL_GPIO_Init+0x20e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a4b      	ldr	r2, [pc, #300]	; (8005488 <HAL_GPIO_Init+0x330>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <HAL_GPIO_Init+0x20a>
 800535e:	2307      	movs	r3, #7
 8005360:	e00e      	b.n	8005380 <HAL_GPIO_Init+0x228>
 8005362:	2308      	movs	r3, #8
 8005364:	e00c      	b.n	8005380 <HAL_GPIO_Init+0x228>
 8005366:	2306      	movs	r3, #6
 8005368:	e00a      	b.n	8005380 <HAL_GPIO_Init+0x228>
 800536a:	2305      	movs	r3, #5
 800536c:	e008      	b.n	8005380 <HAL_GPIO_Init+0x228>
 800536e:	2304      	movs	r3, #4
 8005370:	e006      	b.n	8005380 <HAL_GPIO_Init+0x228>
 8005372:	2303      	movs	r3, #3
 8005374:	e004      	b.n	8005380 <HAL_GPIO_Init+0x228>
 8005376:	2302      	movs	r3, #2
 8005378:	e002      	b.n	8005380 <HAL_GPIO_Init+0x228>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <HAL_GPIO_Init+0x228>
 800537e:	2300      	movs	r3, #0
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	f002 0203 	and.w	r2, r2, #3
 8005386:	0092      	lsls	r2, r2, #2
 8005388:	4093      	lsls	r3, r2
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005390:	4935      	ldr	r1, [pc, #212]	; (8005468 <HAL_GPIO_Init+0x310>)
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	089b      	lsrs	r3, r3, #2
 8005396:	3302      	adds	r3, #2
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800539e:	4b3b      	ldr	r3, [pc, #236]	; (800548c <HAL_GPIO_Init+0x334>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053c2:	4a32      	ldr	r2, [pc, #200]	; (800548c <HAL_GPIO_Init+0x334>)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053c8:	4b30      	ldr	r3, [pc, #192]	; (800548c <HAL_GPIO_Init+0x334>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053ec:	4a27      	ldr	r2, [pc, #156]	; (800548c <HAL_GPIO_Init+0x334>)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <HAL_GPIO_Init+0x334>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	43db      	mvns	r3, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4013      	ands	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005416:	4a1d      	ldr	r2, [pc, #116]	; (800548c <HAL_GPIO_Init+0x334>)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800541c:	4b1b      	ldr	r3, [pc, #108]	; (800548c <HAL_GPIO_Init+0x334>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	43db      	mvns	r3, r3
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4013      	ands	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005440:	4a12      	ldr	r2, [pc, #72]	; (800548c <HAL_GPIO_Init+0x334>)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	3301      	adds	r3, #1
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b0f      	cmp	r3, #15
 8005450:	f67f ae90 	bls.w	8005174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	3724      	adds	r7, #36	; 0x24
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800
 8005468:	40013800 	.word	0x40013800
 800546c:	40020000 	.word	0x40020000
 8005470:	40020400 	.word	0x40020400
 8005474:	40020800 	.word	0x40020800
 8005478:	40020c00 	.word	0x40020c00
 800547c:	40021000 	.word	0x40021000
 8005480:	40021400 	.word	0x40021400
 8005484:	40021800 	.word	0x40021800
 8005488:	40021c00 	.word	0x40021c00
 800548c:	40013c00 	.word	0x40013c00

08005490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	887b      	ldrh	r3, [r7, #2]
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	e001      	b.n	80054b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	807b      	strh	r3, [r7, #2]
 80054cc:	4613      	mov	r3, r2
 80054ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054d0:	787b      	ldrb	r3, [r7, #1]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054d6:	887a      	ldrh	r2, [r7, #2]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054dc:	e003      	b.n	80054e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054de:	887b      	ldrh	r3, [r7, #2]
 80054e0:	041a      	lsls	r2, r3, #16
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	619a      	str	r2, [r3, #24]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fc f93a 	bl	800178c <HAL_GPIO_EXTI_Callback>
  }
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40013c00 	.word	0x40013c00

08005524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e12b      	b.n	800578e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc fba2 	bl	8001c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2224      	movs	r2, #36	; 0x24
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005588:	f000 fd80 	bl	800608c <HAL_RCC_GetPCLK1Freq>
 800558c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	4a81      	ldr	r2, [pc, #516]	; (8005798 <HAL_I2C_Init+0x274>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d807      	bhi.n	80055a8 <HAL_I2C_Init+0x84>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a80      	ldr	r2, [pc, #512]	; (800579c <HAL_I2C_Init+0x278>)
 800559c:	4293      	cmp	r3, r2
 800559e:	bf94      	ite	ls
 80055a0:	2301      	movls	r3, #1
 80055a2:	2300      	movhi	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	e006      	b.n	80055b6 <HAL_I2C_Init+0x92>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a7d      	ldr	r2, [pc, #500]	; (80057a0 <HAL_I2C_Init+0x27c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bf94      	ite	ls
 80055b0:	2301      	movls	r3, #1
 80055b2:	2300      	movhi	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e0e7      	b.n	800578e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a78      	ldr	r2, [pc, #480]	; (80057a4 <HAL_I2C_Init+0x280>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	0c9b      	lsrs	r3, r3, #18
 80055c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	4a6a      	ldr	r2, [pc, #424]	; (8005798 <HAL_I2C_Init+0x274>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d802      	bhi.n	80055f8 <HAL_I2C_Init+0xd4>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	3301      	adds	r3, #1
 80055f6:	e009      	b.n	800560c <HAL_I2C_Init+0xe8>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	4a69      	ldr	r2, [pc, #420]	; (80057a8 <HAL_I2C_Init+0x284>)
 8005604:	fba2 2303 	umull	r2, r3, r2, r3
 8005608:	099b      	lsrs	r3, r3, #6
 800560a:	3301      	adds	r3, #1
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	430b      	orrs	r3, r1
 8005612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800561e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	495c      	ldr	r1, [pc, #368]	; (8005798 <HAL_I2C_Init+0x274>)
 8005628:	428b      	cmp	r3, r1
 800562a:	d819      	bhi.n	8005660 <HAL_I2C_Init+0x13c>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1e59      	subs	r1, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	fbb1 f3f3 	udiv	r3, r1, r3
 800563a:	1c59      	adds	r1, r3, #1
 800563c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005640:	400b      	ands	r3, r1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_I2C_Init+0x138>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1e59      	subs	r1, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	fbb1 f3f3 	udiv	r3, r1, r3
 8005654:	3301      	adds	r3, #1
 8005656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800565a:	e051      	b.n	8005700 <HAL_I2C_Init+0x1dc>
 800565c:	2304      	movs	r3, #4
 800565e:	e04f      	b.n	8005700 <HAL_I2C_Init+0x1dc>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d111      	bne.n	800568c <HAL_I2C_Init+0x168>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1e58      	subs	r0, r3, #1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6859      	ldr	r1, [r3, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	440b      	add	r3, r1
 8005676:	fbb0 f3f3 	udiv	r3, r0, r3
 800567a:	3301      	adds	r3, #1
 800567c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	e012      	b.n	80056b2 <HAL_I2C_Init+0x18e>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	1e58      	subs	r0, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6859      	ldr	r1, [r3, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	0099      	lsls	r1, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a2:	3301      	adds	r3, #1
 80056a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_I2C_Init+0x196>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e022      	b.n	8005700 <HAL_I2C_Init+0x1dc>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10e      	bne.n	80056e0 <HAL_I2C_Init+0x1bc>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1e58      	subs	r0, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6859      	ldr	r1, [r3, #4]
 80056ca:	460b      	mov	r3, r1
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	440b      	add	r3, r1
 80056d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80056d4:	3301      	adds	r3, #1
 80056d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056de:	e00f      	b.n	8005700 <HAL_I2C_Init+0x1dc>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	1e58      	subs	r0, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6859      	ldr	r1, [r3, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	0099      	lsls	r1, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056f6:	3301      	adds	r3, #1
 80056f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	6809      	ldr	r1, [r1, #0]
 8005704:	4313      	orrs	r3, r2
 8005706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69da      	ldr	r2, [r3, #28]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800572e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6911      	ldr	r1, [r2, #16]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68d2      	ldr	r2, [r2, #12]
 800573a:	4311      	orrs	r1, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	430b      	orrs	r3, r1
 8005742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	000186a0 	.word	0x000186a0
 800579c:	001e847f 	.word	0x001e847f
 80057a0:	003d08ff 	.word	0x003d08ff
 80057a4:	431bde83 	.word	0x431bde83
 80057a8:	10624dd3 	.word	0x10624dd3

080057ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e267      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d075      	beq.n	80058b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ca:	4b88      	ldr	r3, [pc, #544]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d00c      	beq.n	80057f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057d6:	4b85      	ldr	r3, [pc, #532]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d112      	bne.n	8005808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057e2:	4b82      	ldr	r3, [pc, #520]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ee:	d10b      	bne.n	8005808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f0:	4b7e      	ldr	r3, [pc, #504]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d05b      	beq.n	80058b4 <HAL_RCC_OscConfig+0x108>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d157      	bne.n	80058b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e242      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005810:	d106      	bne.n	8005820 <HAL_RCC_OscConfig+0x74>
 8005812:	4b76      	ldr	r3, [pc, #472]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a75      	ldr	r2, [pc, #468]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e01d      	b.n	800585c <HAL_RCC_OscConfig+0xb0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005828:	d10c      	bne.n	8005844 <HAL_RCC_OscConfig+0x98>
 800582a:	4b70      	ldr	r3, [pc, #448]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a6f      	ldr	r2, [pc, #444]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	4b6d      	ldr	r3, [pc, #436]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a6c      	ldr	r2, [pc, #432]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 800583c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e00b      	b.n	800585c <HAL_RCC_OscConfig+0xb0>
 8005844:	4b69      	ldr	r3, [pc, #420]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a68      	ldr	r2, [pc, #416]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 800584a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	4b66      	ldr	r3, [pc, #408]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a65      	ldr	r2, [pc, #404]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d013      	beq.n	800588c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fe fea8 	bl	80045b8 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800586c:	f7fe fea4 	bl	80045b8 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b64      	cmp	r3, #100	; 0x64
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e207      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587e:	4b5b      	ldr	r3, [pc, #364]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0xc0>
 800588a:	e014      	b.n	80058b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588c:	f7fe fe94 	bl	80045b8 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005894:	f7fe fe90 	bl	80045b8 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b64      	cmp	r3, #100	; 0x64
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e1f3      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058a6:	4b51      	ldr	r3, [pc, #324]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f0      	bne.n	8005894 <HAL_RCC_OscConfig+0xe8>
 80058b2:	e000      	b.n	80058b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d063      	beq.n	800598a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058c2:	4b4a      	ldr	r3, [pc, #296]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ce:	4b47      	ldr	r3, [pc, #284]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d11c      	bne.n	8005914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058da:	4b44      	ldr	r3, [pc, #272]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d116      	bne.n	8005914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e6:	4b41      	ldr	r3, [pc, #260]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <HAL_RCC_OscConfig+0x152>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d001      	beq.n	80058fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e1c7      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fe:	4b3b      	ldr	r3, [pc, #236]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4937      	ldr	r1, [pc, #220]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 800590e:	4313      	orrs	r3, r2
 8005910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005912:	e03a      	b.n	800598a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d020      	beq.n	800595e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800591c:	4b34      	ldr	r3, [pc, #208]	; (80059f0 <HAL_RCC_OscConfig+0x244>)
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fe fe49 	bl	80045b8 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800592a:	f7fe fe45 	bl	80045b8 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e1a8      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593c:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005948:	4b28      	ldr	r3, [pc, #160]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4925      	ldr	r1, [pc, #148]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005958:	4313      	orrs	r3, r2
 800595a:	600b      	str	r3, [r1, #0]
 800595c:	e015      	b.n	800598a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800595e:	4b24      	ldr	r3, [pc, #144]	; (80059f0 <HAL_RCC_OscConfig+0x244>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fe fe28 	bl	80045b8 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800596c:	f7fe fe24 	bl	80045b8 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e187      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800597e:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f0      	bne.n	800596c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d036      	beq.n	8005a04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d016      	beq.n	80059cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800599e:	4b15      	ldr	r3, [pc, #84]	; (80059f4 <HAL_RCC_OscConfig+0x248>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fe fe08 	bl	80045b8 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ac:	f7fe fe04 	bl	80045b8 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e167      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059be:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <HAL_RCC_OscConfig+0x240>)
 80059c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0x200>
 80059ca:	e01b      	b.n	8005a04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <HAL_RCC_OscConfig+0x248>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d2:	f7fe fdf1 	bl	80045b8 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d8:	e00e      	b.n	80059f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059da:	f7fe fded 	bl	80045b8 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d907      	bls.n	80059f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e150      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
 80059ec:	40023800 	.word	0x40023800
 80059f0:	42470000 	.word	0x42470000
 80059f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f8:	4b88      	ldr	r3, [pc, #544]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 80059fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1ea      	bne.n	80059da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8097 	beq.w	8005b40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a12:	2300      	movs	r3, #0
 8005a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a16:	4b81      	ldr	r3, [pc, #516]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10f      	bne.n	8005a42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	4b7d      	ldr	r3, [pc, #500]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	4a7c      	ldr	r2, [pc, #496]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a30:	6413      	str	r3, [r2, #64]	; 0x40
 8005a32:	4b7a      	ldr	r3, [pc, #488]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a42:	4b77      	ldr	r3, [pc, #476]	; (8005c20 <HAL_RCC_OscConfig+0x474>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d118      	bne.n	8005a80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a4e:	4b74      	ldr	r3, [pc, #464]	; (8005c20 <HAL_RCC_OscConfig+0x474>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a73      	ldr	r2, [pc, #460]	; (8005c20 <HAL_RCC_OscConfig+0x474>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a5a:	f7fe fdad 	bl	80045b8 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a62:	f7fe fda9 	bl	80045b8 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e10c      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a74:	4b6a      	ldr	r3, [pc, #424]	; (8005c20 <HAL_RCC_OscConfig+0x474>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0f0      	beq.n	8005a62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d106      	bne.n	8005a96 <HAL_RCC_OscConfig+0x2ea>
 8005a88:	4b64      	ldr	r3, [pc, #400]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	4a63      	ldr	r2, [pc, #396]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6713      	str	r3, [r2, #112]	; 0x70
 8005a94:	e01c      	b.n	8005ad0 <HAL_RCC_OscConfig+0x324>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x30c>
 8005a9e:	4b5f      	ldr	r3, [pc, #380]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	4a5e      	ldr	r2, [pc, #376]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005aa4:	f043 0304 	orr.w	r3, r3, #4
 8005aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aaa:	4b5c      	ldr	r3, [pc, #368]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aae:	4a5b      	ldr	r2, [pc, #364]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCC_OscConfig+0x324>
 8005ab8:	4b58      	ldr	r3, [pc, #352]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	4a57      	ldr	r2, [pc, #348]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac4:	4b55      	ldr	r3, [pc, #340]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac8:	4a54      	ldr	r2, [pc, #336]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005aca:	f023 0304 	bic.w	r3, r3, #4
 8005ace:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d015      	beq.n	8005b04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fe fd6e 	bl	80045b8 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ade:	e00a      	b.n	8005af6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae0:	f7fe fd6a 	bl	80045b8 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e0cb      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af6:	4b49      	ldr	r3, [pc, #292]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0ee      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x334>
 8005b02:	e014      	b.n	8005b2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b04:	f7fe fd58 	bl	80045b8 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b0c:	f7fe fd54 	bl	80045b8 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e0b5      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b22:	4b3e      	ldr	r3, [pc, #248]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1ee      	bne.n	8005b0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d105      	bne.n	8005b40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b34:	4b39      	ldr	r3, [pc, #228]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b38:	4a38      	ldr	r2, [pc, #224]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 80a1 	beq.w	8005c8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b4a:	4b34      	ldr	r3, [pc, #208]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d05c      	beq.n	8005c10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d141      	bne.n	8005be2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5e:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <HAL_RCC_OscConfig+0x478>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b64:	f7fe fd28 	bl	80045b8 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b6c:	f7fe fd24 	bl	80045b8 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e087      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7e:	4b27      	ldr	r3, [pc, #156]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	019b      	lsls	r3, r3, #6
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	085b      	lsrs	r3, r3, #1
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	041b      	lsls	r3, r3, #16
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	061b      	lsls	r3, r3, #24
 8005bae:	491b      	ldr	r1, [pc, #108]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <HAL_RCC_OscConfig+0x478>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bba:	f7fe fcfd 	bl	80045b8 <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc2:	f7fe fcf9 	bl	80045b8 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e05c      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd4:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0f0      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x416>
 8005be0:	e054      	b.n	8005c8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be2:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <HAL_RCC_OscConfig+0x478>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be8:	f7fe fce6 	bl	80045b8 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf0:	f7fe fce2 	bl	80045b8 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e045      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c02:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <HAL_RCC_OscConfig+0x470>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x444>
 8005c0e:	e03d      	b.n	8005c8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e038      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40007000 	.word	0x40007000
 8005c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <HAL_RCC_OscConfig+0x4ec>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d028      	beq.n	8005c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d121      	bne.n	8005c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d11a      	bne.n	8005c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c58:	4013      	ands	r3, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d111      	bne.n	8005c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	3b01      	subs	r3, #1
 8005c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d107      	bne.n	8005c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d001      	beq.n	8005c8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40023800 	.word	0x40023800

08005c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0cc      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb0:	4b68      	ldr	r3, [pc, #416]	; (8005e54 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d90c      	bls.n	8005cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cbe:	4b65      	ldr	r3, [pc, #404]	; (8005e54 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc6:	4b63      	ldr	r3, [pc, #396]	; (8005e54 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d001      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0b8      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d020      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf0:	4b59      	ldr	r3, [pc, #356]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4a58      	ldr	r2, [pc, #352]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d08:	4b53      	ldr	r3, [pc, #332]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	4a52      	ldr	r2, [pc, #328]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d14:	4b50      	ldr	r3, [pc, #320]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	494d      	ldr	r1, [pc, #308]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d044      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d107      	bne.n	8005d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3a:	4b47      	ldr	r3, [pc, #284]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d119      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e07f      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d003      	beq.n	8005d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d107      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5a:	4b3f      	ldr	r3, [pc, #252]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e06f      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6a:	4b3b      	ldr	r3, [pc, #236]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e067      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d7a:	4b37      	ldr	r3, [pc, #220]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f023 0203 	bic.w	r2, r3, #3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	4934      	ldr	r1, [pc, #208]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d8c:	f7fe fc14 	bl	80045b8 <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d92:	e00a      	b.n	8005daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d94:	f7fe fc10 	bl	80045b8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e04f      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005daa:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 020c 	and.w	r2, r3, #12
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d1eb      	bne.n	8005d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dbc:	4b25      	ldr	r3, [pc, #148]	; (8005e54 <HAL_RCC_ClockConfig+0x1b8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d20c      	bcs.n	8005de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dca:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <HAL_RCC_ClockConfig+0x1b8>)
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd2:	4b20      	ldr	r3, [pc, #128]	; (8005e54 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e032      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df0:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	4916      	ldr	r1, [pc, #88]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e0e:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	490e      	ldr	r1, [pc, #56]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e22:	f000 f821 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 8005e26:	4602      	mov	r2, r0
 8005e28:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	490a      	ldr	r1, [pc, #40]	; (8005e5c <HAL_RCC_ClockConfig+0x1c0>)
 8005e34:	5ccb      	ldrb	r3, [r1, r3]
 8005e36:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3a:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <HAL_RCC_ClockConfig+0x1c4>)
 8005e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e3e:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <HAL_RCC_ClockConfig+0x1c8>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fb74 	bl	8004530 <HAL_InitTick>

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40023c00 	.word	0x40023c00
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	08009d14 	.word	0x08009d14
 8005e60:	200000a0 	.word	0x200000a0
 8005e64:	200000a4 	.word	0x200000a4

08005e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e6c:	b094      	sub	sp, #80	; 0x50
 8005e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	647b      	str	r3, [r7, #68]	; 0x44
 8005e74:	2300      	movs	r3, #0
 8005e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e78:	2300      	movs	r3, #0
 8005e7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e80:	4b79      	ldr	r3, [pc, #484]	; (8006068 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f003 030c 	and.w	r3, r3, #12
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d00d      	beq.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	f200 80e1 	bhi.w	8006054 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x34>
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e9a:	e0db      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e9c:	4b73      	ldr	r3, [pc, #460]	; (800606c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ea0:	e0db      	b.n	800605a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ea2:	4b73      	ldr	r3, [pc, #460]	; (8006070 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ea6:	e0d8      	b.n	800605a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ea8:	4b6f      	ldr	r3, [pc, #444]	; (8006068 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eb2:	4b6d      	ldr	r3, [pc, #436]	; (8006068 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d063      	beq.n	8005f86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ebe:	4b6a      	ldr	r3, [pc, #424]	; (8006068 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	099b      	lsrs	r3, r3, #6
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ec8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005eda:	4622      	mov	r2, r4
 8005edc:	462b      	mov	r3, r5
 8005ede:	f04f 0000 	mov.w	r0, #0
 8005ee2:	f04f 0100 	mov.w	r1, #0
 8005ee6:	0159      	lsls	r1, r3, #5
 8005ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eec:	0150      	lsls	r0, r2, #5
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	1a51      	subs	r1, r2, r1
 8005ef6:	6139      	str	r1, [r7, #16]
 8005ef8:	4629      	mov	r1, r5
 8005efa:	eb63 0301 	sbc.w	r3, r3, r1
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	018b      	lsls	r3, r1, #6
 8005f10:	4651      	mov	r1, sl
 8005f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f16:	4651      	mov	r1, sl
 8005f18:	018a      	lsls	r2, r1, #6
 8005f1a:	4651      	mov	r1, sl
 8005f1c:	ebb2 0801 	subs.w	r8, r2, r1
 8005f20:	4659      	mov	r1, fp
 8005f22:	eb63 0901 	sbc.w	r9, r3, r1
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f3a:	4690      	mov	r8, r2
 8005f3c:	4699      	mov	r9, r3
 8005f3e:	4623      	mov	r3, r4
 8005f40:	eb18 0303 	adds.w	r3, r8, r3
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	462b      	mov	r3, r5
 8005f48:	eb49 0303 	adc.w	r3, r9, r3
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	024b      	lsls	r3, r1, #9
 8005f5e:	4621      	mov	r1, r4
 8005f60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f64:	4621      	mov	r1, r4
 8005f66:	024a      	lsls	r2, r1, #9
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6e:	2200      	movs	r2, #0
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f78:	f7fa fe02 	bl	8000b80 <__aeabi_uldivmod>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4613      	mov	r3, r2
 8005f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f84:	e058      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f86:	4b38      	ldr	r3, [pc, #224]	; (8006068 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	099b      	lsrs	r3, r3, #6
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	4611      	mov	r1, r2
 8005f92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f96:	623b      	str	r3, [r7, #32]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	f04f 0000 	mov.w	r0, #0
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	0159      	lsls	r1, r3, #5
 8005fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fb2:	0150      	lsls	r0, r2, #5
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4641      	mov	r1, r8
 8005fba:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fd8:	ebb2 040a 	subs.w	r4, r2, sl
 8005fdc:	eb63 050b 	sbc.w	r5, r3, fp
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	00eb      	lsls	r3, r5, #3
 8005fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fee:	00e2      	lsls	r2, r4, #3
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	461d      	mov	r5, r3
 8005ff4:	4643      	mov	r3, r8
 8005ff6:	18e3      	adds	r3, r4, r3
 8005ff8:	603b      	str	r3, [r7, #0]
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	eb45 0303 	adc.w	r3, r5, r3
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800600e:	4629      	mov	r1, r5
 8006010:	028b      	lsls	r3, r1, #10
 8006012:	4621      	mov	r1, r4
 8006014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006018:	4621      	mov	r1, r4
 800601a:	028a      	lsls	r2, r1, #10
 800601c:	4610      	mov	r0, r2
 800601e:	4619      	mov	r1, r3
 8006020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006022:	2200      	movs	r2, #0
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	61fa      	str	r2, [r7, #28]
 8006028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800602c:	f7fa fda8 	bl	8000b80 <__aeabi_uldivmod>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4613      	mov	r3, r2
 8006036:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006038:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <HAL_RCC_GetSysClockFreq+0x200>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	0c1b      	lsrs	r3, r3, #16
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	3301      	adds	r3, #1
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800604a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006052:	e002      	b.n	800605a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <HAL_RCC_GetSysClockFreq+0x204>)
 8006056:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800605a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800605c:	4618      	mov	r0, r3
 800605e:	3750      	adds	r7, #80	; 0x50
 8006060:	46bd      	mov	sp, r7
 8006062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006066:	bf00      	nop
 8006068:	40023800 	.word	0x40023800
 800606c:	00f42400 	.word	0x00f42400
 8006070:	007a1200 	.word	0x007a1200

08006074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006078:	4b03      	ldr	r3, [pc, #12]	; (8006088 <HAL_RCC_GetHCLKFreq+0x14>)
 800607a:	681b      	ldr	r3, [r3, #0]
}
 800607c:	4618      	mov	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	200000a0 	.word	0x200000a0

0800608c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006090:	f7ff fff0 	bl	8006074 <HAL_RCC_GetHCLKFreq>
 8006094:	4602      	mov	r2, r0
 8006096:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	0a9b      	lsrs	r3, r3, #10
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	4903      	ldr	r1, [pc, #12]	; (80060b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060a2:	5ccb      	ldrb	r3, [r1, r3]
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40023800 	.word	0x40023800
 80060b0:	08009d24 	.word	0x08009d24

080060b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060b8:	f7ff ffdc 	bl	8006074 <HAL_RCC_GetHCLKFreq>
 80060bc:	4602      	mov	r2, r0
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	0b5b      	lsrs	r3, r3, #13
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	4903      	ldr	r1, [pc, #12]	; (80060d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060ca:	5ccb      	ldrb	r3, [r1, r3]
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40023800 	.word	0x40023800
 80060d8:	08009d24 	.word	0x08009d24

080060dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e07b      	b.n	80061e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d108      	bne.n	8006108 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060fe:	d009      	beq.n	8006114 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	61da      	str	r2, [r3, #28]
 8006106:	e005      	b.n	8006114 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fd fdec 	bl	8003d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800614a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	ea42 0103 	orr.w	r1, r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	0c1b      	lsrs	r3, r3, #16
 80061b2:	f003 0104 	and.w	r1, r3, #4
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	f003 0210 	and.w	r2, r3, #16
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b088      	sub	sp, #32
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	4613      	mov	r3, r2
 80061fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_SPI_Transmit+0x22>
 800620c:	2302      	movs	r3, #2
 800620e:	e126      	b.n	800645e <HAL_SPI_Transmit+0x270>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006218:	f7fe f9ce 	bl	80045b8 <HAL_GetTick>
 800621c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b01      	cmp	r3, #1
 800622c:	d002      	beq.n	8006234 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800622e:	2302      	movs	r3, #2
 8006230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006232:	e10b      	b.n	800644c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_SPI_Transmit+0x52>
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d102      	bne.n	8006246 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006244:	e102      	b.n	800644c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2203      	movs	r2, #3
 800624a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628c:	d10f      	bne.n	80062ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d007      	beq.n	80062cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d4:	d14b      	bne.n	800636e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_SPI_Transmit+0xf6>
 80062de:	8afb      	ldrh	r3, [r7, #22]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d13e      	bne.n	8006362 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	881a      	ldrh	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	1c9a      	adds	r2, r3, #2
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006308:	e02b      	b.n	8006362 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b02      	cmp	r3, #2
 8006316:	d112      	bne.n	800633e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	86da      	strh	r2, [r3, #54]	; 0x36
 800633c:	e011      	b.n	8006362 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800633e:	f7fe f93b 	bl	80045b8 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d803      	bhi.n	8006356 <HAL_SPI_Transmit+0x168>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d102      	bne.n	800635c <HAL_SPI_Transmit+0x16e>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006360:	e074      	b.n	800644c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1ce      	bne.n	800630a <HAL_SPI_Transmit+0x11c>
 800636c:	e04c      	b.n	8006408 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_SPI_Transmit+0x18e>
 8006376:	8afb      	ldrh	r3, [r7, #22]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d140      	bne.n	80063fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	7812      	ldrb	r2, [r2, #0]
 8006388:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063a2:	e02c      	b.n	80063fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d113      	bne.n	80063da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	7812      	ldrb	r2, [r2, #0]
 80063be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80063d8:	e011      	b.n	80063fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063da:	f7fe f8ed 	bl	80045b8 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d803      	bhi.n	80063f2 <HAL_SPI_Transmit+0x204>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d102      	bne.n	80063f8 <HAL_SPI_Transmit+0x20a>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063fc:	e026      	b.n	800644c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1cd      	bne.n	80063a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fb2b 	bl	8006a68 <SPI_EndRxTxTransaction>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e000      	b.n	800644c <HAL_SPI_Transmit+0x25e>
  }

error:
 800644a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800645c:	7ffb      	ldrb	r3, [r7, #31]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_SPI_Transmit_DMA+0x20>
 8006484:	2302      	movs	r3, #2
 8006486:	e09b      	b.n	80065c0 <HAL_SPI_Transmit_DMA+0x158>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b01      	cmp	r3, #1
 800649a:	d002      	beq.n	80064a2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800649c:	2302      	movs	r3, #2
 800649e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064a0:	e089      	b.n	80065b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_SPI_Transmit_DMA+0x46>
 80064a8:	88fb      	ldrh	r3, [r7, #6]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d102      	bne.n	80064b4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064b2:	e080      	b.n	80065b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2203      	movs	r2, #3
 80064b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	88fa      	ldrh	r2, [r7, #6]
 80064cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064fa:	d10f      	bne.n	800651c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800650a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800651a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006520:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <HAL_SPI_Transmit_DMA+0x160>)
 8006522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006528:	4a28      	ldr	r2, [pc, #160]	; (80065cc <HAL_SPI_Transmit_DMA+0x164>)
 800652a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006530:	4a27      	ldr	r2, [pc, #156]	; (80065d0 <HAL_SPI_Transmit_DMA+0x168>)
 8006532:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006538:	2200      	movs	r2, #0
 800653a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	4619      	mov	r1, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006552:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006554:	f7fe fb1c 	bl	8004b90 <HAL_DMA_Start_IT>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00c      	beq.n	8006578 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006562:	f043 0210 	orr.w	r2, r3, #16
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006576:	e01e      	b.n	80065b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d007      	beq.n	8006596 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006594:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0220 	orr.w	r2, r2, #32
 80065a4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0202 	orr.w	r2, r2, #2
 80065b4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065be:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	080068d5 	.word	0x080068d5
 80065cc:	0800682d 	.word	0x0800682d
 80065d0:	080068f1 	.word	0x080068f1

080065d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	099b      	lsrs	r3, r3, #6
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10f      	bne.n	8006618 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	099b      	lsrs	r3, r3, #6
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
    return;
 8006616:	e0d7      	b.n	80067c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <HAL_SPI_IRQHandler+0x66>
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	09db      	lsrs	r3, r3, #7
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
    return;
 8006638:	e0c6      	b.n	80067c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10c      	bne.n	8006660 <HAL_SPI_IRQHandler+0x8c>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	099b      	lsrs	r3, r3, #6
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 80b4 	beq.w	80067c8 <HAL_SPI_IRQHandler+0x1f4>
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80ad 	beq.w	80067c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	099b      	lsrs	r3, r3, #6
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d023      	beq.n	80066c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b03      	cmp	r3, #3
 8006684:	d011      	beq.n	80066aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668a:	f043 0204 	orr.w	r2, r3, #4
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	e00b      	b.n	80066c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	693b      	ldr	r3, [r7, #16]
        return;
 80066c0:	e082      	b.n	80067c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d014      	beq.n	80066f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d2:	f043 0201 	orr.w	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006708:	f043 0208 	orr.w	r2, r3, #8
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006710:	2300      	movs	r3, #0
 8006712:	60bb      	str	r3, [r7, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	60bb      	str	r3, [r7, #8]
 800671c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	2b00      	cmp	r3, #0
 8006724:	d04f      	beq.n	80067c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006734:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <HAL_SPI_IRQHandler+0x17e>
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d034      	beq.n	80067bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0203 	bic.w	r2, r2, #3
 8006760:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d011      	beq.n	800678e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676e:	4a18      	ldr	r2, [pc, #96]	; (80067d0 <HAL_SPI_IRQHandler+0x1fc>)
 8006770:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe fa62 	bl	8004c40 <HAL_DMA_Abort_IT>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679a:	4a0d      	ldr	r2, [pc, #52]	; (80067d0 <HAL_SPI_IRQHandler+0x1fc>)
 800679c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe fa4c 	bl	8004c40 <HAL_DMA_Abort_IT>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80067ba:	e003      	b.n	80067c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f81d 	bl	80067fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80067c2:	e000      	b.n	80067c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80067c4:	bf00      	nop
    return;
 80067c6:	bf00      	nop
  }
}
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	08006931 	.word	0x08006931

080067d4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800681e:	b2db      	uxtb	r3, r3
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800683a:	f7fd febd 	bl	80045b8 <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800684e:	d03b      	beq.n	80068c8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0220 	bic.w	r2, r2, #32
 800685e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0202 	bic.w	r2, r2, #2
 800686e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	2164      	movs	r1, #100	; 0x64
 8006874:	6978      	ldr	r0, [r7, #20]
 8006876:	f000 f8f7 	bl	8006a68 <SPI_EndRxTxTransaction>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006884:	f043 0220 	orr.w	r2, r3, #32
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2200      	movs	r2, #0
 80068ae:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068c0:	6978      	ldr	r0, [r7, #20]
 80068c2:	f7ff ff9b 	bl	80067fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068c6:	e002      	b.n	80068ce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80068c8:	6978      	ldr	r0, [r7, #20]
 80068ca:	f7ff ff83 	bl	80067d4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff ff80 	bl	80067e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0203 	bic.w	r2, r2, #3
 800690c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	f043 0210 	orr.w	r2, r3, #16
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff ff6a 	bl	80067fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff ff56 	bl	80067fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	4613      	mov	r3, r2
 8006966:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006968:	f7fd fe26 	bl	80045b8 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4413      	add	r3, r2
 8006976:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006978:	f7fd fe1e 	bl	80045b8 <HAL_GetTick>
 800697c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800697e:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	015b      	lsls	r3, r3, #5
 8006984:	0d1b      	lsrs	r3, r3, #20
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	fb02 f303 	mul.w	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800698e:	e054      	b.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d050      	beq.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006998:	f7fd fe0e 	bl	80045b8 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d902      	bls.n	80069ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d13d      	bne.n	8006a2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c6:	d111      	bne.n	80069ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d0:	d004      	beq.n	80069dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069da:	d107      	bne.n	80069ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f4:	d10f      	bne.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e017      	b.n	8006a5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4013      	ands	r3, r2
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	bf0c      	ite	eq
 8006a4a:	2301      	moveq	r3, #1
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d19b      	bne.n	8006990 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200000a0 	.word	0x200000a0

08006a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a74:	4b1b      	ldr	r3, [pc, #108]	; (8006ae4 <SPI_EndRxTxTransaction+0x7c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1b      	ldr	r2, [pc, #108]	; (8006ae8 <SPI_EndRxTxTransaction+0x80>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	0d5b      	lsrs	r3, r3, #21
 8006a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a84:	fb02 f303 	mul.w	r3, r2, r3
 8006a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a92:	d112      	bne.n	8006aba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2180      	movs	r1, #128	; 0x80
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff ff5a 	bl	8006958 <SPI_WaitFlagStateUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d016      	beq.n	8006ad8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e00f      	b.n	8006ada <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d0f2      	beq.n	8006aba <SPI_EndRxTxTransaction+0x52>
 8006ad4:	e000      	b.n	8006ad8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ad6:	bf00      	nop
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200000a0 	.word	0x200000a0
 8006ae8:	165e9f81 	.word	0x165e9f81

08006aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e041      	b.n	8006b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fd fb04 	bl	8004120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f000 fbb4 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d001      	beq.n	8006ba4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e046      	b.n	8006c32 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a23      	ldr	r2, [pc, #140]	; (8006c40 <HAL_TIM_Base_Start+0xb4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d022      	beq.n	8006bfc <HAL_TIM_Base_Start+0x70>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbe:	d01d      	beq.n	8006bfc <HAL_TIM_Base_Start+0x70>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1f      	ldr	r2, [pc, #124]	; (8006c44 <HAL_TIM_Base_Start+0xb8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d018      	beq.n	8006bfc <HAL_TIM_Base_Start+0x70>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1e      	ldr	r2, [pc, #120]	; (8006c48 <HAL_TIM_Base_Start+0xbc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d013      	beq.n	8006bfc <HAL_TIM_Base_Start+0x70>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <HAL_TIM_Base_Start+0xc0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00e      	beq.n	8006bfc <HAL_TIM_Base_Start+0x70>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1b      	ldr	r2, [pc, #108]	; (8006c50 <HAL_TIM_Base_Start+0xc4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d009      	beq.n	8006bfc <HAL_TIM_Base_Start+0x70>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a19      	ldr	r2, [pc, #100]	; (8006c54 <HAL_TIM_Base_Start+0xc8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <HAL_TIM_Base_Start+0x70>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <HAL_TIM_Base_Start+0xcc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d111      	bne.n	8006c20 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b06      	cmp	r3, #6
 8006c0c:	d010      	beq.n	8006c30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0201 	orr.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1e:	e007      	b.n	8006c30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40010000 	.word	0x40010000
 8006c44:	40000400 	.word	0x40000400
 8006c48:	40000800 	.word	0x40000800
 8006c4c:	40000c00 	.word	0x40000c00
 8006c50:	40010400 	.word	0x40010400
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40001800 	.word	0x40001800

08006c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e041      	b.n	8006cf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f839 	bl	8006cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f000 fafc 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d122      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d11b      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f06f 0202 	mvn.w	r2, #2
 8006d3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa82 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8006d56:	e005      	b.n	8006d64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fa74 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa85 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d122      	bne.n	8006dbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d11b      	bne.n	8006dbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f06f 0204 	mvn.w	r2, #4
 8006d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fa58 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8006daa:	e005      	b.n	8006db8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fa4a 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fa5b 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d122      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	d11b      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f06f 0208 	mvn.w	r2, #8
 8006de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2204      	movs	r2, #4
 8006de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fa2e 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8006dfe:	e005      	b.n	8006e0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fa20 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa31 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	f003 0310 	and.w	r3, r3, #16
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d122      	bne.n	8006e66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f003 0310 	and.w	r3, r3, #16
 8006e2a:	2b10      	cmp	r3, #16
 8006e2c:	d11b      	bne.n	8006e66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f06f 0210 	mvn.w	r2, #16
 8006e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2208      	movs	r2, #8
 8006e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fa04 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8006e52:	e005      	b.n	8006e60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f9f6 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa07 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d10e      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d107      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f06f 0201 	mvn.w	r2, #1
 8006e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f9d0 	bl	8007232 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9c:	2b80      	cmp	r3, #128	; 0x80
 8006e9e:	d10e      	bne.n	8006ebe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eaa:	2b80      	cmp	r3, #128	; 0x80
 8006eac:	d107      	bne.n	8006ebe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fd5d 	bl	8007978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b40      	cmp	r3, #64	; 0x40
 8006eca:	d10e      	bne.n	8006eea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed6:	2b40      	cmp	r3, #64	; 0x40
 8006ed8:	d107      	bne.n	8006eea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f9cc 	bl	8007282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d10e      	bne.n	8006f16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d107      	bne.n	8006f16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f06f 0220 	mvn.w	r2, #32
 8006f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fd27 	bl	8007964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e0ae      	b.n	800709c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b0c      	cmp	r3, #12
 8006f4a:	f200 809f 	bhi.w	800708c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f4e:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006f89 	.word	0x08006f89
 8006f58:	0800708d 	.word	0x0800708d
 8006f5c:	0800708d 	.word	0x0800708d
 8006f60:	0800708d 	.word	0x0800708d
 8006f64:	08006fc9 	.word	0x08006fc9
 8006f68:	0800708d 	.word	0x0800708d
 8006f6c:	0800708d 	.word	0x0800708d
 8006f70:	0800708d 	.word	0x0800708d
 8006f74:	0800700b 	.word	0x0800700b
 8006f78:	0800708d 	.word	0x0800708d
 8006f7c:	0800708d 	.word	0x0800708d
 8006f80:	0800708d 	.word	0x0800708d
 8006f84:	0800704b 	.word	0x0800704b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fa22 	bl	80073d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0208 	orr.w	r2, r2, #8
 8006fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0204 	bic.w	r2, r2, #4
 8006fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6999      	ldr	r1, [r3, #24]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	619a      	str	r2, [r3, #24]
      break;
 8006fc6:	e064      	b.n	8007092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fa72 	bl	80074b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699a      	ldr	r2, [r3, #24]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699a      	ldr	r2, [r3, #24]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6999      	ldr	r1, [r3, #24]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	021a      	lsls	r2, r3, #8
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	619a      	str	r2, [r3, #24]
      break;
 8007008:	e043      	b.n	8007092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fac7 	bl	80075a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69da      	ldr	r2, [r3, #28]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0208 	orr.w	r2, r2, #8
 8007024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69da      	ldr	r2, [r3, #28]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0204 	bic.w	r2, r2, #4
 8007034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69d9      	ldr	r1, [r3, #28]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	61da      	str	r2, [r3, #28]
      break;
 8007048:	e023      	b.n	8007092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fb1b 	bl	800768c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69da      	ldr	r2, [r3, #28]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69d9      	ldr	r1, [r3, #28]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	021a      	lsls	r2, r3, #8
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	61da      	str	r2, [r3, #28]
      break;
 800708a:	e002      	b.n	8007092 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
      break;
 8007090:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_TIM_ConfigClockSource+0x1c>
 80070bc:	2302      	movs	r3, #2
 80070be:	e0b4      	b.n	800722a <HAL_TIM_ConfigClockSource+0x186>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f8:	d03e      	beq.n	8007178 <HAL_TIM_ConfigClockSource+0xd4>
 80070fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fe:	f200 8087 	bhi.w	8007210 <HAL_TIM_ConfigClockSource+0x16c>
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007106:	f000 8086 	beq.w	8007216 <HAL_TIM_ConfigClockSource+0x172>
 800710a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710e:	d87f      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x16c>
 8007110:	2b70      	cmp	r3, #112	; 0x70
 8007112:	d01a      	beq.n	800714a <HAL_TIM_ConfigClockSource+0xa6>
 8007114:	2b70      	cmp	r3, #112	; 0x70
 8007116:	d87b      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x16c>
 8007118:	2b60      	cmp	r3, #96	; 0x60
 800711a:	d050      	beq.n	80071be <HAL_TIM_ConfigClockSource+0x11a>
 800711c:	2b60      	cmp	r3, #96	; 0x60
 800711e:	d877      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x16c>
 8007120:	2b50      	cmp	r3, #80	; 0x50
 8007122:	d03c      	beq.n	800719e <HAL_TIM_ConfigClockSource+0xfa>
 8007124:	2b50      	cmp	r3, #80	; 0x50
 8007126:	d873      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x16c>
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d058      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x13a>
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d86f      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x16c>
 8007130:	2b30      	cmp	r3, #48	; 0x30
 8007132:	d064      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x15a>
 8007134:	2b30      	cmp	r3, #48	; 0x30
 8007136:	d86b      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x16c>
 8007138:	2b20      	cmp	r3, #32
 800713a:	d060      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x15a>
 800713c:	2b20      	cmp	r3, #32
 800713e:	d867      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x16c>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d05c      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x15a>
 8007144:	2b10      	cmp	r3, #16
 8007146:	d05a      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x15a>
 8007148:	e062      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6899      	ldr	r1, [r3, #8]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f000 fb67 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800716c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	609a      	str	r2, [r3, #8]
      break;
 8007176:	e04f      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	6899      	ldr	r1, [r3, #8]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f000 fb50 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800719a:	609a      	str	r2, [r3, #8]
      break;
 800719c:	e03c      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	6859      	ldr	r1, [r3, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	461a      	mov	r2, r3
 80071ac:	f000 fac4 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2150      	movs	r1, #80	; 0x50
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fb1d 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80071bc:	e02c      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6859      	ldr	r1, [r3, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f000 fae3 	bl	8007796 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2160      	movs	r1, #96	; 0x60
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fb0d 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80071dc:	e01c      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6859      	ldr	r1, [r3, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f000 faa4 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2140      	movs	r1, #64	; 0x40
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fafd 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80071fc:	e00c      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f000 faf4 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 800720e:	e003      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	73fb      	strb	r3, [r7, #15]
      break;
 8007214:	e000      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007228:	7bfb      	ldrb	r3, [r7, #15]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800723a:	bf00      	nop
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800728a:	bf00      	nop
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a40      	ldr	r2, [pc, #256]	; (80073ac <TIM_Base_SetConfig+0x114>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b6:	d00f      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a3d      	ldr	r2, [pc, #244]	; (80073b0 <TIM_Base_SetConfig+0x118>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00b      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a3c      	ldr	r2, [pc, #240]	; (80073b4 <TIM_Base_SetConfig+0x11c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d007      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a3b      	ldr	r2, [pc, #236]	; (80073b8 <TIM_Base_SetConfig+0x120>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a3a      	ldr	r2, [pc, #232]	; (80073bc <TIM_Base_SetConfig+0x124>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d108      	bne.n	80072ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2f      	ldr	r2, [pc, #188]	; (80073ac <TIM_Base_SetConfig+0x114>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d02b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f8:	d027      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a2c      	ldr	r2, [pc, #176]	; (80073b0 <TIM_Base_SetConfig+0x118>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d023      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a2b      	ldr	r2, [pc, #172]	; (80073b4 <TIM_Base_SetConfig+0x11c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d01f      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a2a      	ldr	r2, [pc, #168]	; (80073b8 <TIM_Base_SetConfig+0x120>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d01b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a29      	ldr	r2, [pc, #164]	; (80073bc <TIM_Base_SetConfig+0x124>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d017      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a28      	ldr	r2, [pc, #160]	; (80073c0 <TIM_Base_SetConfig+0x128>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d013      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a27      	ldr	r2, [pc, #156]	; (80073c4 <TIM_Base_SetConfig+0x12c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00f      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <TIM_Base_SetConfig+0x130>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <TIM_Base_SetConfig+0x134>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d007      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a24      	ldr	r2, [pc, #144]	; (80073d0 <TIM_Base_SetConfig+0x138>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a23      	ldr	r2, [pc, #140]	; (80073d4 <TIM_Base_SetConfig+0x13c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d108      	bne.n	800735c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <TIM_Base_SetConfig+0x114>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_Base_SetConfig+0xf8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <TIM_Base_SetConfig+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d103      	bne.n	8007398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	615a      	str	r2, [r3, #20]
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40010400 	.word	0x40010400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400
 80073c8:	40014800 	.word	0x40014800
 80073cc:	40001800 	.word	0x40001800
 80073d0:	40001c00 	.word	0x40001c00
 80073d4:	40002000 	.word	0x40002000

080073d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	f023 0201 	bic.w	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0303 	bic.w	r3, r3, #3
 800740e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 0302 	bic.w	r3, r3, #2
 8007420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <TIM_OC1_SetConfig+0xd8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_OC1_SetConfig+0x64>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a1f      	ldr	r2, [pc, #124]	; (80074b4 <TIM_OC1_SetConfig+0xdc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10c      	bne.n	8007456 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 0308 	bic.w	r3, r3, #8
 8007442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f023 0304 	bic.w	r3, r3, #4
 8007454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <TIM_OC1_SetConfig+0xd8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_OC1_SetConfig+0x8e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a14      	ldr	r2, [pc, #80]	; (80074b4 <TIM_OC1_SetConfig+0xdc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d111      	bne.n	800748a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800746c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	621a      	str	r2, [r3, #32]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	40010000 	.word	0x40010000
 80074b4:	40010400 	.word	0x40010400

080074b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f023 0210 	bic.w	r2, r3, #16
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f023 0320 	bic.w	r3, r3, #32
 8007502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a22      	ldr	r2, [pc, #136]	; (800759c <TIM_OC2_SetConfig+0xe4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_OC2_SetConfig+0x68>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <TIM_OC2_SetConfig+0xe8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10d      	bne.n	800753c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800753a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a17      	ldr	r2, [pc, #92]	; (800759c <TIM_OC2_SetConfig+0xe4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_OC2_SetConfig+0x94>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <TIM_OC2_SetConfig+0xe8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d113      	bne.n	8007574 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800755a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40010000 	.word	0x40010000
 80075a0:	40010400 	.word	0x40010400

080075a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0303 	bic.w	r3, r3, #3
 80075da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a21      	ldr	r2, [pc, #132]	; (8007684 <TIM_OC3_SetConfig+0xe0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_OC3_SetConfig+0x66>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a20      	ldr	r2, [pc, #128]	; (8007688 <TIM_OC3_SetConfig+0xe4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d10d      	bne.n	8007626 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a16      	ldr	r2, [pc, #88]	; (8007684 <TIM_OC3_SetConfig+0xe0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d003      	beq.n	8007636 <TIM_OC3_SetConfig+0x92>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a15      	ldr	r2, [pc, #84]	; (8007688 <TIM_OC3_SetConfig+0xe4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d113      	bne.n	800765e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800763c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	621a      	str	r2, [r3, #32]
}
 8007678:	bf00      	nop
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	40010000 	.word	0x40010000
 8007688:	40010400 	.word	0x40010400

0800768c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	031b      	lsls	r3, r3, #12
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a12      	ldr	r2, [pc, #72]	; (8007730 <TIM_OC4_SetConfig+0xa4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d003      	beq.n	80076f4 <TIM_OC4_SetConfig+0x68>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a11      	ldr	r2, [pc, #68]	; (8007734 <TIM_OC4_SetConfig+0xa8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d109      	bne.n	8007708 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	019b      	lsls	r3, r3, #6
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40010000 	.word	0x40010000
 8007734:	40010400 	.word	0x40010400

08007738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 0201 	bic.w	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f023 030a 	bic.w	r3, r3, #10
 8007774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007796:	b480      	push	{r7}
 8007798:	b087      	sub	sp, #28
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0210 	bic.w	r2, r3, #16
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	031b      	lsls	r3, r3, #12
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	f043 0307 	orr.w	r3, r3, #7
 8007818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	021a      	lsls	r2, r3, #8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	431a      	orrs	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007880:	2302      	movs	r3, #2
 8007882:	e05a      	b.n	800793a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a21      	ldr	r2, [pc, #132]	; (8007948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d022      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d0:	d01d      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1d      	ldr	r2, [pc, #116]	; (800794c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d018      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1b      	ldr	r2, [pc, #108]	; (8007950 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00e      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a18      	ldr	r2, [pc, #96]	; (8007958 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a17      	ldr	r2, [pc, #92]	; (800795c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a15      	ldr	r2, [pc, #84]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d10c      	bne.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	4313      	orrs	r3, r2
 800791e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40010000 	.word	0x40010000
 800794c:	40000400 	.word	0x40000400
 8007950:	40000800 	.word	0x40000800
 8007954:	40000c00 	.word	0x40000c00
 8007958:	40010400 	.word	0x40010400
 800795c:	40014000 	.word	0x40014000
 8007960:	40001800 	.word	0x40001800

08007964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e03f      	b.n	8007a1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fc fcf4 	bl	80043a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2224      	movs	r2, #36	; 0x24
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f829 	bl	8007a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691a      	ldr	r2, [r3, #16]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a2c:	b0c0      	sub	sp, #256	; 0x100
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a44:	68d9      	ldr	r1, [r3, #12]
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	ea40 0301 	orr.w	r3, r0, r1
 8007a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a80:	f021 010c 	bic.w	r1, r1, #12
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa2:	6999      	ldr	r1, [r3, #24]
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	ea40 0301 	orr.w	r3, r0, r1
 8007aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4b8f      	ldr	r3, [pc, #572]	; (8007cf4 <UART_SetConfig+0x2cc>)
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d005      	beq.n	8007ac8 <UART_SetConfig+0xa0>
 8007abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4b8d      	ldr	r3, [pc, #564]	; (8007cf8 <UART_SetConfig+0x2d0>)
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d104      	bne.n	8007ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ac8:	f7fe faf4 	bl	80060b4 <HAL_RCC_GetPCLK2Freq>
 8007acc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ad0:	e003      	b.n	8007ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ad2:	f7fe fadb 	bl	800608c <HAL_RCC_GetPCLK1Freq>
 8007ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae4:	f040 810c 	bne.w	8007d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007afa:	4622      	mov	r2, r4
 8007afc:	462b      	mov	r3, r5
 8007afe:	1891      	adds	r1, r2, r2
 8007b00:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b02:	415b      	adcs	r3, r3
 8007b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	eb12 0801 	adds.w	r8, r2, r1
 8007b10:	4629      	mov	r1, r5
 8007b12:	eb43 0901 	adc.w	r9, r3, r1
 8007b16:	f04f 0200 	mov.w	r2, #0
 8007b1a:	f04f 0300 	mov.w	r3, #0
 8007b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b2a:	4690      	mov	r8, r2
 8007b2c:	4699      	mov	r9, r3
 8007b2e:	4623      	mov	r3, r4
 8007b30:	eb18 0303 	adds.w	r3, r8, r3
 8007b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b38:	462b      	mov	r3, r5
 8007b3a:	eb49 0303 	adc.w	r3, r9, r3
 8007b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b56:	460b      	mov	r3, r1
 8007b58:	18db      	adds	r3, r3, r3
 8007b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	eb42 0303 	adc.w	r3, r2, r3
 8007b62:	657b      	str	r3, [r7, #84]	; 0x54
 8007b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b6c:	f7f9 f808 	bl	8000b80 <__aeabi_uldivmod>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4b61      	ldr	r3, [pc, #388]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007b76:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	011c      	lsls	r4, r3, #4
 8007b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	1891      	adds	r1, r2, r2
 8007b96:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b98:	415b      	adcs	r3, r3
 8007b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	f04f 0300 	mov.w	r3, #0
 8007bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bc0:	4692      	mov	sl, r2
 8007bc2:	469b      	mov	fp, r3
 8007bc4:	4643      	mov	r3, r8
 8007bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8007bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bce:	464b      	mov	r3, r9
 8007bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8007bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007bec:	460b      	mov	r3, r1
 8007bee:	18db      	adds	r3, r3, r3
 8007bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	eb42 0303 	adc.w	r3, r2, r3
 8007bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c02:	f7f8 ffbd 	bl	8000b80 <__aeabi_uldivmod>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	4b3b      	ldr	r3, [pc, #236]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	2264      	movs	r2, #100	; 0x64
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	1acb      	subs	r3, r1, r3
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c22:	4b36      	ldr	r3, [pc, #216]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007c24:	fba3 2302 	umull	r2, r3, r3, r2
 8007c28:	095b      	lsrs	r3, r3, #5
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c30:	441c      	add	r4, r3
 8007c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c44:	4642      	mov	r2, r8
 8007c46:	464b      	mov	r3, r9
 8007c48:	1891      	adds	r1, r2, r2
 8007c4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c4c:	415b      	adcs	r3, r3
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c54:	4641      	mov	r1, r8
 8007c56:	1851      	adds	r1, r2, r1
 8007c58:	6339      	str	r1, [r7, #48]	; 0x30
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	414b      	adcs	r3, r1
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c60:	f04f 0200 	mov.w	r2, #0
 8007c64:	f04f 0300 	mov.w	r3, #0
 8007c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	00cb      	lsls	r3, r1, #3
 8007c70:	4651      	mov	r1, sl
 8007c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c76:	4651      	mov	r1, sl
 8007c78:	00ca      	lsls	r2, r1, #3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4642      	mov	r2, r8
 8007c82:	189b      	adds	r3, r3, r2
 8007c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c88:	464b      	mov	r3, r9
 8007c8a:	460a      	mov	r2, r1
 8007c8c:	eb42 0303 	adc.w	r3, r2, r3
 8007c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ca8:	460b      	mov	r3, r1
 8007caa:	18db      	adds	r3, r3, r3
 8007cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cae:	4613      	mov	r3, r2
 8007cb0:	eb42 0303 	adc.w	r3, r2, r3
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cbe:	f7f8 ff5f 	bl	8000b80 <__aeabi_uldivmod>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	2164      	movs	r1, #100	; 0x64
 8007cd0:	fb01 f303 	mul.w	r3, r1, r3
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	3332      	adds	r3, #50	; 0x32
 8007cda:	4a08      	ldr	r2, [pc, #32]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	f003 0207 	and.w	r2, r3, #7
 8007ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4422      	add	r2, r4
 8007cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cf0:	e105      	b.n	8007efe <UART_SetConfig+0x4d6>
 8007cf2:	bf00      	nop
 8007cf4:	40011000 	.word	0x40011000
 8007cf8:	40011400 	.word	0x40011400
 8007cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d12:	4642      	mov	r2, r8
 8007d14:	464b      	mov	r3, r9
 8007d16:	1891      	adds	r1, r2, r2
 8007d18:	6239      	str	r1, [r7, #32]
 8007d1a:	415b      	adcs	r3, r3
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d22:	4641      	mov	r1, r8
 8007d24:	1854      	adds	r4, r2, r1
 8007d26:	4649      	mov	r1, r9
 8007d28:	eb43 0501 	adc.w	r5, r3, r1
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	00eb      	lsls	r3, r5, #3
 8007d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d3a:	00e2      	lsls	r2, r4, #3
 8007d3c:	4614      	mov	r4, r2
 8007d3e:	461d      	mov	r5, r3
 8007d40:	4643      	mov	r3, r8
 8007d42:	18e3      	adds	r3, r4, r3
 8007d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d48:	464b      	mov	r3, r9
 8007d4a:	eb45 0303 	adc.w	r3, r5, r3
 8007d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d6e:	4629      	mov	r1, r5
 8007d70:	008b      	lsls	r3, r1, #2
 8007d72:	4621      	mov	r1, r4
 8007d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d78:	4621      	mov	r1, r4
 8007d7a:	008a      	lsls	r2, r1, #2
 8007d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d80:	f7f8 fefe 	bl	8000b80 <__aeabi_uldivmod>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4b60      	ldr	r3, [pc, #384]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	011c      	lsls	r4, r3, #4
 8007d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	1891      	adds	r1, r2, r2
 8007daa:	61b9      	str	r1, [r7, #24]
 8007dac:	415b      	adcs	r3, r3
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007db4:	4641      	mov	r1, r8
 8007db6:	1851      	adds	r1, r2, r1
 8007db8:	6139      	str	r1, [r7, #16]
 8007dba:	4649      	mov	r1, r9
 8007dbc:	414b      	adcs	r3, r1
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dcc:	4659      	mov	r1, fp
 8007dce:	00cb      	lsls	r3, r1, #3
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dd6:	4651      	mov	r1, sl
 8007dd8:	00ca      	lsls	r2, r1, #3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	4642      	mov	r2, r8
 8007de2:	189b      	adds	r3, r3, r2
 8007de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007de8:	464b      	mov	r3, r9
 8007dea:	460a      	mov	r2, r1
 8007dec:	eb42 0303 	adc.w	r3, r2, r3
 8007df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	008b      	lsls	r3, r1, #2
 8007e10:	4641      	mov	r1, r8
 8007e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e16:	4641      	mov	r1, r8
 8007e18:	008a      	lsls	r2, r1, #2
 8007e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e1e:	f7f8 feaf 	bl	8000b80 <__aeabi_uldivmod>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4b39      	ldr	r3, [pc, #228]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007e28:	fba3 1302 	umull	r1, r3, r3, r2
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	2164      	movs	r1, #100	; 0x64
 8007e30:	fb01 f303 	mul.w	r3, r1, r3
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	3332      	adds	r3, #50	; 0x32
 8007e3a:	4a34      	ldr	r2, [pc, #208]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e46:	441c      	add	r4, r3
 8007e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8007e50:	677a      	str	r2, [r7, #116]	; 0x74
 8007e52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e56:	4642      	mov	r2, r8
 8007e58:	464b      	mov	r3, r9
 8007e5a:	1891      	adds	r1, r2, r2
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	415b      	adcs	r3, r3
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e66:	4641      	mov	r1, r8
 8007e68:	1851      	adds	r1, r2, r1
 8007e6a:	6039      	str	r1, [r7, #0]
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	414b      	adcs	r3, r1
 8007e70:	607b      	str	r3, [r7, #4]
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e7e:	4659      	mov	r1, fp
 8007e80:	00cb      	lsls	r3, r1, #3
 8007e82:	4651      	mov	r1, sl
 8007e84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e88:	4651      	mov	r1, sl
 8007e8a:	00ca      	lsls	r2, r1, #3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4603      	mov	r3, r0
 8007e92:	4642      	mov	r2, r8
 8007e94:	189b      	adds	r3, r3, r2
 8007e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e98:	464b      	mov	r3, r9
 8007e9a:	460a      	mov	r2, r1
 8007e9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8007eac:	667a      	str	r2, [r7, #100]	; 0x64
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007eba:	4649      	mov	r1, r9
 8007ebc:	008b      	lsls	r3, r1, #2
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	008a      	lsls	r2, r1, #2
 8007ec8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ecc:	f7f8 fe58 	bl	8000b80 <__aeabi_uldivmod>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	2164      	movs	r1, #100	; 0x64
 8007ede:	fb01 f303 	mul.w	r3, r1, r3
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	3332      	adds	r3, #50	; 0x32
 8007ee8:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007eea:	fba2 2303 	umull	r2, r3, r2, r3
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	f003 020f 	and.w	r2, r3, #15
 8007ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4422      	add	r2, r4
 8007efc:	609a      	str	r2, [r3, #8]
}
 8007efe:	bf00      	nop
 8007f00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f04:	46bd      	mov	sp, r7
 8007f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f0a:	bf00      	nop
 8007f0c:	51eb851f 	.word	0x51eb851f

08007f10 <__errno>:
 8007f10:	4b01      	ldr	r3, [pc, #4]	; (8007f18 <__errno+0x8>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	200000ac 	.word	0x200000ac

08007f1c <__libc_init_array>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4d0d      	ldr	r5, [pc, #52]	; (8007f54 <__libc_init_array+0x38>)
 8007f20:	4c0d      	ldr	r4, [pc, #52]	; (8007f58 <__libc_init_array+0x3c>)
 8007f22:	1b64      	subs	r4, r4, r5
 8007f24:	10a4      	asrs	r4, r4, #2
 8007f26:	2600      	movs	r6, #0
 8007f28:	42a6      	cmp	r6, r4
 8007f2a:	d109      	bne.n	8007f40 <__libc_init_array+0x24>
 8007f2c:	4d0b      	ldr	r5, [pc, #44]	; (8007f5c <__libc_init_array+0x40>)
 8007f2e:	4c0c      	ldr	r4, [pc, #48]	; (8007f60 <__libc_init_array+0x44>)
 8007f30:	f000 ff68 	bl	8008e04 <_init>
 8007f34:	1b64      	subs	r4, r4, r5
 8007f36:	10a4      	asrs	r4, r4, #2
 8007f38:	2600      	movs	r6, #0
 8007f3a:	42a6      	cmp	r6, r4
 8007f3c:	d105      	bne.n	8007f4a <__libc_init_array+0x2e>
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f44:	4798      	blx	r3
 8007f46:	3601      	adds	r6, #1
 8007f48:	e7ee      	b.n	8007f28 <__libc_init_array+0xc>
 8007f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4e:	4798      	blx	r3
 8007f50:	3601      	adds	r6, #1
 8007f52:	e7f2      	b.n	8007f3a <__libc_init_array+0x1e>
 8007f54:	08009d70 	.word	0x08009d70
 8007f58:	08009d70 	.word	0x08009d70
 8007f5c:	08009d70 	.word	0x08009d70
 8007f60:	08009d74 	.word	0x08009d74

08007f64 <memset>:
 8007f64:	4402      	add	r2, r0
 8007f66:	4603      	mov	r3, r0
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d100      	bne.n	8007f6e <memset+0xa>
 8007f6c:	4770      	bx	lr
 8007f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f72:	e7f9      	b.n	8007f68 <memset+0x4>

08007f74 <pow>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	ed2d 8b02 	vpush	{d8}
 8007f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8007f7e:	eef0 8a60 	vmov.f32	s17, s1
 8007f82:	ec55 4b11 	vmov	r4, r5, d1
 8007f86:	f000 f893 	bl	80080b0 <__ieee754_pow>
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	4620      	mov	r0, r4
 8007f90:	4629      	mov	r1, r5
 8007f92:	ec57 6b10 	vmov	r6, r7, d0
 8007f96:	f7f8 fd6d 	bl	8000a74 <__aeabi_dcmpun>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d13b      	bne.n	8008016 <pow+0xa2>
 8007f9e:	ec51 0b18 	vmov	r0, r1, d8
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f7f8 fd33 	bl	8000a10 <__aeabi_dcmpeq>
 8007faa:	b1b8      	cbz	r0, 8007fdc <pow+0x68>
 8007fac:	2200      	movs	r2, #0
 8007fae:	2300      	movs	r3, #0
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	f7f8 fd2c 	bl	8000a10 <__aeabi_dcmpeq>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d146      	bne.n	800804a <pow+0xd6>
 8007fbc:	ec45 4b10 	vmov	d0, r4, r5
 8007fc0:	f000 fe8f 	bl	8008ce2 <finite>
 8007fc4:	b338      	cbz	r0, 8008016 <pow+0xa2>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4620      	mov	r0, r4
 8007fcc:	4629      	mov	r1, r5
 8007fce:	f7f8 fd29 	bl	8000a24 <__aeabi_dcmplt>
 8007fd2:	b300      	cbz	r0, 8008016 <pow+0xa2>
 8007fd4:	f7ff ff9c 	bl	8007f10 <__errno>
 8007fd8:	2322      	movs	r3, #34	; 0x22
 8007fda:	e01b      	b.n	8008014 <pow+0xa0>
 8007fdc:	ec47 6b10 	vmov	d0, r6, r7
 8007fe0:	f000 fe7f 	bl	8008ce2 <finite>
 8007fe4:	b9e0      	cbnz	r0, 8008020 <pow+0xac>
 8007fe6:	eeb0 0a48 	vmov.f32	s0, s16
 8007fea:	eef0 0a68 	vmov.f32	s1, s17
 8007fee:	f000 fe78 	bl	8008ce2 <finite>
 8007ff2:	b1a8      	cbz	r0, 8008020 <pow+0xac>
 8007ff4:	ec45 4b10 	vmov	d0, r4, r5
 8007ff8:	f000 fe73 	bl	8008ce2 <finite>
 8007ffc:	b180      	cbz	r0, 8008020 <pow+0xac>
 8007ffe:	4632      	mov	r2, r6
 8008000:	463b      	mov	r3, r7
 8008002:	4630      	mov	r0, r6
 8008004:	4639      	mov	r1, r7
 8008006:	f7f8 fd35 	bl	8000a74 <__aeabi_dcmpun>
 800800a:	2800      	cmp	r0, #0
 800800c:	d0e2      	beq.n	8007fd4 <pow+0x60>
 800800e:	f7ff ff7f 	bl	8007f10 <__errno>
 8008012:	2321      	movs	r3, #33	; 0x21
 8008014:	6003      	str	r3, [r0, #0]
 8008016:	ecbd 8b02 	vpop	{d8}
 800801a:	ec47 6b10 	vmov	d0, r6, r7
 800801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008020:	2200      	movs	r2, #0
 8008022:	2300      	movs	r3, #0
 8008024:	4630      	mov	r0, r6
 8008026:	4639      	mov	r1, r7
 8008028:	f7f8 fcf2 	bl	8000a10 <__aeabi_dcmpeq>
 800802c:	2800      	cmp	r0, #0
 800802e:	d0f2      	beq.n	8008016 <pow+0xa2>
 8008030:	eeb0 0a48 	vmov.f32	s0, s16
 8008034:	eef0 0a68 	vmov.f32	s1, s17
 8008038:	f000 fe53 	bl	8008ce2 <finite>
 800803c:	2800      	cmp	r0, #0
 800803e:	d0ea      	beq.n	8008016 <pow+0xa2>
 8008040:	ec45 4b10 	vmov	d0, r4, r5
 8008044:	f000 fe4d 	bl	8008ce2 <finite>
 8008048:	e7c3      	b.n	8007fd2 <pow+0x5e>
 800804a:	4f01      	ldr	r7, [pc, #4]	; (8008050 <pow+0xdc>)
 800804c:	2600      	movs	r6, #0
 800804e:	e7e2      	b.n	8008016 <pow+0xa2>
 8008050:	3ff00000 	.word	0x3ff00000

08008054 <sqrt>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	ed2d 8b02 	vpush	{d8}
 800805a:	ec55 4b10 	vmov	r4, r5, d0
 800805e:	f000 fd55 	bl	8008b0c <__ieee754_sqrt>
 8008062:	4622      	mov	r2, r4
 8008064:	462b      	mov	r3, r5
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	eeb0 8a40 	vmov.f32	s16, s0
 800806e:	eef0 8a60 	vmov.f32	s17, s1
 8008072:	f7f8 fcff 	bl	8000a74 <__aeabi_dcmpun>
 8008076:	b990      	cbnz	r0, 800809e <sqrt+0x4a>
 8008078:	2200      	movs	r2, #0
 800807a:	2300      	movs	r3, #0
 800807c:	4620      	mov	r0, r4
 800807e:	4629      	mov	r1, r5
 8008080:	f7f8 fcd0 	bl	8000a24 <__aeabi_dcmplt>
 8008084:	b158      	cbz	r0, 800809e <sqrt+0x4a>
 8008086:	f7ff ff43 	bl	8007f10 <__errno>
 800808a:	2321      	movs	r3, #33	; 0x21
 800808c:	6003      	str	r3, [r0, #0]
 800808e:	2200      	movs	r2, #0
 8008090:	2300      	movs	r3, #0
 8008092:	4610      	mov	r0, r2
 8008094:	4619      	mov	r1, r3
 8008096:	f7f8 fb7d 	bl	8000794 <__aeabi_ddiv>
 800809a:	ec41 0b18 	vmov	d8, r0, r1
 800809e:	eeb0 0a48 	vmov.f32	s0, s16
 80080a2:	eef0 0a68 	vmov.f32	s1, s17
 80080a6:	ecbd 8b02 	vpop	{d8}
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	0000      	movs	r0, r0
	...

080080b0 <__ieee754_pow>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	ed2d 8b06 	vpush	{d8-d10}
 80080b8:	b089      	sub	sp, #36	; 0x24
 80080ba:	ed8d 1b00 	vstr	d1, [sp]
 80080be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80080c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80080c6:	ea58 0102 	orrs.w	r1, r8, r2
 80080ca:	ec57 6b10 	vmov	r6, r7, d0
 80080ce:	d115      	bne.n	80080fc <__ieee754_pow+0x4c>
 80080d0:	19b3      	adds	r3, r6, r6
 80080d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80080d6:	4152      	adcs	r2, r2
 80080d8:	4299      	cmp	r1, r3
 80080da:	4b89      	ldr	r3, [pc, #548]	; (8008300 <__ieee754_pow+0x250>)
 80080dc:	4193      	sbcs	r3, r2
 80080de:	f080 84d2 	bcs.w	8008a86 <__ieee754_pow+0x9d6>
 80080e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7f8 f873 	bl	80001d4 <__adddf3>
 80080ee:	ec41 0b10 	vmov	d0, r0, r1
 80080f2:	b009      	add	sp, #36	; 0x24
 80080f4:	ecbd 8b06 	vpop	{d8-d10}
 80080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fc:	4b81      	ldr	r3, [pc, #516]	; (8008304 <__ieee754_pow+0x254>)
 80080fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008102:	429c      	cmp	r4, r3
 8008104:	ee10 aa10 	vmov	sl, s0
 8008108:	463d      	mov	r5, r7
 800810a:	dc06      	bgt.n	800811a <__ieee754_pow+0x6a>
 800810c:	d101      	bne.n	8008112 <__ieee754_pow+0x62>
 800810e:	2e00      	cmp	r6, #0
 8008110:	d1e7      	bne.n	80080e2 <__ieee754_pow+0x32>
 8008112:	4598      	cmp	r8, r3
 8008114:	dc01      	bgt.n	800811a <__ieee754_pow+0x6a>
 8008116:	d10f      	bne.n	8008138 <__ieee754_pow+0x88>
 8008118:	b172      	cbz	r2, 8008138 <__ieee754_pow+0x88>
 800811a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800811e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008122:	ea55 050a 	orrs.w	r5, r5, sl
 8008126:	d1dc      	bne.n	80080e2 <__ieee754_pow+0x32>
 8008128:	e9dd 3200 	ldrd	r3, r2, [sp]
 800812c:	18db      	adds	r3, r3, r3
 800812e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008132:	4152      	adcs	r2, r2
 8008134:	429d      	cmp	r5, r3
 8008136:	e7d0      	b.n	80080da <__ieee754_pow+0x2a>
 8008138:	2d00      	cmp	r5, #0
 800813a:	da3b      	bge.n	80081b4 <__ieee754_pow+0x104>
 800813c:	4b72      	ldr	r3, [pc, #456]	; (8008308 <__ieee754_pow+0x258>)
 800813e:	4598      	cmp	r8, r3
 8008140:	dc51      	bgt.n	80081e6 <__ieee754_pow+0x136>
 8008142:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008146:	4598      	cmp	r8, r3
 8008148:	f340 84ac 	ble.w	8008aa4 <__ieee754_pow+0x9f4>
 800814c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008150:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008154:	2b14      	cmp	r3, #20
 8008156:	dd0f      	ble.n	8008178 <__ieee754_pow+0xc8>
 8008158:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800815c:	fa22 f103 	lsr.w	r1, r2, r3
 8008160:	fa01 f303 	lsl.w	r3, r1, r3
 8008164:	4293      	cmp	r3, r2
 8008166:	f040 849d 	bne.w	8008aa4 <__ieee754_pow+0x9f4>
 800816a:	f001 0101 	and.w	r1, r1, #1
 800816e:	f1c1 0302 	rsb	r3, r1, #2
 8008172:	9304      	str	r3, [sp, #16]
 8008174:	b182      	cbz	r2, 8008198 <__ieee754_pow+0xe8>
 8008176:	e05f      	b.n	8008238 <__ieee754_pow+0x188>
 8008178:	2a00      	cmp	r2, #0
 800817a:	d15b      	bne.n	8008234 <__ieee754_pow+0x184>
 800817c:	f1c3 0314 	rsb	r3, r3, #20
 8008180:	fa48 f103 	asr.w	r1, r8, r3
 8008184:	fa01 f303 	lsl.w	r3, r1, r3
 8008188:	4543      	cmp	r3, r8
 800818a:	f040 8488 	bne.w	8008a9e <__ieee754_pow+0x9ee>
 800818e:	f001 0101 	and.w	r1, r1, #1
 8008192:	f1c1 0302 	rsb	r3, r1, #2
 8008196:	9304      	str	r3, [sp, #16]
 8008198:	4b5c      	ldr	r3, [pc, #368]	; (800830c <__ieee754_pow+0x25c>)
 800819a:	4598      	cmp	r8, r3
 800819c:	d132      	bne.n	8008204 <__ieee754_pow+0x154>
 800819e:	f1b9 0f00 	cmp.w	r9, #0
 80081a2:	f280 8478 	bge.w	8008a96 <__ieee754_pow+0x9e6>
 80081a6:	4959      	ldr	r1, [pc, #356]	; (800830c <__ieee754_pow+0x25c>)
 80081a8:	4632      	mov	r2, r6
 80081aa:	463b      	mov	r3, r7
 80081ac:	2000      	movs	r0, #0
 80081ae:	f7f8 faf1 	bl	8000794 <__aeabi_ddiv>
 80081b2:	e79c      	b.n	80080ee <__ieee754_pow+0x3e>
 80081b4:	2300      	movs	r3, #0
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	d13d      	bne.n	8008238 <__ieee754_pow+0x188>
 80081bc:	4b51      	ldr	r3, [pc, #324]	; (8008304 <__ieee754_pow+0x254>)
 80081be:	4598      	cmp	r8, r3
 80081c0:	d1ea      	bne.n	8008198 <__ieee754_pow+0xe8>
 80081c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80081c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80081ca:	ea53 030a 	orrs.w	r3, r3, sl
 80081ce:	f000 845a 	beq.w	8008a86 <__ieee754_pow+0x9d6>
 80081d2:	4b4f      	ldr	r3, [pc, #316]	; (8008310 <__ieee754_pow+0x260>)
 80081d4:	429c      	cmp	r4, r3
 80081d6:	dd08      	ble.n	80081ea <__ieee754_pow+0x13a>
 80081d8:	f1b9 0f00 	cmp.w	r9, #0
 80081dc:	f2c0 8457 	blt.w	8008a8e <__ieee754_pow+0x9de>
 80081e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081e4:	e783      	b.n	80080ee <__ieee754_pow+0x3e>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e7e5      	b.n	80081b6 <__ieee754_pow+0x106>
 80081ea:	f1b9 0f00 	cmp.w	r9, #0
 80081ee:	f04f 0000 	mov.w	r0, #0
 80081f2:	f04f 0100 	mov.w	r1, #0
 80081f6:	f6bf af7a 	bge.w	80080ee <__ieee754_pow+0x3e>
 80081fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80081fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008202:	e774      	b.n	80080ee <__ieee754_pow+0x3e>
 8008204:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008208:	d106      	bne.n	8008218 <__ieee754_pow+0x168>
 800820a:	4632      	mov	r2, r6
 800820c:	463b      	mov	r3, r7
 800820e:	4630      	mov	r0, r6
 8008210:	4639      	mov	r1, r7
 8008212:	f7f8 f995 	bl	8000540 <__aeabi_dmul>
 8008216:	e76a      	b.n	80080ee <__ieee754_pow+0x3e>
 8008218:	4b3e      	ldr	r3, [pc, #248]	; (8008314 <__ieee754_pow+0x264>)
 800821a:	4599      	cmp	r9, r3
 800821c:	d10c      	bne.n	8008238 <__ieee754_pow+0x188>
 800821e:	2d00      	cmp	r5, #0
 8008220:	db0a      	blt.n	8008238 <__ieee754_pow+0x188>
 8008222:	ec47 6b10 	vmov	d0, r6, r7
 8008226:	b009      	add	sp, #36	; 0x24
 8008228:	ecbd 8b06 	vpop	{d8-d10}
 800822c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	f000 bc6c 	b.w	8008b0c <__ieee754_sqrt>
 8008234:	2300      	movs	r3, #0
 8008236:	9304      	str	r3, [sp, #16]
 8008238:	ec47 6b10 	vmov	d0, r6, r7
 800823c:	f000 fd48 	bl	8008cd0 <fabs>
 8008240:	ec51 0b10 	vmov	r0, r1, d0
 8008244:	f1ba 0f00 	cmp.w	sl, #0
 8008248:	d129      	bne.n	800829e <__ieee754_pow+0x1ee>
 800824a:	b124      	cbz	r4, 8008256 <__ieee754_pow+0x1a6>
 800824c:	4b2f      	ldr	r3, [pc, #188]	; (800830c <__ieee754_pow+0x25c>)
 800824e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008252:	429a      	cmp	r2, r3
 8008254:	d123      	bne.n	800829e <__ieee754_pow+0x1ee>
 8008256:	f1b9 0f00 	cmp.w	r9, #0
 800825a:	da05      	bge.n	8008268 <__ieee754_pow+0x1b8>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	2000      	movs	r0, #0
 8008262:	492a      	ldr	r1, [pc, #168]	; (800830c <__ieee754_pow+0x25c>)
 8008264:	f7f8 fa96 	bl	8000794 <__aeabi_ddiv>
 8008268:	2d00      	cmp	r5, #0
 800826a:	f6bf af40 	bge.w	80080ee <__ieee754_pow+0x3e>
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008274:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008278:	4323      	orrs	r3, r4
 800827a:	d108      	bne.n	800828e <__ieee754_pow+0x1de>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4610      	mov	r0, r2
 8008282:	4619      	mov	r1, r3
 8008284:	f7f7 ffa4 	bl	80001d0 <__aeabi_dsub>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	e78f      	b.n	80081ae <__ieee754_pow+0xfe>
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	2b01      	cmp	r3, #1
 8008292:	f47f af2c 	bne.w	80080ee <__ieee754_pow+0x3e>
 8008296:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800829a:	4619      	mov	r1, r3
 800829c:	e727      	b.n	80080ee <__ieee754_pow+0x3e>
 800829e:	0feb      	lsrs	r3, r5, #31
 80082a0:	3b01      	subs	r3, #1
 80082a2:	9306      	str	r3, [sp, #24]
 80082a4:	9a06      	ldr	r2, [sp, #24]
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	d102      	bne.n	80082b2 <__ieee754_pow+0x202>
 80082ac:	4632      	mov	r2, r6
 80082ae:	463b      	mov	r3, r7
 80082b0:	e7e6      	b.n	8008280 <__ieee754_pow+0x1d0>
 80082b2:	4b19      	ldr	r3, [pc, #100]	; (8008318 <__ieee754_pow+0x268>)
 80082b4:	4598      	cmp	r8, r3
 80082b6:	f340 80fb 	ble.w	80084b0 <__ieee754_pow+0x400>
 80082ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80082be:	4598      	cmp	r8, r3
 80082c0:	4b13      	ldr	r3, [pc, #76]	; (8008310 <__ieee754_pow+0x260>)
 80082c2:	dd0c      	ble.n	80082de <__ieee754_pow+0x22e>
 80082c4:	429c      	cmp	r4, r3
 80082c6:	dc0f      	bgt.n	80082e8 <__ieee754_pow+0x238>
 80082c8:	f1b9 0f00 	cmp.w	r9, #0
 80082cc:	da0f      	bge.n	80082ee <__ieee754_pow+0x23e>
 80082ce:	2000      	movs	r0, #0
 80082d0:	b009      	add	sp, #36	; 0x24
 80082d2:	ecbd 8b06 	vpop	{d8-d10}
 80082d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082da:	f000 bcf0 	b.w	8008cbe <__math_oflow>
 80082de:	429c      	cmp	r4, r3
 80082e0:	dbf2      	blt.n	80082c8 <__ieee754_pow+0x218>
 80082e2:	4b0a      	ldr	r3, [pc, #40]	; (800830c <__ieee754_pow+0x25c>)
 80082e4:	429c      	cmp	r4, r3
 80082e6:	dd19      	ble.n	800831c <__ieee754_pow+0x26c>
 80082e8:	f1b9 0f00 	cmp.w	r9, #0
 80082ec:	dcef      	bgt.n	80082ce <__ieee754_pow+0x21e>
 80082ee:	2000      	movs	r0, #0
 80082f0:	b009      	add	sp, #36	; 0x24
 80082f2:	ecbd 8b06 	vpop	{d8-d10}
 80082f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	f000 bcd7 	b.w	8008cac <__math_uflow>
 80082fe:	bf00      	nop
 8008300:	fff00000 	.word	0xfff00000
 8008304:	7ff00000 	.word	0x7ff00000
 8008308:	433fffff 	.word	0x433fffff
 800830c:	3ff00000 	.word	0x3ff00000
 8008310:	3fefffff 	.word	0x3fefffff
 8008314:	3fe00000 	.word	0x3fe00000
 8008318:	41e00000 	.word	0x41e00000
 800831c:	4b60      	ldr	r3, [pc, #384]	; (80084a0 <__ieee754_pow+0x3f0>)
 800831e:	2200      	movs	r2, #0
 8008320:	f7f7 ff56 	bl	80001d0 <__aeabi_dsub>
 8008324:	a354      	add	r3, pc, #336	; (adr r3, 8008478 <__ieee754_pow+0x3c8>)
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	4604      	mov	r4, r0
 800832c:	460d      	mov	r5, r1
 800832e:	f7f8 f907 	bl	8000540 <__aeabi_dmul>
 8008332:	a353      	add	r3, pc, #332	; (adr r3, 8008480 <__ieee754_pow+0x3d0>)
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	4606      	mov	r6, r0
 800833a:	460f      	mov	r7, r1
 800833c:	4620      	mov	r0, r4
 800833e:	4629      	mov	r1, r5
 8008340:	f7f8 f8fe 	bl	8000540 <__aeabi_dmul>
 8008344:	4b57      	ldr	r3, [pc, #348]	; (80084a4 <__ieee754_pow+0x3f4>)
 8008346:	4682      	mov	sl, r0
 8008348:	468b      	mov	fp, r1
 800834a:	2200      	movs	r2, #0
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	f7f8 f8f6 	bl	8000540 <__aeabi_dmul>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	a14b      	add	r1, pc, #300	; (adr r1, 8008488 <__ieee754_pow+0x3d8>)
 800835a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835e:	f7f7 ff37 	bl	80001d0 <__aeabi_dsub>
 8008362:	4622      	mov	r2, r4
 8008364:	462b      	mov	r3, r5
 8008366:	f7f8 f8eb 	bl	8000540 <__aeabi_dmul>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	2000      	movs	r0, #0
 8008370:	494d      	ldr	r1, [pc, #308]	; (80084a8 <__ieee754_pow+0x3f8>)
 8008372:	f7f7 ff2d 	bl	80001d0 <__aeabi_dsub>
 8008376:	4622      	mov	r2, r4
 8008378:	4680      	mov	r8, r0
 800837a:	4689      	mov	r9, r1
 800837c:	462b      	mov	r3, r5
 800837e:	4620      	mov	r0, r4
 8008380:	4629      	mov	r1, r5
 8008382:	f7f8 f8dd 	bl	8000540 <__aeabi_dmul>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4640      	mov	r0, r8
 800838c:	4649      	mov	r1, r9
 800838e:	f7f8 f8d7 	bl	8000540 <__aeabi_dmul>
 8008392:	a33f      	add	r3, pc, #252	; (adr r3, 8008490 <__ieee754_pow+0x3e0>)
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f7f8 f8d2 	bl	8000540 <__aeabi_dmul>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4650      	mov	r0, sl
 80083a2:	4659      	mov	r1, fp
 80083a4:	f7f7 ff14 	bl	80001d0 <__aeabi_dsub>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	4630      	mov	r0, r6
 80083b2:	4639      	mov	r1, r7
 80083b4:	f7f7 ff0e 	bl	80001d4 <__adddf3>
 80083b8:	2000      	movs	r0, #0
 80083ba:	4632      	mov	r2, r6
 80083bc:	463b      	mov	r3, r7
 80083be:	4604      	mov	r4, r0
 80083c0:	460d      	mov	r5, r1
 80083c2:	f7f7 ff05 	bl	80001d0 <__aeabi_dsub>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	4640      	mov	r0, r8
 80083cc:	4649      	mov	r1, r9
 80083ce:	f7f7 feff 	bl	80001d0 <__aeabi_dsub>
 80083d2:	9b04      	ldr	r3, [sp, #16]
 80083d4:	9a06      	ldr	r2, [sp, #24]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	4313      	orrs	r3, r2
 80083da:	4682      	mov	sl, r0
 80083dc:	468b      	mov	fp, r1
 80083de:	f040 81e7 	bne.w	80087b0 <__ieee754_pow+0x700>
 80083e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008498 <__ieee754_pow+0x3e8>
 80083e6:	eeb0 8a47 	vmov.f32	s16, s14
 80083ea:	eef0 8a67 	vmov.f32	s17, s15
 80083ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083f2:	2600      	movs	r6, #0
 80083f4:	4632      	mov	r2, r6
 80083f6:	463b      	mov	r3, r7
 80083f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083fc:	f7f7 fee8 	bl	80001d0 <__aeabi_dsub>
 8008400:	4622      	mov	r2, r4
 8008402:	462b      	mov	r3, r5
 8008404:	f7f8 f89c 	bl	8000540 <__aeabi_dmul>
 8008408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800840c:	4680      	mov	r8, r0
 800840e:	4689      	mov	r9, r1
 8008410:	4650      	mov	r0, sl
 8008412:	4659      	mov	r1, fp
 8008414:	f7f8 f894 	bl	8000540 <__aeabi_dmul>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4640      	mov	r0, r8
 800841e:	4649      	mov	r1, r9
 8008420:	f7f7 fed8 	bl	80001d4 <__adddf3>
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	4680      	mov	r8, r0
 800842a:	4689      	mov	r9, r1
 800842c:	4620      	mov	r0, r4
 800842e:	4629      	mov	r1, r5
 8008430:	f7f8 f886 	bl	8000540 <__aeabi_dmul>
 8008434:	460b      	mov	r3, r1
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
 800843a:	4602      	mov	r2, r0
 800843c:	4649      	mov	r1, r9
 800843e:	4640      	mov	r0, r8
 8008440:	f7f7 fec8 	bl	80001d4 <__adddf3>
 8008444:	4b19      	ldr	r3, [pc, #100]	; (80084ac <__ieee754_pow+0x3fc>)
 8008446:	4299      	cmp	r1, r3
 8008448:	ec45 4b19 	vmov	d9, r4, r5
 800844c:	4606      	mov	r6, r0
 800844e:	460f      	mov	r7, r1
 8008450:	468b      	mov	fp, r1
 8008452:	f340 82f1 	ble.w	8008a38 <__ieee754_pow+0x988>
 8008456:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800845a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800845e:	4303      	orrs	r3, r0
 8008460:	f000 81e4 	beq.w	800882c <__ieee754_pow+0x77c>
 8008464:	ec51 0b18 	vmov	r0, r1, d8
 8008468:	2200      	movs	r2, #0
 800846a:	2300      	movs	r3, #0
 800846c:	f7f8 fada 	bl	8000a24 <__aeabi_dcmplt>
 8008470:	3800      	subs	r0, #0
 8008472:	bf18      	it	ne
 8008474:	2001      	movne	r0, #1
 8008476:	e72b      	b.n	80082d0 <__ieee754_pow+0x220>
 8008478:	60000000 	.word	0x60000000
 800847c:	3ff71547 	.word	0x3ff71547
 8008480:	f85ddf44 	.word	0xf85ddf44
 8008484:	3e54ae0b 	.word	0x3e54ae0b
 8008488:	55555555 	.word	0x55555555
 800848c:	3fd55555 	.word	0x3fd55555
 8008490:	652b82fe 	.word	0x652b82fe
 8008494:	3ff71547 	.word	0x3ff71547
 8008498:	00000000 	.word	0x00000000
 800849c:	bff00000 	.word	0xbff00000
 80084a0:	3ff00000 	.word	0x3ff00000
 80084a4:	3fd00000 	.word	0x3fd00000
 80084a8:	3fe00000 	.word	0x3fe00000
 80084ac:	408fffff 	.word	0x408fffff
 80084b0:	4bd5      	ldr	r3, [pc, #852]	; (8008808 <__ieee754_pow+0x758>)
 80084b2:	402b      	ands	r3, r5
 80084b4:	2200      	movs	r2, #0
 80084b6:	b92b      	cbnz	r3, 80084c4 <__ieee754_pow+0x414>
 80084b8:	4bd4      	ldr	r3, [pc, #848]	; (800880c <__ieee754_pow+0x75c>)
 80084ba:	f7f8 f841 	bl	8000540 <__aeabi_dmul>
 80084be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80084c2:	460c      	mov	r4, r1
 80084c4:	1523      	asrs	r3, r4, #20
 80084c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80084ca:	4413      	add	r3, r2
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	4bd0      	ldr	r3, [pc, #832]	; (8008810 <__ieee754_pow+0x760>)
 80084d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80084d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80084d8:	429c      	cmp	r4, r3
 80084da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80084de:	dd08      	ble.n	80084f2 <__ieee754_pow+0x442>
 80084e0:	4bcc      	ldr	r3, [pc, #816]	; (8008814 <__ieee754_pow+0x764>)
 80084e2:	429c      	cmp	r4, r3
 80084e4:	f340 8162 	ble.w	80087ac <__ieee754_pow+0x6fc>
 80084e8:	9b05      	ldr	r3, [sp, #20]
 80084ea:	3301      	adds	r3, #1
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80084f2:	2400      	movs	r4, #0
 80084f4:	00e3      	lsls	r3, r4, #3
 80084f6:	9307      	str	r3, [sp, #28]
 80084f8:	4bc7      	ldr	r3, [pc, #796]	; (8008818 <__ieee754_pow+0x768>)
 80084fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084fe:	ed93 7b00 	vldr	d7, [r3]
 8008502:	4629      	mov	r1, r5
 8008504:	ec53 2b17 	vmov	r2, r3, d7
 8008508:	eeb0 9a47 	vmov.f32	s18, s14
 800850c:	eef0 9a67 	vmov.f32	s19, s15
 8008510:	4682      	mov	sl, r0
 8008512:	f7f7 fe5d 	bl	80001d0 <__aeabi_dsub>
 8008516:	4652      	mov	r2, sl
 8008518:	4606      	mov	r6, r0
 800851a:	460f      	mov	r7, r1
 800851c:	462b      	mov	r3, r5
 800851e:	ec51 0b19 	vmov	r0, r1, d9
 8008522:	f7f7 fe57 	bl	80001d4 <__adddf3>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	2000      	movs	r0, #0
 800852c:	49bb      	ldr	r1, [pc, #748]	; (800881c <__ieee754_pow+0x76c>)
 800852e:	f7f8 f931 	bl	8000794 <__aeabi_ddiv>
 8008532:	ec41 0b1a 	vmov	d10, r0, r1
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4630      	mov	r0, r6
 800853c:	4639      	mov	r1, r7
 800853e:	f7f7 ffff 	bl	8000540 <__aeabi_dmul>
 8008542:	2300      	movs	r3, #0
 8008544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008548:	9302      	str	r3, [sp, #8]
 800854a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800854e:	46ab      	mov	fp, r5
 8008550:	106d      	asrs	r5, r5, #1
 8008552:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008556:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800855a:	ec41 0b18 	vmov	d8, r0, r1
 800855e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008562:	2200      	movs	r2, #0
 8008564:	4640      	mov	r0, r8
 8008566:	4649      	mov	r1, r9
 8008568:	4614      	mov	r4, r2
 800856a:	461d      	mov	r5, r3
 800856c:	f7f7 ffe8 	bl	8000540 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4630      	mov	r0, r6
 8008576:	4639      	mov	r1, r7
 8008578:	f7f7 fe2a 	bl	80001d0 <__aeabi_dsub>
 800857c:	ec53 2b19 	vmov	r2, r3, d9
 8008580:	4606      	mov	r6, r0
 8008582:	460f      	mov	r7, r1
 8008584:	4620      	mov	r0, r4
 8008586:	4629      	mov	r1, r5
 8008588:	f7f7 fe22 	bl	80001d0 <__aeabi_dsub>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4650      	mov	r0, sl
 8008592:	4659      	mov	r1, fp
 8008594:	f7f7 fe1c 	bl	80001d0 <__aeabi_dsub>
 8008598:	4642      	mov	r2, r8
 800859a:	464b      	mov	r3, r9
 800859c:	f7f7 ffd0 	bl	8000540 <__aeabi_dmul>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4630      	mov	r0, r6
 80085a6:	4639      	mov	r1, r7
 80085a8:	f7f7 fe12 	bl	80001d0 <__aeabi_dsub>
 80085ac:	ec53 2b1a 	vmov	r2, r3, d10
 80085b0:	f7f7 ffc6 	bl	8000540 <__aeabi_dmul>
 80085b4:	ec53 2b18 	vmov	r2, r3, d8
 80085b8:	ec41 0b19 	vmov	d9, r0, r1
 80085bc:	ec51 0b18 	vmov	r0, r1, d8
 80085c0:	f7f7 ffbe 	bl	8000540 <__aeabi_dmul>
 80085c4:	a37c      	add	r3, pc, #496	; (adr r3, 80087b8 <__ieee754_pow+0x708>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	4604      	mov	r4, r0
 80085cc:	460d      	mov	r5, r1
 80085ce:	f7f7 ffb7 	bl	8000540 <__aeabi_dmul>
 80085d2:	a37b      	add	r3, pc, #492	; (adr r3, 80087c0 <__ieee754_pow+0x710>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f7 fdfc 	bl	80001d4 <__adddf3>
 80085dc:	4622      	mov	r2, r4
 80085de:	462b      	mov	r3, r5
 80085e0:	f7f7 ffae 	bl	8000540 <__aeabi_dmul>
 80085e4:	a378      	add	r3, pc, #480	; (adr r3, 80087c8 <__ieee754_pow+0x718>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f7 fdf3 	bl	80001d4 <__adddf3>
 80085ee:	4622      	mov	r2, r4
 80085f0:	462b      	mov	r3, r5
 80085f2:	f7f7 ffa5 	bl	8000540 <__aeabi_dmul>
 80085f6:	a376      	add	r3, pc, #472	; (adr r3, 80087d0 <__ieee754_pow+0x720>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f7 fdea 	bl	80001d4 <__adddf3>
 8008600:	4622      	mov	r2, r4
 8008602:	462b      	mov	r3, r5
 8008604:	f7f7 ff9c 	bl	8000540 <__aeabi_dmul>
 8008608:	a373      	add	r3, pc, #460	; (adr r3, 80087d8 <__ieee754_pow+0x728>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	f7f7 fde1 	bl	80001d4 <__adddf3>
 8008612:	4622      	mov	r2, r4
 8008614:	462b      	mov	r3, r5
 8008616:	f7f7 ff93 	bl	8000540 <__aeabi_dmul>
 800861a:	a371      	add	r3, pc, #452	; (adr r3, 80087e0 <__ieee754_pow+0x730>)
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f7f7 fdd8 	bl	80001d4 <__adddf3>
 8008624:	4622      	mov	r2, r4
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	462b      	mov	r3, r5
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f7 ff86 	bl	8000540 <__aeabi_dmul>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	f7f7 ff80 	bl	8000540 <__aeabi_dmul>
 8008640:	4642      	mov	r2, r8
 8008642:	4604      	mov	r4, r0
 8008644:	460d      	mov	r5, r1
 8008646:	464b      	mov	r3, r9
 8008648:	ec51 0b18 	vmov	r0, r1, d8
 800864c:	f7f7 fdc2 	bl	80001d4 <__adddf3>
 8008650:	ec53 2b19 	vmov	r2, r3, d9
 8008654:	f7f7 ff74 	bl	8000540 <__aeabi_dmul>
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	f7f7 fdba 	bl	80001d4 <__adddf3>
 8008660:	4642      	mov	r2, r8
 8008662:	4682      	mov	sl, r0
 8008664:	468b      	mov	fp, r1
 8008666:	464b      	mov	r3, r9
 8008668:	4640      	mov	r0, r8
 800866a:	4649      	mov	r1, r9
 800866c:	f7f7 ff68 	bl	8000540 <__aeabi_dmul>
 8008670:	4b6b      	ldr	r3, [pc, #428]	; (8008820 <__ieee754_pow+0x770>)
 8008672:	2200      	movs	r2, #0
 8008674:	4606      	mov	r6, r0
 8008676:	460f      	mov	r7, r1
 8008678:	f7f7 fdac 	bl	80001d4 <__adddf3>
 800867c:	4652      	mov	r2, sl
 800867e:	465b      	mov	r3, fp
 8008680:	f7f7 fda8 	bl	80001d4 <__adddf3>
 8008684:	2000      	movs	r0, #0
 8008686:	4604      	mov	r4, r0
 8008688:	460d      	mov	r5, r1
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4640      	mov	r0, r8
 8008690:	4649      	mov	r1, r9
 8008692:	f7f7 ff55 	bl	8000540 <__aeabi_dmul>
 8008696:	4b62      	ldr	r3, [pc, #392]	; (8008820 <__ieee754_pow+0x770>)
 8008698:	4680      	mov	r8, r0
 800869a:	4689      	mov	r9, r1
 800869c:	2200      	movs	r2, #0
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f7 fd95 	bl	80001d0 <__aeabi_dsub>
 80086a6:	4632      	mov	r2, r6
 80086a8:	463b      	mov	r3, r7
 80086aa:	f7f7 fd91 	bl	80001d0 <__aeabi_dsub>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4650      	mov	r0, sl
 80086b4:	4659      	mov	r1, fp
 80086b6:	f7f7 fd8b 	bl	80001d0 <__aeabi_dsub>
 80086ba:	ec53 2b18 	vmov	r2, r3, d8
 80086be:	f7f7 ff3f 	bl	8000540 <__aeabi_dmul>
 80086c2:	4622      	mov	r2, r4
 80086c4:	4606      	mov	r6, r0
 80086c6:	460f      	mov	r7, r1
 80086c8:	462b      	mov	r3, r5
 80086ca:	ec51 0b19 	vmov	r0, r1, d9
 80086ce:	f7f7 ff37 	bl	8000540 <__aeabi_dmul>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4630      	mov	r0, r6
 80086d8:	4639      	mov	r1, r7
 80086da:	f7f7 fd7b 	bl	80001d4 <__adddf3>
 80086de:	4606      	mov	r6, r0
 80086e0:	460f      	mov	r7, r1
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4640      	mov	r0, r8
 80086e8:	4649      	mov	r1, r9
 80086ea:	f7f7 fd73 	bl	80001d4 <__adddf3>
 80086ee:	a33e      	add	r3, pc, #248	; (adr r3, 80087e8 <__ieee754_pow+0x738>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	2000      	movs	r0, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	460d      	mov	r5, r1
 80086fa:	f7f7 ff21 	bl	8000540 <__aeabi_dmul>
 80086fe:	4642      	mov	r2, r8
 8008700:	ec41 0b18 	vmov	d8, r0, r1
 8008704:	464b      	mov	r3, r9
 8008706:	4620      	mov	r0, r4
 8008708:	4629      	mov	r1, r5
 800870a:	f7f7 fd61 	bl	80001d0 <__aeabi_dsub>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4630      	mov	r0, r6
 8008714:	4639      	mov	r1, r7
 8008716:	f7f7 fd5b 	bl	80001d0 <__aeabi_dsub>
 800871a:	a335      	add	r3, pc, #212	; (adr r3, 80087f0 <__ieee754_pow+0x740>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 ff0e 	bl	8000540 <__aeabi_dmul>
 8008724:	a334      	add	r3, pc, #208	; (adr r3, 80087f8 <__ieee754_pow+0x748>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	4606      	mov	r6, r0
 800872c:	460f      	mov	r7, r1
 800872e:	4620      	mov	r0, r4
 8008730:	4629      	mov	r1, r5
 8008732:	f7f7 ff05 	bl	8000540 <__aeabi_dmul>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4630      	mov	r0, r6
 800873c:	4639      	mov	r1, r7
 800873e:	f7f7 fd49 	bl	80001d4 <__adddf3>
 8008742:	9a07      	ldr	r2, [sp, #28]
 8008744:	4b37      	ldr	r3, [pc, #220]	; (8008824 <__ieee754_pow+0x774>)
 8008746:	4413      	add	r3, r2
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f7f7 fd42 	bl	80001d4 <__adddf3>
 8008750:	4682      	mov	sl, r0
 8008752:	9805      	ldr	r0, [sp, #20]
 8008754:	468b      	mov	fp, r1
 8008756:	f7f7 fe89 	bl	800046c <__aeabi_i2d>
 800875a:	9a07      	ldr	r2, [sp, #28]
 800875c:	4b32      	ldr	r3, [pc, #200]	; (8008828 <__ieee754_pow+0x778>)
 800875e:	4413      	add	r3, r2
 8008760:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008764:	4606      	mov	r6, r0
 8008766:	460f      	mov	r7, r1
 8008768:	4652      	mov	r2, sl
 800876a:	465b      	mov	r3, fp
 800876c:	ec51 0b18 	vmov	r0, r1, d8
 8008770:	f7f7 fd30 	bl	80001d4 <__adddf3>
 8008774:	4642      	mov	r2, r8
 8008776:	464b      	mov	r3, r9
 8008778:	f7f7 fd2c 	bl	80001d4 <__adddf3>
 800877c:	4632      	mov	r2, r6
 800877e:	463b      	mov	r3, r7
 8008780:	f7f7 fd28 	bl	80001d4 <__adddf3>
 8008784:	2000      	movs	r0, #0
 8008786:	4632      	mov	r2, r6
 8008788:	463b      	mov	r3, r7
 800878a:	4604      	mov	r4, r0
 800878c:	460d      	mov	r5, r1
 800878e:	f7f7 fd1f 	bl	80001d0 <__aeabi_dsub>
 8008792:	4642      	mov	r2, r8
 8008794:	464b      	mov	r3, r9
 8008796:	f7f7 fd1b 	bl	80001d0 <__aeabi_dsub>
 800879a:	ec53 2b18 	vmov	r2, r3, d8
 800879e:	f7f7 fd17 	bl	80001d0 <__aeabi_dsub>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4650      	mov	r0, sl
 80087a8:	4659      	mov	r1, fp
 80087aa:	e610      	b.n	80083ce <__ieee754_pow+0x31e>
 80087ac:	2401      	movs	r4, #1
 80087ae:	e6a1      	b.n	80084f4 <__ieee754_pow+0x444>
 80087b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008800 <__ieee754_pow+0x750>
 80087b4:	e617      	b.n	80083e6 <__ieee754_pow+0x336>
 80087b6:	bf00      	nop
 80087b8:	4a454eef 	.word	0x4a454eef
 80087bc:	3fca7e28 	.word	0x3fca7e28
 80087c0:	93c9db65 	.word	0x93c9db65
 80087c4:	3fcd864a 	.word	0x3fcd864a
 80087c8:	a91d4101 	.word	0xa91d4101
 80087cc:	3fd17460 	.word	0x3fd17460
 80087d0:	518f264d 	.word	0x518f264d
 80087d4:	3fd55555 	.word	0x3fd55555
 80087d8:	db6fabff 	.word	0xdb6fabff
 80087dc:	3fdb6db6 	.word	0x3fdb6db6
 80087e0:	33333303 	.word	0x33333303
 80087e4:	3fe33333 	.word	0x3fe33333
 80087e8:	e0000000 	.word	0xe0000000
 80087ec:	3feec709 	.word	0x3feec709
 80087f0:	dc3a03fd 	.word	0xdc3a03fd
 80087f4:	3feec709 	.word	0x3feec709
 80087f8:	145b01f5 	.word	0x145b01f5
 80087fc:	be3e2fe0 	.word	0xbe3e2fe0
 8008800:	00000000 	.word	0x00000000
 8008804:	3ff00000 	.word	0x3ff00000
 8008808:	7ff00000 	.word	0x7ff00000
 800880c:	43400000 	.word	0x43400000
 8008810:	0003988e 	.word	0x0003988e
 8008814:	000bb679 	.word	0x000bb679
 8008818:	08009d38 	.word	0x08009d38
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	40080000 	.word	0x40080000
 8008824:	08009d58 	.word	0x08009d58
 8008828:	08009d48 	.word	0x08009d48
 800882c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008b04 <__ieee754_pow+0xa54>)
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	4640      	mov	r0, r8
 8008834:	4649      	mov	r1, r9
 8008836:	f7f7 fccd 	bl	80001d4 <__adddf3>
 800883a:	4622      	mov	r2, r4
 800883c:	ec41 0b1a 	vmov	d10, r0, r1
 8008840:	462b      	mov	r3, r5
 8008842:	4630      	mov	r0, r6
 8008844:	4639      	mov	r1, r7
 8008846:	f7f7 fcc3 	bl	80001d0 <__aeabi_dsub>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	ec51 0b1a 	vmov	r0, r1, d10
 8008852:	f7f8 f905 	bl	8000a60 <__aeabi_dcmpgt>
 8008856:	2800      	cmp	r0, #0
 8008858:	f47f ae04 	bne.w	8008464 <__ieee754_pow+0x3b4>
 800885c:	4aa4      	ldr	r2, [pc, #656]	; (8008af0 <__ieee754_pow+0xa40>)
 800885e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008862:	4293      	cmp	r3, r2
 8008864:	f340 8108 	ble.w	8008a78 <__ieee754_pow+0x9c8>
 8008868:	151b      	asrs	r3, r3, #20
 800886a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800886e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008872:	fa4a f303 	asr.w	r3, sl, r3
 8008876:	445b      	add	r3, fp
 8008878:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800887c:	4e9d      	ldr	r6, [pc, #628]	; (8008af4 <__ieee754_pow+0xa44>)
 800887e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008882:	4116      	asrs	r6, r2
 8008884:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008888:	2000      	movs	r0, #0
 800888a:	ea23 0106 	bic.w	r1, r3, r6
 800888e:	f1c2 0214 	rsb	r2, r2, #20
 8008892:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008896:	fa4a fa02 	asr.w	sl, sl, r2
 800889a:	f1bb 0f00 	cmp.w	fp, #0
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4620      	mov	r0, r4
 80088a4:	4629      	mov	r1, r5
 80088a6:	bfb8      	it	lt
 80088a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80088ac:	f7f7 fc90 	bl	80001d0 <__aeabi_dsub>
 80088b0:	ec41 0b19 	vmov	d9, r0, r1
 80088b4:	4642      	mov	r2, r8
 80088b6:	464b      	mov	r3, r9
 80088b8:	ec51 0b19 	vmov	r0, r1, d9
 80088bc:	f7f7 fc8a 	bl	80001d4 <__adddf3>
 80088c0:	a37b      	add	r3, pc, #492	; (adr r3, 8008ab0 <__ieee754_pow+0xa00>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	2000      	movs	r0, #0
 80088c8:	4604      	mov	r4, r0
 80088ca:	460d      	mov	r5, r1
 80088cc:	f7f7 fe38 	bl	8000540 <__aeabi_dmul>
 80088d0:	ec53 2b19 	vmov	r2, r3, d9
 80088d4:	4606      	mov	r6, r0
 80088d6:	460f      	mov	r7, r1
 80088d8:	4620      	mov	r0, r4
 80088da:	4629      	mov	r1, r5
 80088dc:	f7f7 fc78 	bl	80001d0 <__aeabi_dsub>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4640      	mov	r0, r8
 80088e6:	4649      	mov	r1, r9
 80088e8:	f7f7 fc72 	bl	80001d0 <__aeabi_dsub>
 80088ec:	a372      	add	r3, pc, #456	; (adr r3, 8008ab8 <__ieee754_pow+0xa08>)
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f7f7 fe25 	bl	8000540 <__aeabi_dmul>
 80088f6:	a372      	add	r3, pc, #456	; (adr r3, 8008ac0 <__ieee754_pow+0xa10>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	4680      	mov	r8, r0
 80088fe:	4689      	mov	r9, r1
 8008900:	4620      	mov	r0, r4
 8008902:	4629      	mov	r1, r5
 8008904:	f7f7 fe1c 	bl	8000540 <__aeabi_dmul>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4640      	mov	r0, r8
 800890e:	4649      	mov	r1, r9
 8008910:	f7f7 fc60 	bl	80001d4 <__adddf3>
 8008914:	4604      	mov	r4, r0
 8008916:	460d      	mov	r5, r1
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4630      	mov	r0, r6
 800891e:	4639      	mov	r1, r7
 8008920:	f7f7 fc58 	bl	80001d4 <__adddf3>
 8008924:	4632      	mov	r2, r6
 8008926:	463b      	mov	r3, r7
 8008928:	4680      	mov	r8, r0
 800892a:	4689      	mov	r9, r1
 800892c:	f7f7 fc50 	bl	80001d0 <__aeabi_dsub>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4620      	mov	r0, r4
 8008936:	4629      	mov	r1, r5
 8008938:	f7f7 fc4a 	bl	80001d0 <__aeabi_dsub>
 800893c:	4642      	mov	r2, r8
 800893e:	4606      	mov	r6, r0
 8008940:	460f      	mov	r7, r1
 8008942:	464b      	mov	r3, r9
 8008944:	4640      	mov	r0, r8
 8008946:	4649      	mov	r1, r9
 8008948:	f7f7 fdfa 	bl	8000540 <__aeabi_dmul>
 800894c:	a35e      	add	r3, pc, #376	; (adr r3, 8008ac8 <__ieee754_pow+0xa18>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	4604      	mov	r4, r0
 8008954:	460d      	mov	r5, r1
 8008956:	f7f7 fdf3 	bl	8000540 <__aeabi_dmul>
 800895a:	a35d      	add	r3, pc, #372	; (adr r3, 8008ad0 <__ieee754_pow+0xa20>)
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	f7f7 fc36 	bl	80001d0 <__aeabi_dsub>
 8008964:	4622      	mov	r2, r4
 8008966:	462b      	mov	r3, r5
 8008968:	f7f7 fdea 	bl	8000540 <__aeabi_dmul>
 800896c:	a35a      	add	r3, pc, #360	; (adr r3, 8008ad8 <__ieee754_pow+0xa28>)
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f7f7 fc2f 	bl	80001d4 <__adddf3>
 8008976:	4622      	mov	r2, r4
 8008978:	462b      	mov	r3, r5
 800897a:	f7f7 fde1 	bl	8000540 <__aeabi_dmul>
 800897e:	a358      	add	r3, pc, #352	; (adr r3, 8008ae0 <__ieee754_pow+0xa30>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f7f7 fc24 	bl	80001d0 <__aeabi_dsub>
 8008988:	4622      	mov	r2, r4
 800898a:	462b      	mov	r3, r5
 800898c:	f7f7 fdd8 	bl	8000540 <__aeabi_dmul>
 8008990:	a355      	add	r3, pc, #340	; (adr r3, 8008ae8 <__ieee754_pow+0xa38>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 fc1d 	bl	80001d4 <__adddf3>
 800899a:	4622      	mov	r2, r4
 800899c:	462b      	mov	r3, r5
 800899e:	f7f7 fdcf 	bl	8000540 <__aeabi_dmul>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	4640      	mov	r0, r8
 80089a8:	4649      	mov	r1, r9
 80089aa:	f7f7 fc11 	bl	80001d0 <__aeabi_dsub>
 80089ae:	4604      	mov	r4, r0
 80089b0:	460d      	mov	r5, r1
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4640      	mov	r0, r8
 80089b8:	4649      	mov	r1, r9
 80089ba:	f7f7 fdc1 	bl	8000540 <__aeabi_dmul>
 80089be:	2200      	movs	r2, #0
 80089c0:	ec41 0b19 	vmov	d9, r0, r1
 80089c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089c8:	4620      	mov	r0, r4
 80089ca:	4629      	mov	r1, r5
 80089cc:	f7f7 fc00 	bl	80001d0 <__aeabi_dsub>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	ec51 0b19 	vmov	r0, r1, d9
 80089d8:	f7f7 fedc 	bl	8000794 <__aeabi_ddiv>
 80089dc:	4632      	mov	r2, r6
 80089de:	4604      	mov	r4, r0
 80089e0:	460d      	mov	r5, r1
 80089e2:	463b      	mov	r3, r7
 80089e4:	4640      	mov	r0, r8
 80089e6:	4649      	mov	r1, r9
 80089e8:	f7f7 fdaa 	bl	8000540 <__aeabi_dmul>
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	f7f7 fbf0 	bl	80001d4 <__adddf3>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7f7 fbe8 	bl	80001d0 <__aeabi_dsub>
 8008a00:	4642      	mov	r2, r8
 8008a02:	464b      	mov	r3, r9
 8008a04:	f7f7 fbe4 	bl	80001d0 <__aeabi_dsub>
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	493a      	ldr	r1, [pc, #232]	; (8008af8 <__ieee754_pow+0xa48>)
 8008a0e:	2000      	movs	r0, #0
 8008a10:	f7f7 fbde 	bl	80001d0 <__aeabi_dsub>
 8008a14:	ec41 0b10 	vmov	d0, r0, r1
 8008a18:	ee10 3a90 	vmov	r3, s1
 8008a1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a24:	da2b      	bge.n	8008a7e <__ieee754_pow+0x9ce>
 8008a26:	4650      	mov	r0, sl
 8008a28:	f000 f966 	bl	8008cf8 <scalbn>
 8008a2c:	ec51 0b10 	vmov	r0, r1, d0
 8008a30:	ec53 2b18 	vmov	r2, r3, d8
 8008a34:	f7ff bbed 	b.w	8008212 <__ieee754_pow+0x162>
 8008a38:	4b30      	ldr	r3, [pc, #192]	; (8008afc <__ieee754_pow+0xa4c>)
 8008a3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008a3e:	429e      	cmp	r6, r3
 8008a40:	f77f af0c 	ble.w	800885c <__ieee754_pow+0x7ac>
 8008a44:	4b2e      	ldr	r3, [pc, #184]	; (8008b00 <__ieee754_pow+0xa50>)
 8008a46:	440b      	add	r3, r1
 8008a48:	4303      	orrs	r3, r0
 8008a4a:	d009      	beq.n	8008a60 <__ieee754_pow+0x9b0>
 8008a4c:	ec51 0b18 	vmov	r0, r1, d8
 8008a50:	2200      	movs	r2, #0
 8008a52:	2300      	movs	r3, #0
 8008a54:	f7f7 ffe6 	bl	8000a24 <__aeabi_dcmplt>
 8008a58:	3800      	subs	r0, #0
 8008a5a:	bf18      	it	ne
 8008a5c:	2001      	movne	r0, #1
 8008a5e:	e447      	b.n	80082f0 <__ieee754_pow+0x240>
 8008a60:	4622      	mov	r2, r4
 8008a62:	462b      	mov	r3, r5
 8008a64:	f7f7 fbb4 	bl	80001d0 <__aeabi_dsub>
 8008a68:	4642      	mov	r2, r8
 8008a6a:	464b      	mov	r3, r9
 8008a6c:	f7f7 ffee 	bl	8000a4c <__aeabi_dcmpge>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f43f aef3 	beq.w	800885c <__ieee754_pow+0x7ac>
 8008a76:	e7e9      	b.n	8008a4c <__ieee754_pow+0x99c>
 8008a78:	f04f 0a00 	mov.w	sl, #0
 8008a7c:	e71a      	b.n	80088b4 <__ieee754_pow+0x804>
 8008a7e:	ec51 0b10 	vmov	r0, r1, d0
 8008a82:	4619      	mov	r1, r3
 8008a84:	e7d4      	b.n	8008a30 <__ieee754_pow+0x980>
 8008a86:	491c      	ldr	r1, [pc, #112]	; (8008af8 <__ieee754_pow+0xa48>)
 8008a88:	2000      	movs	r0, #0
 8008a8a:	f7ff bb30 	b.w	80080ee <__ieee754_pow+0x3e>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	f7ff bb2c 	b.w	80080ee <__ieee754_pow+0x3e>
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7ff bb28 	b.w	80080ee <__ieee754_pow+0x3e>
 8008a9e:	9204      	str	r2, [sp, #16]
 8008aa0:	f7ff bb7a 	b.w	8008198 <__ieee754_pow+0xe8>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f7ff bb64 	b.w	8008172 <__ieee754_pow+0xc2>
 8008aaa:	bf00      	nop
 8008aac:	f3af 8000 	nop.w
 8008ab0:	00000000 	.word	0x00000000
 8008ab4:	3fe62e43 	.word	0x3fe62e43
 8008ab8:	fefa39ef 	.word	0xfefa39ef
 8008abc:	3fe62e42 	.word	0x3fe62e42
 8008ac0:	0ca86c39 	.word	0x0ca86c39
 8008ac4:	be205c61 	.word	0xbe205c61
 8008ac8:	72bea4d0 	.word	0x72bea4d0
 8008acc:	3e663769 	.word	0x3e663769
 8008ad0:	c5d26bf1 	.word	0xc5d26bf1
 8008ad4:	3ebbbd41 	.word	0x3ebbbd41
 8008ad8:	af25de2c 	.word	0xaf25de2c
 8008adc:	3f11566a 	.word	0x3f11566a
 8008ae0:	16bebd93 	.word	0x16bebd93
 8008ae4:	3f66c16c 	.word	0x3f66c16c
 8008ae8:	5555553e 	.word	0x5555553e
 8008aec:	3fc55555 	.word	0x3fc55555
 8008af0:	3fe00000 	.word	0x3fe00000
 8008af4:	000fffff 	.word	0x000fffff
 8008af8:	3ff00000 	.word	0x3ff00000
 8008afc:	4090cbff 	.word	0x4090cbff
 8008b00:	3f6f3400 	.word	0x3f6f3400
 8008b04:	652b82fe 	.word	0x652b82fe
 8008b08:	3c971547 	.word	0x3c971547

08008b0c <__ieee754_sqrt>:
 8008b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b10:	ec55 4b10 	vmov	r4, r5, d0
 8008b14:	4e55      	ldr	r6, [pc, #340]	; (8008c6c <__ieee754_sqrt+0x160>)
 8008b16:	43ae      	bics	r6, r5
 8008b18:	ee10 0a10 	vmov	r0, s0
 8008b1c:	ee10 3a10 	vmov	r3, s0
 8008b20:	462a      	mov	r2, r5
 8008b22:	4629      	mov	r1, r5
 8008b24:	d110      	bne.n	8008b48 <__ieee754_sqrt+0x3c>
 8008b26:	ee10 2a10 	vmov	r2, s0
 8008b2a:	462b      	mov	r3, r5
 8008b2c:	f7f7 fd08 	bl	8000540 <__aeabi_dmul>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4620      	mov	r0, r4
 8008b36:	4629      	mov	r1, r5
 8008b38:	f7f7 fb4c 	bl	80001d4 <__adddf3>
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	460d      	mov	r5, r1
 8008b40:	ec45 4b10 	vmov	d0, r4, r5
 8008b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	dc10      	bgt.n	8008b6e <__ieee754_sqrt+0x62>
 8008b4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008b50:	4330      	orrs	r0, r6
 8008b52:	d0f5      	beq.n	8008b40 <__ieee754_sqrt+0x34>
 8008b54:	b15d      	cbz	r5, 8008b6e <__ieee754_sqrt+0x62>
 8008b56:	ee10 2a10 	vmov	r2, s0
 8008b5a:	462b      	mov	r3, r5
 8008b5c:	ee10 0a10 	vmov	r0, s0
 8008b60:	f7f7 fb36 	bl	80001d0 <__aeabi_dsub>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	f7f7 fe14 	bl	8000794 <__aeabi_ddiv>
 8008b6c:	e7e6      	b.n	8008b3c <__ieee754_sqrt+0x30>
 8008b6e:	1512      	asrs	r2, r2, #20
 8008b70:	d074      	beq.n	8008c5c <__ieee754_sqrt+0x150>
 8008b72:	07d4      	lsls	r4, r2, #31
 8008b74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008b78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008b7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008b80:	bf5e      	ittt	pl
 8008b82:	0fda      	lsrpl	r2, r3, #31
 8008b84:	005b      	lslpl	r3, r3, #1
 8008b86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008b8a:	2400      	movs	r4, #0
 8008b8c:	0fda      	lsrs	r2, r3, #31
 8008b8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008b92:	107f      	asrs	r7, r7, #1
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	2516      	movs	r5, #22
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008b9e:	1886      	adds	r6, r0, r2
 8008ba0:	428e      	cmp	r6, r1
 8008ba2:	bfde      	ittt	le
 8008ba4:	1b89      	suble	r1, r1, r6
 8008ba6:	18b0      	addle	r0, r6, r2
 8008ba8:	18a4      	addle	r4, r4, r2
 8008baa:	0049      	lsls	r1, r1, #1
 8008bac:	3d01      	subs	r5, #1
 8008bae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008bb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008bb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008bba:	d1f0      	bne.n	8008b9e <__ieee754_sqrt+0x92>
 8008bbc:	462a      	mov	r2, r5
 8008bbe:	f04f 0e20 	mov.w	lr, #32
 8008bc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008bc6:	4281      	cmp	r1, r0
 8008bc8:	eb06 0c05 	add.w	ip, r6, r5
 8008bcc:	dc02      	bgt.n	8008bd4 <__ieee754_sqrt+0xc8>
 8008bce:	d113      	bne.n	8008bf8 <__ieee754_sqrt+0xec>
 8008bd0:	459c      	cmp	ip, r3
 8008bd2:	d811      	bhi.n	8008bf8 <__ieee754_sqrt+0xec>
 8008bd4:	f1bc 0f00 	cmp.w	ip, #0
 8008bd8:	eb0c 0506 	add.w	r5, ip, r6
 8008bdc:	da43      	bge.n	8008c66 <__ieee754_sqrt+0x15a>
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	db41      	blt.n	8008c66 <__ieee754_sqrt+0x15a>
 8008be2:	f100 0801 	add.w	r8, r0, #1
 8008be6:	1a09      	subs	r1, r1, r0
 8008be8:	459c      	cmp	ip, r3
 8008bea:	bf88      	it	hi
 8008bec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008bf0:	eba3 030c 	sub.w	r3, r3, ip
 8008bf4:	4432      	add	r2, r6
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008bfc:	f1be 0e01 	subs.w	lr, lr, #1
 8008c00:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008c0c:	d1db      	bne.n	8008bc6 <__ieee754_sqrt+0xba>
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	d006      	beq.n	8008c20 <__ieee754_sqrt+0x114>
 8008c12:	1c50      	adds	r0, r2, #1
 8008c14:	bf13      	iteet	ne
 8008c16:	3201      	addne	r2, #1
 8008c18:	3401      	addeq	r4, #1
 8008c1a:	4672      	moveq	r2, lr
 8008c1c:	f022 0201 	bicne.w	r2, r2, #1
 8008c20:	1063      	asrs	r3, r4, #1
 8008c22:	0852      	lsrs	r2, r2, #1
 8008c24:	07e1      	lsls	r1, r4, #31
 8008c26:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008c2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008c2e:	bf48      	it	mi
 8008c30:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008c34:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008c38:	4614      	mov	r4, r2
 8008c3a:	e781      	b.n	8008b40 <__ieee754_sqrt+0x34>
 8008c3c:	0ad9      	lsrs	r1, r3, #11
 8008c3e:	3815      	subs	r0, #21
 8008c40:	055b      	lsls	r3, r3, #21
 8008c42:	2900      	cmp	r1, #0
 8008c44:	d0fa      	beq.n	8008c3c <__ieee754_sqrt+0x130>
 8008c46:	02cd      	lsls	r5, r1, #11
 8008c48:	d50a      	bpl.n	8008c60 <__ieee754_sqrt+0x154>
 8008c4a:	f1c2 0420 	rsb	r4, r2, #32
 8008c4e:	fa23 f404 	lsr.w	r4, r3, r4
 8008c52:	1e55      	subs	r5, r2, #1
 8008c54:	4093      	lsls	r3, r2
 8008c56:	4321      	orrs	r1, r4
 8008c58:	1b42      	subs	r2, r0, r5
 8008c5a:	e78a      	b.n	8008b72 <__ieee754_sqrt+0x66>
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	e7f0      	b.n	8008c42 <__ieee754_sqrt+0x136>
 8008c60:	0049      	lsls	r1, r1, #1
 8008c62:	3201      	adds	r2, #1
 8008c64:	e7ef      	b.n	8008c46 <__ieee754_sqrt+0x13a>
 8008c66:	4680      	mov	r8, r0
 8008c68:	e7bd      	b.n	8008be6 <__ieee754_sqrt+0xda>
 8008c6a:	bf00      	nop
 8008c6c:	7ff00000 	.word	0x7ff00000

08008c70 <with_errno>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	460d      	mov	r5, r1
 8008c76:	4616      	mov	r6, r2
 8008c78:	f7ff f94a 	bl	8007f10 <__errno>
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	6006      	str	r6, [r0, #0]
 8008c80:	4620      	mov	r0, r4
 8008c82:	bd70      	pop	{r4, r5, r6, pc}

08008c84 <xflow>:
 8008c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c86:	4614      	mov	r4, r2
 8008c88:	461d      	mov	r5, r3
 8008c8a:	b108      	cbz	r0, 8008c90 <xflow+0xc>
 8008c8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c90:	e9cd 2300 	strd	r2, r3, [sp]
 8008c94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c98:	4620      	mov	r0, r4
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	f7f7 fc50 	bl	8000540 <__aeabi_dmul>
 8008ca0:	2222      	movs	r2, #34	; 0x22
 8008ca2:	b003      	add	sp, #12
 8008ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ca8:	f7ff bfe2 	b.w	8008c70 <with_errno>

08008cac <__math_uflow>:
 8008cac:	b508      	push	{r3, lr}
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cb4:	f7ff ffe6 	bl	8008c84 <xflow>
 8008cb8:	ec41 0b10 	vmov	d0, r0, r1
 8008cbc:	bd08      	pop	{r3, pc}

08008cbe <__math_oflow>:
 8008cbe:	b508      	push	{r3, lr}
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008cc6:	f7ff ffdd 	bl	8008c84 <xflow>
 8008cca:	ec41 0b10 	vmov	d0, r0, r1
 8008cce:	bd08      	pop	{r3, pc}

08008cd0 <fabs>:
 8008cd0:	ec51 0b10 	vmov	r0, r1, d0
 8008cd4:	ee10 2a10 	vmov	r2, s0
 8008cd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008cdc:	ec43 2b10 	vmov	d0, r2, r3
 8008ce0:	4770      	bx	lr

08008ce2 <finite>:
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	ed8d 0b00 	vstr	d0, [sp]
 8008ce8:	9801      	ldr	r0, [sp, #4]
 8008cea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008cee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008cf2:	0fc0      	lsrs	r0, r0, #31
 8008cf4:	b002      	add	sp, #8
 8008cf6:	4770      	bx	lr

08008cf8 <scalbn>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	ec55 4b10 	vmov	r4, r5, d0
 8008cfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008d02:	4606      	mov	r6, r0
 8008d04:	462b      	mov	r3, r5
 8008d06:	b99a      	cbnz	r2, 8008d30 <scalbn+0x38>
 8008d08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008d0c:	4323      	orrs	r3, r4
 8008d0e:	d036      	beq.n	8008d7e <scalbn+0x86>
 8008d10:	4b39      	ldr	r3, [pc, #228]	; (8008df8 <scalbn+0x100>)
 8008d12:	4629      	mov	r1, r5
 8008d14:	ee10 0a10 	vmov	r0, s0
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f7f7 fc11 	bl	8000540 <__aeabi_dmul>
 8008d1e:	4b37      	ldr	r3, [pc, #220]	; (8008dfc <scalbn+0x104>)
 8008d20:	429e      	cmp	r6, r3
 8008d22:	4604      	mov	r4, r0
 8008d24:	460d      	mov	r5, r1
 8008d26:	da10      	bge.n	8008d4a <scalbn+0x52>
 8008d28:	a32b      	add	r3, pc, #172	; (adr r3, 8008dd8 <scalbn+0xe0>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	e03a      	b.n	8008da6 <scalbn+0xae>
 8008d30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008d34:	428a      	cmp	r2, r1
 8008d36:	d10c      	bne.n	8008d52 <scalbn+0x5a>
 8008d38:	ee10 2a10 	vmov	r2, s0
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	4629      	mov	r1, r5
 8008d40:	f7f7 fa48 	bl	80001d4 <__adddf3>
 8008d44:	4604      	mov	r4, r0
 8008d46:	460d      	mov	r5, r1
 8008d48:	e019      	b.n	8008d7e <scalbn+0x86>
 8008d4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008d4e:	460b      	mov	r3, r1
 8008d50:	3a36      	subs	r2, #54	; 0x36
 8008d52:	4432      	add	r2, r6
 8008d54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d58:	428a      	cmp	r2, r1
 8008d5a:	dd08      	ble.n	8008d6e <scalbn+0x76>
 8008d5c:	2d00      	cmp	r5, #0
 8008d5e:	a120      	add	r1, pc, #128	; (adr r1, 8008de0 <scalbn+0xe8>)
 8008d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d64:	da1c      	bge.n	8008da0 <scalbn+0xa8>
 8008d66:	a120      	add	r1, pc, #128	; (adr r1, 8008de8 <scalbn+0xf0>)
 8008d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d6c:	e018      	b.n	8008da0 <scalbn+0xa8>
 8008d6e:	2a00      	cmp	r2, #0
 8008d70:	dd08      	ble.n	8008d84 <scalbn+0x8c>
 8008d72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d7e:	ec45 4b10 	vmov	d0, r4, r5
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008d88:	da19      	bge.n	8008dbe <scalbn+0xc6>
 8008d8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d8e:	429e      	cmp	r6, r3
 8008d90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008d94:	dd0a      	ble.n	8008dac <scalbn+0xb4>
 8008d96:	a112      	add	r1, pc, #72	; (adr r1, 8008de0 <scalbn+0xe8>)
 8008d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e2      	bne.n	8008d66 <scalbn+0x6e>
 8008da0:	a30f      	add	r3, pc, #60	; (adr r3, 8008de0 <scalbn+0xe8>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fbcb 	bl	8000540 <__aeabi_dmul>
 8008daa:	e7cb      	b.n	8008d44 <scalbn+0x4c>
 8008dac:	a10a      	add	r1, pc, #40	; (adr r1, 8008dd8 <scalbn+0xe0>)
 8008dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0b8      	beq.n	8008d28 <scalbn+0x30>
 8008db6:	a10e      	add	r1, pc, #56	; (adr r1, 8008df0 <scalbn+0xf8>)
 8008db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dbc:	e7b4      	b.n	8008d28 <scalbn+0x30>
 8008dbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008dc2:	3236      	adds	r2, #54	; 0x36
 8008dc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008dcc:	4620      	mov	r0, r4
 8008dce:	4b0c      	ldr	r3, [pc, #48]	; (8008e00 <scalbn+0x108>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	e7e8      	b.n	8008da6 <scalbn+0xae>
 8008dd4:	f3af 8000 	nop.w
 8008dd8:	c2f8f359 	.word	0xc2f8f359
 8008ddc:	01a56e1f 	.word	0x01a56e1f
 8008de0:	8800759c 	.word	0x8800759c
 8008de4:	7e37e43c 	.word	0x7e37e43c
 8008de8:	8800759c 	.word	0x8800759c
 8008dec:	fe37e43c 	.word	0xfe37e43c
 8008df0:	c2f8f359 	.word	0xc2f8f359
 8008df4:	81a56e1f 	.word	0x81a56e1f
 8008df8:	43500000 	.word	0x43500000
 8008dfc:	ffff3cb0 	.word	0xffff3cb0
 8008e00:	3c900000 	.word	0x3c900000

08008e04 <_init>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr

08008e10 <_fini>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr
