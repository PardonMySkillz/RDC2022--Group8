
ARC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f44  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cd8  08008cd8  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ce0  08008ce0  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ce4  08008ce4  00018ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08008ce8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          00005940  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200059f8  200059f8  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000197fb  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003887  00000000  00000000  000398e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003d170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001468  00000000  00000000  0003e728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ab3  00000000  00000000  0003fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b04d  00000000  00000000  00062643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb2a4  00000000  00000000  0007d690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148934  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c88  00000000  00000000  00148984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d7c 	.word	0x08007d7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	08007d7c 	.word	0x08007d7c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b974 	b.w	80008e0 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9d08      	ldr	r5, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	468e      	mov	lr, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14d      	bne.n	80006ba <__udivmoddi4+0xaa>
 800061e:	428a      	cmp	r2, r1
 8000620:	4694      	mov	ip, r2
 8000622:	d969      	bls.n	80006f8 <__udivmoddi4+0xe8>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b152      	cbz	r2, 8000640 <__udivmoddi4+0x30>
 800062a:	fa01 f302 	lsl.w	r3, r1, r2
 800062e:	f1c2 0120 	rsb	r1, r2, #32
 8000632:	fa20 f101 	lsr.w	r1, r0, r1
 8000636:	fa0c fc02 	lsl.w	ip, ip, r2
 800063a:	ea41 0e03 	orr.w	lr, r1, r3
 800063e:	4094      	lsls	r4, r2
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	0c21      	lsrs	r1, r4, #16
 8000646:	fbbe f6f8 	udiv	r6, lr, r8
 800064a:	fa1f f78c 	uxth.w	r7, ip
 800064e:	fb08 e316 	mls	r3, r8, r6, lr
 8000652:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000656:	fb06 f107 	mul.w	r1, r6, r7
 800065a:	4299      	cmp	r1, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x64>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f106 30ff 	add.w	r0, r6, #4294967295
 8000666:	f080 811f 	bcs.w	80008a8 <__udivmoddi4+0x298>
 800066a:	4299      	cmp	r1, r3
 800066c:	f240 811c 	bls.w	80008a8 <__udivmoddi4+0x298>
 8000670:	3e02      	subs	r6, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f0f8 	udiv	r0, r3, r8
 800067c:	fb08 3310 	mls	r3, r8, r0, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb00 f707 	mul.w	r7, r0, r7
 8000688:	42a7      	cmp	r7, r4
 800068a:	d90a      	bls.n	80006a2 <__udivmoddi4+0x92>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f100 33ff 	add.w	r3, r0, #4294967295
 8000694:	f080 810a 	bcs.w	80008ac <__udivmoddi4+0x29c>
 8000698:	42a7      	cmp	r7, r4
 800069a:	f240 8107 	bls.w	80008ac <__udivmoddi4+0x29c>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006a6:	1be4      	subs	r4, r4, r7
 80006a8:	2600      	movs	r6, #0
 80006aa:	b11d      	cbz	r5, 80006b4 <__udivmoddi4+0xa4>
 80006ac:	40d4      	lsrs	r4, r2
 80006ae:	2300      	movs	r3, #0
 80006b0:	e9c5 4300 	strd	r4, r3, [r5]
 80006b4:	4631      	mov	r1, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d909      	bls.n	80006d2 <__udivmoddi4+0xc2>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	f000 80ef 	beq.w	80008a2 <__udivmoddi4+0x292>
 80006c4:	2600      	movs	r6, #0
 80006c6:	e9c5 0100 	strd	r0, r1, [r5]
 80006ca:	4630      	mov	r0, r6
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	fab3 f683 	clz	r6, r3
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d14a      	bne.n	8000770 <__udivmoddi4+0x160>
 80006da:	428b      	cmp	r3, r1
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xd4>
 80006de:	4282      	cmp	r2, r0
 80006e0:	f200 80f9 	bhi.w	80008d6 <__udivmoddi4+0x2c6>
 80006e4:	1a84      	subs	r4, r0, r2
 80006e6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	469e      	mov	lr, r3
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d0e0      	beq.n	80006b4 <__udivmoddi4+0xa4>
 80006f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006f6:	e7dd      	b.n	80006b4 <__udivmoddi4+0xa4>
 80006f8:	b902      	cbnz	r2, 80006fc <__udivmoddi4+0xec>
 80006fa:	deff      	udf	#255	; 0xff
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	f040 8092 	bne.w	800082a <__udivmoddi4+0x21a>
 8000706:	eba1 010c 	sub.w	r1, r1, ip
 800070a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070e:	fa1f fe8c 	uxth.w	lr, ip
 8000712:	2601      	movs	r6, #1
 8000714:	0c20      	lsrs	r0, r4, #16
 8000716:	fbb1 f3f7 	udiv	r3, r1, r7
 800071a:	fb07 1113 	mls	r1, r7, r3, r1
 800071e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000722:	fb0e f003 	mul.w	r0, lr, r3
 8000726:	4288      	cmp	r0, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0x12c>
 800072a:	eb1c 0101 	adds.w	r1, ip, r1
 800072e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x12a>
 8000734:	4288      	cmp	r0, r1
 8000736:	f200 80cb 	bhi.w	80008d0 <__udivmoddi4+0x2c0>
 800073a:	4643      	mov	r3, r8
 800073c:	1a09      	subs	r1, r1, r0
 800073e:	b2a4      	uxth	r4, r4
 8000740:	fbb1 f0f7 	udiv	r0, r1, r7
 8000744:	fb07 1110 	mls	r1, r7, r0, r1
 8000748:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800074c:	fb0e fe00 	mul.w	lr, lr, r0
 8000750:	45a6      	cmp	lr, r4
 8000752:	d908      	bls.n	8000766 <__udivmoddi4+0x156>
 8000754:	eb1c 0404 	adds.w	r4, ip, r4
 8000758:	f100 31ff 	add.w	r1, r0, #4294967295
 800075c:	d202      	bcs.n	8000764 <__udivmoddi4+0x154>
 800075e:	45a6      	cmp	lr, r4
 8000760:	f200 80bb 	bhi.w	80008da <__udivmoddi4+0x2ca>
 8000764:	4608      	mov	r0, r1
 8000766:	eba4 040e 	sub.w	r4, r4, lr
 800076a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800076e:	e79c      	b.n	80006aa <__udivmoddi4+0x9a>
 8000770:	f1c6 0720 	rsb	r7, r6, #32
 8000774:	40b3      	lsls	r3, r6
 8000776:	fa22 fc07 	lsr.w	ip, r2, r7
 800077a:	ea4c 0c03 	orr.w	ip, ip, r3
 800077e:	fa20 f407 	lsr.w	r4, r0, r7
 8000782:	fa01 f306 	lsl.w	r3, r1, r6
 8000786:	431c      	orrs	r4, r3
 8000788:	40f9      	lsrs	r1, r7
 800078a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800078e:	fa00 f306 	lsl.w	r3, r0, r6
 8000792:	fbb1 f8f9 	udiv	r8, r1, r9
 8000796:	0c20      	lsrs	r0, r4, #16
 8000798:	fa1f fe8c 	uxth.w	lr, ip
 800079c:	fb09 1118 	mls	r1, r9, r8, r1
 80007a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a4:	fb08 f00e 	mul.w	r0, r8, lr
 80007a8:	4288      	cmp	r0, r1
 80007aa:	fa02 f206 	lsl.w	r2, r2, r6
 80007ae:	d90b      	bls.n	80007c8 <__udivmoddi4+0x1b8>
 80007b0:	eb1c 0101 	adds.w	r1, ip, r1
 80007b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007b8:	f080 8088 	bcs.w	80008cc <__udivmoddi4+0x2bc>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f240 8085 	bls.w	80008cc <__udivmoddi4+0x2bc>
 80007c2:	f1a8 0802 	sub.w	r8, r8, #2
 80007c6:	4461      	add	r1, ip
 80007c8:	1a09      	subs	r1, r1, r0
 80007ca:	b2a4      	uxth	r4, r4
 80007cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d0:	fb09 1110 	mls	r1, r9, r0, r1
 80007d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007dc:	458e      	cmp	lr, r1
 80007de:	d908      	bls.n	80007f2 <__udivmoddi4+0x1e2>
 80007e0:	eb1c 0101 	adds.w	r1, ip, r1
 80007e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007e8:	d26c      	bcs.n	80008c4 <__udivmoddi4+0x2b4>
 80007ea:	458e      	cmp	lr, r1
 80007ec:	d96a      	bls.n	80008c4 <__udivmoddi4+0x2b4>
 80007ee:	3802      	subs	r0, #2
 80007f0:	4461      	add	r1, ip
 80007f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007f6:	fba0 9402 	umull	r9, r4, r0, r2
 80007fa:	eba1 010e 	sub.w	r1, r1, lr
 80007fe:	42a1      	cmp	r1, r4
 8000800:	46c8      	mov	r8, r9
 8000802:	46a6      	mov	lr, r4
 8000804:	d356      	bcc.n	80008b4 <__udivmoddi4+0x2a4>
 8000806:	d053      	beq.n	80008b0 <__udivmoddi4+0x2a0>
 8000808:	b15d      	cbz	r5, 8000822 <__udivmoddi4+0x212>
 800080a:	ebb3 0208 	subs.w	r2, r3, r8
 800080e:	eb61 010e 	sbc.w	r1, r1, lr
 8000812:	fa01 f707 	lsl.w	r7, r1, r7
 8000816:	fa22 f306 	lsr.w	r3, r2, r6
 800081a:	40f1      	lsrs	r1, r6
 800081c:	431f      	orrs	r7, r3
 800081e:	e9c5 7100 	strd	r7, r1, [r5]
 8000822:	2600      	movs	r6, #0
 8000824:	4631      	mov	r1, r6
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	f1c2 0320 	rsb	r3, r2, #32
 800082e:	40d8      	lsrs	r0, r3
 8000830:	fa0c fc02 	lsl.w	ip, ip, r2
 8000834:	fa21 f303 	lsr.w	r3, r1, r3
 8000838:	4091      	lsls	r1, r2
 800083a:	4301      	orrs	r1, r0
 800083c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000840:	fa1f fe8c 	uxth.w	lr, ip
 8000844:	fbb3 f0f7 	udiv	r0, r3, r7
 8000848:	fb07 3610 	mls	r6, r7, r0, r3
 800084c:	0c0b      	lsrs	r3, r1, #16
 800084e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000852:	fb00 f60e 	mul.w	r6, r0, lr
 8000856:	429e      	cmp	r6, r3
 8000858:	fa04 f402 	lsl.w	r4, r4, r2
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x260>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 38ff 	add.w	r8, r0, #4294967295
 8000866:	d22f      	bcs.n	80008c8 <__udivmoddi4+0x2b8>
 8000868:	429e      	cmp	r6, r3
 800086a:	d92d      	bls.n	80008c8 <__udivmoddi4+0x2b8>
 800086c:	3802      	subs	r0, #2
 800086e:	4463      	add	r3, ip
 8000870:	1b9b      	subs	r3, r3, r6
 8000872:	b289      	uxth	r1, r1
 8000874:	fbb3 f6f7 	udiv	r6, r3, r7
 8000878:	fb07 3316 	mls	r3, r7, r6, r3
 800087c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000880:	fb06 f30e 	mul.w	r3, r6, lr
 8000884:	428b      	cmp	r3, r1
 8000886:	d908      	bls.n	800089a <__udivmoddi4+0x28a>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000890:	d216      	bcs.n	80008c0 <__udivmoddi4+0x2b0>
 8000892:	428b      	cmp	r3, r1
 8000894:	d914      	bls.n	80008c0 <__udivmoddi4+0x2b0>
 8000896:	3e02      	subs	r6, #2
 8000898:	4461      	add	r1, ip
 800089a:	1ac9      	subs	r1, r1, r3
 800089c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a0:	e738      	b.n	8000714 <__udivmoddi4+0x104>
 80008a2:	462e      	mov	r6, r5
 80008a4:	4628      	mov	r0, r5
 80008a6:	e705      	b.n	80006b4 <__udivmoddi4+0xa4>
 80008a8:	4606      	mov	r6, r0
 80008aa:	e6e3      	b.n	8000674 <__udivmoddi4+0x64>
 80008ac:	4618      	mov	r0, r3
 80008ae:	e6f8      	b.n	80006a2 <__udivmoddi4+0x92>
 80008b0:	454b      	cmp	r3, r9
 80008b2:	d2a9      	bcs.n	8000808 <__udivmoddi4+0x1f8>
 80008b4:	ebb9 0802 	subs.w	r8, r9, r2
 80008b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008bc:	3801      	subs	r0, #1
 80008be:	e7a3      	b.n	8000808 <__udivmoddi4+0x1f8>
 80008c0:	4646      	mov	r6, r8
 80008c2:	e7ea      	b.n	800089a <__udivmoddi4+0x28a>
 80008c4:	4620      	mov	r0, r4
 80008c6:	e794      	b.n	80007f2 <__udivmoddi4+0x1e2>
 80008c8:	4640      	mov	r0, r8
 80008ca:	e7d1      	b.n	8000870 <__udivmoddi4+0x260>
 80008cc:	46d0      	mov	r8, sl
 80008ce:	e77b      	b.n	80007c8 <__udivmoddi4+0x1b8>
 80008d0:	3b02      	subs	r3, #2
 80008d2:	4461      	add	r1, ip
 80008d4:	e732      	b.n	800073c <__udivmoddi4+0x12c>
 80008d6:	4630      	mov	r0, r6
 80008d8:	e709      	b.n	80006ee <__udivmoddi4+0xde>
 80008da:	4464      	add	r4, ip
 80008dc:	3802      	subs	r0, #2
 80008de:	e742      	b.n	8000766 <__udivmoddi4+0x156>

080008e0 <__aeabi_idiv0>:
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <FIFO_GPIO_init>:
};

#define IMG_WIDTH  cam_sizes[cam_framesize].width
#define IMG_HEIGHT cam_sizes[cam_framesize].height

static void FIFO_GPIO_init(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <FIFO_GPIO_init+0xec>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <FIFO_GPIO_init+0xec>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <FIFO_GPIO_init+0xec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <FIFO_GPIO_init+0xec>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a30      	ldr	r2, [pc, #192]	; (80009d0 <FIFO_GPIO_init+0xec>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <FIFO_GPIO_init+0xec>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <FIFO_GPIO_init+0xec>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <FIFO_GPIO_init+0xec>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <FIFO_GPIO_init+0xec>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pin = OV7725_OE_PIN;
 8000946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_OE_PORT, &GPIO_InitStructure);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	4820      	ldr	r0, [pc, #128]	; (80009d4 <FIFO_GPIO_init+0xf0>)
 8000954:	f004 fa02 	bl	8004d5c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_WRST_PIN;
 8000958:	2310      	movs	r3, #16
 800095a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_WRST_PORT, &GPIO_InitStructure);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	481c      	ldr	r0, [pc, #112]	; (80009d4 <FIFO_GPIO_init+0xf0>)
 8000964:	f004 f9fa 	bl	8004d5c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_RRST_PIN;
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_RRST_PORT, &GPIO_InitStructure);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	4817      	ldr	r0, [pc, #92]	; (80009d4 <FIFO_GPIO_init+0xf0>)
 8000976:	f004 f9f1 	bl	8004d5c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_RCLK_PIN;
 800097a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800097e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_RCLK_PORT, &GPIO_InitStructure);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	4814      	ldr	r0, [pc, #80]	; (80009d8 <FIFO_GPIO_init+0xf4>)
 8000988:	f004 f9e8 	bl	8004d5c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_WE_PIN;
 800098c:	2302      	movs	r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(OV7725_WE_PORT, &GPIO_InitStructure);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	4810      	ldr	r0, [pc, #64]	; (80009d8 <FIFO_GPIO_init+0xf4>)
 8000998:	f004 f9e0 	bl	8004d5c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_D0_PIN | OV7725_D1_PIN | OV7725_D2_PIN | OV7725_D3_PIN | OV7725_D4_PIN
 800099c:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 80009a0:	60fb      	str	r3, [r7, #12]
							 | OV7725_D5_PIN | OV7725_D6_PIN | OV7725_D7_PIN;
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(OV7725_DATA_PORT, &GPIO_InitStructure);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <FIFO_GPIO_init+0xf8>)
 80009b6:	f004 f9d1 	bl	8004d5c <HAL_GPIO_Init>

	FIFO_OE_L;
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <FIFO_GPIO_init+0xf0>)
 80009bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80009c0:	619a      	str	r2, [r3, #24]
	FIFO_WE_H;
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <FIFO_GPIO_init+0xf4>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	619a      	str	r2, [r3, #24]
}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40020800 	.word	0x40020800

080009e0 <VSYNC_GPIO_init>:

static void VSYNC_GPIO_init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <VSYNC_GPIO_init+0x58>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <VSYNC_GPIO_init+0x58>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <VSYNC_GPIO_init+0x58>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Pin = OV7725_VSYNC_PIN;
 8000a02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000a08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2302      	movs	r3, #2
 8000a14:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(OV7725_VSYNC_PORT, &GPIO_InitStructure);
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4808      	ldr	r0, [pc, #32]	; (8000a3c <VSYNC_GPIO_init+0x5c>)
 8000a1c:	f004 f99e 	bl	8004d5c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(OV7725_VSYNC_EXTI_IRQ, 0, 3);
 8000a20:	2203      	movs	r2, #3
 8000a22:	2100      	movs	r1, #0
 8000a24:	2028      	movs	r0, #40	; 0x28
 8000a26:	f003 fdd0 	bl	80045ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7725_VSYNC_EXTI_IRQ);
 8000a2a:	2028      	movs	r0, #40	; 0x28
 8000a2c:	f003 fde9 	bl	8004602 <HAL_NVIC_EnableIRQ>
}
 8000a30:	bf00      	nop
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <camera_GPIO_init>:

void camera_GPIO_init(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	SCCB_GPIO_init();
 8000a44:	f002 fcfc 	bl	8003440 <SCCB_GPIO_init>
	FIFO_GPIO_init();
 8000a48:	f7ff ff4c 	bl	80008e4 <FIFO_GPIO_init>
	VSYNC_GPIO_init();
 8000a4c:	f7ff ffc8 	bl	80009e0 <VSYNC_GPIO_init>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <camera_init_internal>:

static CameraState camera_init_internal(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
	uint8_t dev_id = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	71fb      	strb	r3, [r7, #7]

	if (SCCB_send_byte(REG_COM7, COM7_REGISTER_RESET) == SCCB_FAIL) {
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	2012      	movs	r0, #18
 8000a62:	f002 fe75 	bl	8003750 <SCCB_send_byte>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d101      	bne.n	8000a70 <camera_init_internal+0x1c>
		return CAM_NOT_FOUND;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	e035      	b.n	8000adc <camera_init_internal+0x88>
	}

	if (SCCB_read_byte(REG_VER, &dev_id, 1) == SCCB_FAIL) {
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	2201      	movs	r2, #1
 8000a74:	4619      	mov	r1, r3
 8000a76:	200b      	movs	r0, #11
 8000a78:	f002 fe99 	bl	80037ae <SCCB_read_byte>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d101      	bne.n	8000a86 <camera_init_internal+0x32>
		return CAM_NOT_FOUND;
 8000a82:	2302      	movs	r3, #2
 8000a84:	e02a      	b.n	8000adc <camera_init_internal+0x88>
	}

	if (dev_id == OV7725_ID) {
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b21      	cmp	r3, #33	; 0x21
 8000a8a:	d124      	bne.n	8000ad6 <camera_init_internal+0x82>
		for (volatile uint16_t i = 0; i < INIT_REG_NUM; ++i) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	80bb      	strh	r3, [r7, #4]
 8000a90:	e01a      	b.n	8000ac8 <camera_init_internal+0x74>
			if (SCCB_send_byte(init_config[i].address, init_config[i].value) == SCCB_FAIL) {
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <camera_init_internal+0x90>)
 8000a9a:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	490f      	ldr	r1, [pc, #60]	; (8000ae4 <camera_init_internal+0x90>)
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	440b      	add	r3, r1
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	4619      	mov	r1, r3
 8000aae:	4610      	mov	r0, r2
 8000ab0:	f002 fe4e 	bl	8003750 <SCCB_send_byte>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <camera_init_internal+0x6a>
				return CAM_INIT_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <camera_init_internal+0x88>
		for (volatile uint16_t i = 0; i < INIT_REG_NUM; ++i) {
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	80bb      	strh	r3, [r7, #4]
 8000ac8:	234d      	movs	r3, #77	; 0x4d
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	88bb      	ldrh	r3, [r7, #4]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8de      	bhi.n	8000a92 <camera_init_internal+0x3e>
 8000ad4:	e001      	b.n	8000ada <camera_init_internal+0x86>
			}
		}
	} else {
		return CAM_NOT_FOUND;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e000      	b.n	8000adc <camera_init_internal+0x88>
	}
	return CAM_CONFIGURED;
 8000ada:	2303      	movs	r3, #3
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <camera_init>:

CameraState camera_init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	volatile uint8_t retry = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	71fb      	strb	r3, [r7, #7]
	while (camera_init_internal() != CAM_CONFIGURED) {
 8000af2:	e00a      	b.n	8000b0a <camera_init+0x22>
		++retry;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	71fb      	strb	r3, [r7, #7]
		if (retry > 5) {
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b05      	cmp	r3, #5
 8000b04:	d901      	bls.n	8000b0a <camera_init+0x22>
			return CAM_NOT_INITED;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e029      	b.n	8000b5e <camera_init+0x76>
	while (camera_init_internal() != CAM_CONFIGURED) {
 8000b0a:	f7ff ffa3 	bl	8000a54 <camera_init_internal>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d1ef      	bne.n	8000af4 <camera_init+0xc>
		}
	}

	cam_set_effect(CAM_FX_NORMAL);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 fa91 	bl	800103c <cam_set_effect>
	cam_set_lightmode(CAM_LIGHT_HOME);
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f000 f964 	bl	8000de8 <cam_set_lightmode>
	cam_set_saturation(0);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 fa4b 	bl	8000fbc <cam_set_saturation>
	cam_set_brightness(0);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 f9fa 	bl	8000f20 <cam_set_brightness>
	cam_set_contrast(2);
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f000 fa69 	bl	8001004 <cam_set_contrast>
	// cam_set_frameoffset((240 - 120) / 2, (320 - 160) / 2);
	// cam_set_framesize(QQVGA_120x160);
	cam_set_window(IMG_WIDTH / 2, IMG_HEIGHT / 2, cam_framesize);
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <camera_init+0x80>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <camera_init+0x84>)
 8000b3a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000b3e:	085b      	lsrs	r3, r3, #1
 8000b40:	b298      	uxth	r0, r3
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <camera_init+0x80>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <camera_init+0x84>)
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	885b      	ldrh	r3, [r3, #2]
 8000b4e:	085b      	lsrs	r3, r3, #1
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <camera_init+0x80>)
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	f000 f82c 	bl	8000bb4 <cam_set_window>

	return CAM_CONFIGURED;
 8000b5c:	2303      	movs	r3, #3
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000009b 	.word	0x2000009b
 8000b6c:	08007df0 	.word	0x08007df0

08000b70 <cam_set_state>:
void cam_set_state(CameraState state) { cam_state = state; }
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <cam_set_state+0x1c>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	7013      	strb	r3, [r2, #0]
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	200000d4 	.word	0x200000d4

08000b90 <cam_set_colormode>:

void cam_set_colormode(CamColorMode mode) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	// if (SCCB_send_byte(REG_COM7, cam_color_mode[mode]))
	// 	;
	cam_set_effect(CAM_FX_BW);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 fa4e 	bl	800103c <cam_set_effect>
	cam_colormode = mode;
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <cam_set_colormode+0x20>)
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	7013      	strb	r3, [r2, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000009a 	.word	0x2000009a

08000bb4 <cam_set_window>:
	SCCB_send_byte(REG_HREF, temp);

	SCCB_send_byte(REG_DSPAuto, 0xff);
}

void cam_set_window(uint16_t off_x, uint16_t off_y, CamFrameSize size) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	80bb      	strh	r3, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	70fb      	strb	r3, [r7, #3]
	uint8_t reg_raw, cal_temp;
	uint16_t width = cam_sizes[size].width;
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	4a53      	ldr	r2, [pc, #332]	; (8000d18 <cam_set_window+0x164>)
 8000bca:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000bce:	81fb      	strh	r3, [r7, #14]
	uint16_t height = cam_sizes[size].height;
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	4a51      	ldr	r2, [pc, #324]	; (8000d18 <cam_set_window+0x164>)
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	885b      	ldrh	r3, [r3, #2]
 8000bda:	81bb      	strh	r3, [r7, #12]

	SCCB_send_byte(REG_COM7, COM7_SELECT_QVGA | COM7_FORMAT_RGB565 | COM7_OUTPUT_RGB);
 8000bdc:	2146      	movs	r1, #70	; 0x46
 8000bde:	2012      	movs	r0, #18
 8000be0:	f002 fdb6 	bl	8003750 <SCCB_send_byte>

	SCCB_read_byte(REG_HSTART, &reg_raw, 1);
 8000be4:	f107 030a 	add.w	r3, r7, #10
 8000be8:	2201      	movs	r2, #1
 8000bea:	4619      	mov	r1, r3
 8000bec:	2017      	movs	r0, #23
 8000bee:	f002 fdde 	bl	80037ae <SCCB_read_byte>
	// MSB 8 bit stored in HSTART, LSB 2 bit stored in HREF
	cal_temp = (reg_raw + (off_x >> 2));
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	7abb      	ldrb	r3, [r7, #10]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	72fb      	strb	r3, [r7, #11]
	SCCB_send_byte(REG_HSTART, cal_temp);
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	4619      	mov	r1, r3
 8000c04:	2017      	movs	r0, #23
 8000c06:	f002 fda3 	bl	8003750 <SCCB_send_byte>

	SCCB_read_byte(REG_VSTRT, &reg_raw, 1);
 8000c0a:	f107 030a 	add.w	r3, r7, #10
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	2019      	movs	r0, #25
 8000c14:	f002 fdcb 	bl	80037ae <SCCB_read_byte>
	// MSB 8 bit stored in VSTART, LSB 1 bit stored in HREF
	cal_temp = (reg_raw + (off_y >> 1));
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	085b      	lsrs	r3, r3, #1
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	7abb      	ldrb	r3, [r7, #10]
 8000c22:	4413      	add	r3, r2
 8000c24:	72fb      	strb	r3, [r7, #11]
	SCCB_send_byte(REG_VSTRT, cal_temp);
 8000c26:	7afb      	ldrb	r3, [r7, #11]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2019      	movs	r0, #25
 8000c2c:	f002 fd90 	bl	8003750 <SCCB_send_byte>

	// horizontal sensor width, MSB 8 bit stored in HSIZE, LSB 2bit stored in HREF
	SCCB_send_byte(REG_HSIZE, width >> 2);
 8000c30:	89fb      	ldrh	r3, [r7, #14]
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2018      	movs	r0, #24
 8000c3c:	f002 fd88 	bl	8003750 <SCCB_send_byte>
	// vertical sensor height, MSB 8 bit stored in VSIZE, LSB 1 bit stored in HREF
	SCCB_send_byte(REG_VSIZE, height >> 1);
 8000c40:	89bb      	ldrh	r3, [r7, #12]
 8000c42:	085b      	lsrs	r3, r3, #1
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	201a      	movs	r0, #26
 8000c4c:	f002 fd80 	bl	8003750 <SCCB_send_byte>

	SCCB_read_byte(REG_HREF, &reg_raw, 1);
 8000c50:	f107 030a 	add.w	r3, r7, #10
 8000c54:	2201      	movs	r2, #1
 8000c56:	4619      	mov	r1, r3
 8000c58:	2032      	movs	r0, #50	; 0x32
 8000c5a:	f002 fda8 	bl	80037ae <SCCB_read_byte>
	// store width LSB, height LSB, offset x LSB, offset y LSB in HREF
	cal_temp = (reg_raw | (width & 0x03) | ((height & 0x01) << 2) | ((off_x & 0x03) << 4) | ((off_y & 0x01) << 6));
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	b25a      	sxtb	r2, r3
 8000c68:	7abb      	ldrb	r3, [r7, #10]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b25a      	sxtb	r2, r3
 8000c70:	89bb      	ldrh	r3, [r7, #12]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	b25b      	sxtb	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b25a      	sxtb	r2, r3
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	011b      	lsls	r3, r3, #4
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25a      	sxtb	r2, r3
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	019b      	lsls	r3, r3, #6
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	72fb      	strb	r3, [r7, #11]
	SCCB_send_byte(REG_HREF, cal_temp);
 8000ca2:	7afb      	ldrb	r3, [r7, #11]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	2032      	movs	r0, #50	; 0x32
 8000ca8:	f002 fd52 	bl	8003750 <SCCB_send_byte>

	// output size
	SCCB_send_byte(REG_HOutSize, width >> 2);
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2029      	movs	r0, #41	; 0x29
 8000cb8:	f002 fd4a 	bl	8003750 <SCCB_send_byte>
	SCCB_send_byte(REG_VOutSize, height >> 1);
 8000cbc:	89bb      	ldrh	r3, [r7, #12]
 8000cbe:	085b      	lsrs	r3, r3, #1
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	202c      	movs	r0, #44	; 0x2c
 8000cc8:	f002 fd42 	bl	8003750 <SCCB_send_byte>
	SCCB_read_byte(REG_EXHCH, &reg_raw, 1);
 8000ccc:	f107 030a 	add.w	r3, r7, #10
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	202a      	movs	r0, #42	; 0x2a
 8000cd6:	f002 fd6a 	bl	80037ae <SCCB_read_byte>
	cal_temp = (reg_raw | (width & 0x03) | ((height & 0x01) << 2));
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	b25a      	sxtb	r2, r3
 8000ce4:	7abb      	ldrb	r3, [r7, #10]
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b25a      	sxtb	r2, r3
 8000cec:	89bb      	ldrh	r3, [r7, #12]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	72fb      	strb	r3, [r7, #11]

	SCCB_send_byte(REG_EXHCH, cal_temp);
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	4619      	mov	r1, r3
 8000d02:	202a      	movs	r0, #42	; 0x2a
 8000d04:	f002 fd24 	bl	8003750 <SCCB_send_byte>

	cam_framesize = size;
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <cam_set_window+0x168>)
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	7013      	strb	r3, [r2, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	08007df0 	.word	0x08007df0
 8000d1c:	2000009b 	.word	0x2000009b

08000d20 <cam_set_framerate>:

void cam_set_framerate(CamFrameRate rate) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	if (!SCCB_send_byte(REG_COM4, cam_rates[rate].pll))
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <cam_set_framerate+0x4c>)
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	785b      	ldrb	r3, [r3, #1]
 8000d34:	4619      	mov	r1, r3
 8000d36:	200d      	movs	r0, #13
 8000d38:	f002 fd0a 	bl	8003750 <SCCB_send_byte>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00e      	beq.n	8000d60 <cam_set_framerate+0x40>
		return;
	if (!SCCB_send_byte(REG_CLKRC, cam_rates[rate].clkrc))
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <cam_set_framerate+0x4c>)
 8000d46:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	2011      	movs	r0, #17
 8000d4e:	f002 fcff 	bl	8003750 <SCCB_send_byte>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d005      	beq.n	8000d64 <cam_set_framerate+0x44>
		return;
	cam_framerate = rate;
 8000d58:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <cam_set_framerate+0x50>)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	7013      	strb	r3, [r2, #0]
 8000d5e:	e002      	b.n	8000d66 <cam_set_framerate+0x46>
		return;
 8000d60:	bf00      	nop
 8000d62:	e000      	b.n	8000d66 <cam_set_framerate+0x46>
		return;
 8000d64:	bf00      	nop
}
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	08007e10 	.word	0x08007e10
 8000d70:	2000009c 	.word	0x2000009c

08000d74 <cam_set_zoomscale>:

void cam_set_zoomscale(float ratio) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	ed87 0a01 	vstr	s0, [r7, #4]
	SCCB_send_byte(REG_DSPAuto, 0xf0);									// disable auto scaling
 8000d7e:	21f0      	movs	r1, #240	; 0xf0
 8000d80:	20ac      	movs	r0, #172	; 0xac
 8000d82:	f002 fce5 	bl	8003750 <SCCB_send_byte>
	SCCB_send_byte(REG_SCAL1, (uint8_t)(ratio * SCAL1_ZOOM_RATIO_1_1)); // horizontal zoom
 8000d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d8a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000de0 <cam_set_zoomscale+0x6c>
 8000d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d96:	edc7 7a00 	vstr	s15, [r7]
 8000d9a:	783b      	ldrb	r3, [r7, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	20a1      	movs	r0, #161	; 0xa1
 8000da2:	f002 fcd5 	bl	8003750 <SCCB_send_byte>
	SCCB_send_byte(REG_SCAL2, (uint8_t)(ratio * SCAL2_ZOOM_RATIO_1_1)); // vertical zoom
 8000da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000daa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000de0 <cam_set_zoomscale+0x6c>
 8000dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db6:	edc7 7a00 	vstr	s15, [r7]
 8000dba:	783b      	ldrb	r3, [r7, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	20a2      	movs	r0, #162	; 0xa2
 8000dc2:	f002 fcc5 	bl	8003750 <SCCB_send_byte>
	cam_zoomscale = ratio;
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fb62 	bl	8000490 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4904      	ldr	r1, [pc, #16]	; (8000de4 <cam_set_zoomscale+0x70>)
 8000dd2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	42800000 	.word	0x42800000
 8000de4:	200000a0 	.word	0x200000a0

08000de8 <cam_set_lightmode>:
	SCCB_send_byte(REG_EDGE1, EDGE1_THRESHOLD(thresh));
	SCCB_send_byte(REG_EDGE2, upperlim);
	SCCB_send_byte(REG_EDGE3, lowerlim);
}

void cam_set_lightmode(CamLightMode mode) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b05      	cmp	r3, #5
 8000df6:	f200 808d 	bhi.w	8000f14 <cam_set_lightmode+0x12c>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <cam_set_lightmode+0x18>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e19 	.word	0x08000e19
 8000e04:	08000e3b 	.word	0x08000e3b
 8000e08:	08000e6d 	.word	0x08000e6d
 8000e0c:	08000e9f 	.word	0x08000e9f
 8000e10:	08000ed1 	.word	0x08000ed1
 8000e14:	08000f03 	.word	0x08000f03
		case CAM_LIGHT_AUTO:				// Auto
			SCCB_send_byte(REG_COM8, 0xff); // AWB on
 8000e18:	21ff      	movs	r1, #255	; 0xff
 8000e1a:	2013      	movs	r0, #19
 8000e1c:	f002 fc98 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 8000e20:	2165      	movs	r1, #101	; 0x65
 8000e22:	200e      	movs	r0, #14
 8000e24:	f002 fc94 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	202d      	movs	r0, #45	; 0x2d
 8000e2c:	f002 fc90 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8000e30:	2100      	movs	r1, #0
 8000e32:	202e      	movs	r0, #46	; 0x2e
 8000e34:	f002 fc8c 	bl	8003750 <SCCB_send_byte>
			break;
 8000e38:	e06d      	b.n	8000f16 <cam_set_lightmode+0x12e>
		case CAM_LIGHT_SUNNY:				// sunny
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8000e3a:	21fd      	movs	r1, #253	; 0xfd
 8000e3c:	2013      	movs	r0, #19
 8000e3e:	f002 fc87 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x5a);
 8000e42:	215a      	movs	r1, #90	; 0x5a
 8000e44:	2001      	movs	r0, #1
 8000e46:	f002 fc83 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x5c);
 8000e4a:	215c      	movs	r1, #92	; 0x5c
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f002 fc7f 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 8000e52:	2165      	movs	r1, #101	; 0x65
 8000e54:	200e      	movs	r0, #14
 8000e56:	f002 fc7b 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	202d      	movs	r0, #45	; 0x2d
 8000e5e:	f002 fc77 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8000e62:	2100      	movs	r1, #0
 8000e64:	202e      	movs	r0, #46	; 0x2e
 8000e66:	f002 fc73 	bl	8003750 <SCCB_send_byte>
			break;
 8000e6a:	e054      	b.n	8000f16 <cam_set_lightmode+0x12e>
		case CAM_LIGHT_CLOUDY:				// cloudy
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8000e6c:	21fd      	movs	r1, #253	; 0xfd
 8000e6e:	2013      	movs	r0, #19
 8000e70:	f002 fc6e 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x58);
 8000e74:	2158      	movs	r1, #88	; 0x58
 8000e76:	2001      	movs	r0, #1
 8000e78:	f002 fc6a 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x60);
 8000e7c:	2160      	movs	r1, #96	; 0x60
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f002 fc66 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 8000e84:	2165      	movs	r1, #101	; 0x65
 8000e86:	200e      	movs	r0, #14
 8000e88:	f002 fc62 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	202d      	movs	r0, #45	; 0x2d
 8000e90:	f002 fc5e 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8000e94:	2100      	movs	r1, #0
 8000e96:	202e      	movs	r0, #46	; 0x2e
 8000e98:	f002 fc5a 	bl	8003750 <SCCB_send_byte>
			break;
 8000e9c:	e03b      	b.n	8000f16 <cam_set_lightmode+0x12e>
		case CAM_LIGHT_OFFICE:				// office
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8000e9e:	21fd      	movs	r1, #253	; 0xfd
 8000ea0:	2013      	movs	r0, #19
 8000ea2:	f002 fc55 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x84);
 8000ea6:	2184      	movs	r1, #132	; 0x84
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f002 fc51 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x4c);
 8000eae:	214c      	movs	r1, #76	; 0x4c
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f002 fc4d 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 8000eb6:	2165      	movs	r1, #101	; 0x65
 8000eb8:	200e      	movs	r0, #14
 8000eba:	f002 fc49 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	202d      	movs	r0, #45	; 0x2d
 8000ec2:	f002 fc45 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	202e      	movs	r0, #46	; 0x2e
 8000eca:	f002 fc41 	bl	8003750 <SCCB_send_byte>
			break;
 8000ece:	e022      	b.n	8000f16 <cam_set_lightmode+0x12e>
		case CAM_LIGHT_HOME:				// home
			SCCB_send_byte(REG_COM8, 0xfd); // AWB off
 8000ed0:	21fd      	movs	r1, #253	; 0xfd
 8000ed2:	2013      	movs	r0, #19
 8000ed4:	f002 fc3c 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_BLUE, 0x96);
 8000ed8:	2196      	movs	r1, #150	; 0x96
 8000eda:	2001      	movs	r0, #1
 8000edc:	f002 fc38 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_RED, 0x40);
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f002 fc34 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0x65);
 8000ee8:	2165      	movs	r1, #101	; 0x65
 8000eea:	200e      	movs	r0, #14
 8000eec:	f002 fc30 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFL, 0x00);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	202d      	movs	r0, #45	; 0x2d
 8000ef4:	f002 fc2c 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_ADVFH, 0x00);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	202e      	movs	r0, #46	; 0x2e
 8000efc:	f002 fc28 	bl	8003750 <SCCB_send_byte>
			break;
 8000f00:	e009      	b.n	8000f16 <cam_set_lightmode+0x12e>

		case CAM_LIGHT_NIGHT:				// night
			SCCB_send_byte(REG_COM8, 0xff); // AWB on
 8000f02:	21ff      	movs	r1, #255	; 0xff
 8000f04:	2013      	movs	r0, #19
 8000f06:	f002 fc23 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_COM5, 0xe5);
 8000f0a:	21e5      	movs	r1, #229	; 0xe5
 8000f0c:	200e      	movs	r0, #14
 8000f0e:	f002 fc1f 	bl	8003750 <SCCB_send_byte>
			break;
 8000f12:	e000      	b.n	8000f16 <cam_set_lightmode+0x12e>
		default: break;
 8000f14:	bf00      	nop
	}
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop

08000f20 <cam_set_brightness>:

void cam_set_brightness(int8_t brightness) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
	uint8_t _sign = (brightness >= 0) ? 0x06 : 0x0E;
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db01      	blt.n	8000f36 <cam_set_brightness+0x16>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e000      	b.n	8000f38 <cam_set_brightness+0x18>
 8000f36:	230e      	movs	r3, #14
 8000f38:	73fb      	strb	r3, [r7, #15]
	uint8_t _brightness;

	switch (brightness) {
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d827      	bhi.n	8000f94 <cam_set_brightness+0x74>
 8000f44:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <cam_set_brightness+0x2c>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f77 	.word	0x08000f77
 8000f50:	08000f7d 	.word	0x08000f7d
 8000f54:	08000f83 	.word	0x08000f83
 8000f58:	08000f8f 	.word	0x08000f8f
 8000f5c:	08000f89 	.word	0x08000f89
 8000f60:	08000f83 	.word	0x08000f83
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f77 	.word	0x08000f77
 8000f6c:	08000f71 	.word	0x08000f71
		case 4: _brightness = 0x48; break;
 8000f70:	2348      	movs	r3, #72	; 0x48
 8000f72:	73bb      	strb	r3, [r7, #14]
 8000f74:	e013      	b.n	8000f9e <cam_set_brightness+0x7e>
		case 3:
		case -4: _brightness = 0x38; break;
 8000f76:	2338      	movs	r3, #56	; 0x38
 8000f78:	73bb      	strb	r3, [r7, #14]
 8000f7a:	e010      	b.n	8000f9e <cam_set_brightness+0x7e>
		case 2:
		case -3: _brightness = 0x28; break;
 8000f7c:	2328      	movs	r3, #40	; 0x28
 8000f7e:	73bb      	strb	r3, [r7, #14]
 8000f80:	e00d      	b.n	8000f9e <cam_set_brightness+0x7e>
		case 1:
		case -2: _brightness = 0x18; break;
 8000f82:	2318      	movs	r3, #24
 8000f84:	73bb      	strb	r3, [r7, #14]
 8000f86:	e00a      	b.n	8000f9e <cam_set_brightness+0x7e>
		case 0: _brightness = 0x00; break;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73bb      	strb	r3, [r7, #14]
 8000f8c:	e007      	b.n	8000f9e <cam_set_brightness+0x7e>
		case -1: _brightness = 0x08; break;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	73bb      	strb	r3, [r7, #14]
 8000f92:	e004      	b.n	8000f9e <cam_set_brightness+0x7e>
		default: _brightness = _sign = 0; break;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	73bb      	strb	r3, [r7, #14]
 8000f9c:	bf00      	nop
	}

	SCCB_send_byte(REG_BRIGHT, _brightness);
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	209b      	movs	r0, #155	; 0x9b
 8000fa4:	f002 fbd4 	bl	8003750 <SCCB_send_byte>
	SCCB_send_byte(REG_SIGN, _sign);
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	4619      	mov	r1, r3
 8000fac:	20ab      	movs	r0, #171	; 0xab
 8000fae:	f002 fbcf 	bl	8003750 <SCCB_send_byte>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop

08000fbc <cam_set_saturation>:

void cam_set_saturation(int8_t sat) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	if (sat >= -4 && sat <= 4) {
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	f113 0f04 	cmn.w	r3, #4
 8000fce:	db15      	blt.n	8000ffc <cam_set_saturation+0x40>
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	dc11      	bgt.n	8000ffc <cam_set_saturation+0x40>
		SCCB_send_byte(REG_USAT, (sat + 4) << 4);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	3304      	adds	r3, #4
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	20a7      	movs	r0, #167	; 0xa7
 8000fe6:	f002 fbb3 	bl	8003750 <SCCB_send_byte>
		SCCB_send_byte(REG_VSAT, (sat + 4) << 4);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	3304      	adds	r3, #4
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	20a8      	movs	r0, #168	; 0xa8
 8000ff8:	f002 fbaa 	bl	8003750 <SCCB_send_byte>
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <cam_set_contrast>:

void cam_set_contrast(int8_t contrast) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	if (contrast >= -4 && contrast <= 4)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	f113 0f04 	cmn.w	r3, #4
 8001016:	db0d      	blt.n	8001034 <cam_set_contrast+0x30>
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b04      	cmp	r3, #4
 800101e:	dc09      	bgt.n	8001034 <cam_set_contrast+0x30>
		SCCB_send_byte(REG_CNST, (0x30 - (4 - contrast) * 4));
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	3308      	adds	r3, #8
 8001026:	b2db      	uxtb	r3, r3
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4619      	mov	r1, r3
 800102e:	209c      	movs	r0, #156	; 0x9c
 8001030:	f002 fb8e 	bl	8003750 <SCCB_send_byte>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <cam_set_effect>:

void cam_set_effect(CamEffect effect) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	switch (effect) {
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b06      	cmp	r3, #6
 800104a:	d864      	bhi.n	8001116 <cam_set_effect+0xda>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <cam_set_effect+0x18>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	08001071 	.word	0x08001071
 8001058:	0800108b 	.word	0x0800108b
 800105c:	080010a5 	.word	0x080010a5
 8001060:	080010bf 	.word	0x080010bf
 8001064:	080010d9 	.word	0x080010d9
 8001068:	080010f3 	.word	0x080010f3
 800106c:	0800110d 	.word	0x0800110d
		case CAM_FX_NORMAL: // normal
			SCCB_send_byte(REG_SDE, 0x06);
 8001070:	2106      	movs	r1, #6
 8001072:	20a6      	movs	r0, #166	; 0xa6
 8001074:	f002 fb6c 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x80);
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	2060      	movs	r0, #96	; 0x60
 800107c:	f002 fb68 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x80);
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	2061      	movs	r0, #97	; 0x61
 8001084:	f002 fb64 	bl	8003750 <SCCB_send_byte>
			break;
 8001088:	e046      	b.n	8001118 <cam_set_effect+0xdc>

		case CAM_FX_BW: // Black and white
			SCCB_send_byte(REG_SDE, 0x26);
 800108a:	2126      	movs	r1, #38	; 0x26
 800108c:	20a6      	movs	r0, #166	; 0xa6
 800108e:	f002 fb5f 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x80);
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	2060      	movs	r0, #96	; 0x60
 8001096:	f002 fb5b 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x80);
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	2061      	movs	r0, #97	; 0x61
 800109e:	f002 fb57 	bl	8003750 <SCCB_send_byte>
			break;
 80010a2:	e039      	b.n	8001118 <cam_set_effect+0xdc>

		case CAM_FX_BLUE: // blue
			SCCB_send_byte(REG_SDE, 0x1e);
 80010a4:	211e      	movs	r1, #30
 80010a6:	20a6      	movs	r0, #166	; 0xa6
 80010a8:	f002 fb52 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0xa0);
 80010ac:	21a0      	movs	r1, #160	; 0xa0
 80010ae:	2060      	movs	r0, #96	; 0x60
 80010b0:	f002 fb4e 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x40);
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	2061      	movs	r0, #97	; 0x61
 80010b8:	f002 fb4a 	bl	8003750 <SCCB_send_byte>
			break;
 80010bc:	e02c      	b.n	8001118 <cam_set_effect+0xdc>

		case CAM_FX_SEPIA: // Sepia
			SCCB_send_byte(REG_SDE, 0x1e);
 80010be:	211e      	movs	r1, #30
 80010c0:	20a6      	movs	r0, #166	; 0xa6
 80010c2:	f002 fb45 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x40);
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	2060      	movs	r0, #96	; 0x60
 80010ca:	f002 fb41 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0xa0);
 80010ce:	21a0      	movs	r1, #160	; 0xa0
 80010d0:	2061      	movs	r0, #97	; 0x61
 80010d2:	f002 fb3d 	bl	8003750 <SCCB_send_byte>
			break;
 80010d6:	e01f      	b.n	8001118 <cam_set_effect+0xdc>

		case CAM_FX_RED: // red
			SCCB_send_byte(REG_SDE, 0x1e);
 80010d8:	211e      	movs	r1, #30
 80010da:	20a6      	movs	r0, #166	; 0xa6
 80010dc:	f002 fb38 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x80);
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	2060      	movs	r0, #96	; 0x60
 80010e4:	f002 fb34 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0xc0);
 80010e8:	21c0      	movs	r1, #192	; 0xc0
 80010ea:	2061      	movs	r0, #97	; 0x61
 80010ec:	f002 fb30 	bl	8003750 <SCCB_send_byte>
			break;
 80010f0:	e012      	b.n	8001118 <cam_set_effect+0xdc>

		case CAM_FX_GREEN: // green
			SCCB_send_byte(REG_SDE, 0x1e);
 80010f2:	211e      	movs	r1, #30
 80010f4:	20a6      	movs	r0, #166	; 0xa6
 80010f6:	f002 fb2b 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_UFix, 0x60);
 80010fa:	2160      	movs	r1, #96	; 0x60
 80010fc:	2060      	movs	r0, #96	; 0x60
 80010fe:	f002 fb27 	bl	8003750 <SCCB_send_byte>
			SCCB_send_byte(REG_VFix, 0x60);
 8001102:	2160      	movs	r1, #96	; 0x60
 8001104:	2061      	movs	r0, #97	; 0x61
 8001106:	f002 fb23 	bl	8003750 <SCCB_send_byte>
			break;
 800110a:	e005      	b.n	8001118 <cam_set_effect+0xdc>

		case CAM_FX_NEGATIVE: // negative
			SCCB_send_byte(REG_SDE, 0x46);
 800110c:	2146      	movs	r1, #70	; 0x46
 800110e:	20a6      	movs	r0, #166	; 0xa6
 8001110:	f002 fb1e 	bl	8003750 <SCCB_send_byte>
			break;
 8001114:	e000      	b.n	8001118 <cam_set_effect+0xdc>

		default: break;
 8001116:	bf00      	nop
	}
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <cam_is_frame_ready>:
CameraState cam_get_state(void) { return cam_state; }
uint8_t cam_is_frame_ready(void) { return cam_state >= CAM_FRAME_READY; }
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <cam_is_frame_ready+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf8c      	ite	hi
 800112e:	2301      	movhi	r3, #1
 8001130:	2300      	movls	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200000d4 	.word	0x200000d4

08001144 <cam_get_framesize>:
uint8_t cam_is_initialized(void) { return cam_state >= CAM_CONFIGURED; }
CamColorMode cam_get_colormode(void) { return cam_colormode; }
CamFrameSize cam_get_framesize(void) { return cam_framesize; }
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <cam_get_framesize+0x14>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000009b 	.word	0x2000009b

0800115c <cam_get_rgb565>:
	FIFO_RCLK_L;
	*rgb565 |= (OV7725_DATA_PORT->IDR >> 6) & 0x00FF;
	FIFO_RCLK_H;
}

void cam_get_rgb565(uint16_t* image) {
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	FIFO_PREPARE;
 8001164:	4b36      	ldr	r3, [pc, #216]	; (8001240 <cam_get_rgb565+0xe4>)
 8001166:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800116a:	619a      	str	r2, [r3, #24]
 800116c:	4b35      	ldr	r3, [pc, #212]	; (8001244 <cam_get_rgb565+0xe8>)
 800116e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001172:	619a      	str	r2, [r3, #24]
 8001174:	4b33      	ldr	r3, [pc, #204]	; (8001244 <cam_get_rgb565+0xe8>)
 8001176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <cam_get_rgb565+0xe4>)
 800117e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001182:	619a      	str	r2, [r3, #24]
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <cam_get_rgb565+0xe8>)
 8001186:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800118a:	619a      	str	r2, [r3, #24]
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <cam_get_rgb565+0xe8>)
 800118e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001192:	619a      	str	r2, [r3, #24]
	uint16_t pixel = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 8001198:	2300      	movs	r3, #0
 800119a:	82fb      	strh	r3, [r7, #22]
 800119c:	e034      	b.n	8001208 <cam_get_rgb565+0xac>
 800119e:	f107 030e 	add.w	r3, r7, #14
 80011a2:	613b      	str	r3, [r7, #16]
	*rgb565 = 0;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2200      	movs	r2, #0
 80011a8:	801a      	strh	r2, [r3, #0]
	FIFO_RCLK_L;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <cam_get_rgb565+0xe8>)
 80011ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011b0:	619a      	str	r2, [r3, #24]
	*rgb565 = (OV7725_DATA_PORT->IDR << 2) & 0xFF00;
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <cam_get_rgb565+0xec>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	801a      	strh	r2, [r3, #0]
	FIFO_RCLK_H;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <cam_get_rgb565+0xe8>)
 80011c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011cc:	619a      	str	r2, [r3, #24]
	FIFO_RCLK_L;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <cam_get_rgb565+0xe8>)
 80011d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011d4:	619a      	str	r2, [r3, #24]
	*rgb565 |= (OV7725_DATA_PORT->IDR >> 6) & 0x00FF;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <cam_get_rgb565+0xec>)
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	099b      	lsrs	r3, r3, #6
 80011dc:	b2d9      	uxtb	r1, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	881a      	ldrh	r2, [r3, #0]
 80011e2:	b28b      	uxth	r3, r1
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	801a      	strh	r2, [r3, #0]
	FIFO_RCLK_H;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <cam_get_rgb565+0xe8>)
 80011ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011f2:	619a      	str	r2, [r3, #24]
}
 80011f4:	bf00      	nop
		read_fifo_pixel(&pixel);
		image[i] = pixel;
 80011f6:	8afb      	ldrh	r3, [r7, #22]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	89fa      	ldrh	r2, [r7, #14]
 8001200:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 8001202:	8afb      	ldrh	r3, [r7, #22]
 8001204:	3301      	adds	r3, #1
 8001206:	82fb      	strh	r3, [r7, #22]
 8001208:	8afa      	ldrh	r2, [r7, #22]
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <cam_get_rgb565+0xf0>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <cam_get_rgb565+0xf4>)
 8001212:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8001216:	4618      	mov	r0, r3
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <cam_get_rgb565+0xf0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <cam_get_rgb565+0xf4>)
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	885b      	ldrh	r3, [r3, #2]
 8001224:	fb00 f303 	mul.w	r3, r0, r3
 8001228:	429a      	cmp	r2, r3
 800122a:	dbb8      	blt.n	800119e <cam_get_rgb565+0x42>
	}
	cam_state = CAM_CAPTURING;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <cam_get_rgb565+0xf8>)
 800122e:	2204      	movs	r2, #4
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	2000009b 	.word	0x2000009b
 8001250:	08007df0 	.word	0x08007df0
 8001254:	200000d4 	.word	0x200000d4

08001258 <cam_rgb2printable>:

void cam_rgb2printable(uint16_t* image, uint16_t* printable) {
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 8001262:	2300      	movs	r3, #0
 8001264:	81fb      	strh	r3, [r7, #14]
 8001266:	e013      	b.n	8001290 <cam_rgb2printable+0x38>
		printable[i] = __REVSH(image[i]);
 8001268:	89fb      	ldrh	r3, [r7, #14]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	b21b      	sxth	r3, r3
 8001274:	81bb      	strh	r3, [r7, #12]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8001276:	89bb      	ldrh	r3, [r7, #12]
 8001278:	ba5b      	rev16	r3, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	b219      	sxth	r1, r3
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	b28a      	uxth	r2, r1
 8001288:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < IMG_WIDTH * IMG_HEIGHT; ++i) {
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	3301      	adds	r3, #1
 800128e:	81fb      	strh	r3, [r7, #14]
 8001290:	89fa      	ldrh	r2, [r7, #14]
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <cam_rgb2printable+0x6c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <cam_rgb2printable+0x70>)
 800129a:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 800129e:	4618      	mov	r0, r3
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <cam_rgb2printable+0x6c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4908      	ldr	r1, [pc, #32]	; (80012c8 <cam_rgb2printable+0x70>)
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	885b      	ldrh	r3, [r3, #2]
 80012ac:	fb00 f303 	mul.w	r3, r0, r3
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbd9      	blt.n	8001268 <cam_rgb2printable+0x10>
	}
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000009b 	.word	0x2000009b
 80012c8:	08007df0 	.word	0x08007df0

080012cc <HAL_GPIO_EXTI_Callback>:
#pragma GCC pop_options

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OV7725_VSYNC_PIN) {
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012dc:	d121      	bne.n	8001322 <HAL_GPIO_EXTI_Callback+0x56>
		if (cam_state == CAM_CAPTURING) {
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_GPIO_EXTI_Callback+0x64>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d110      	bne.n	800130a <HAL_GPIO_EXTI_Callback+0x3e>
			FIFO_WRST_L;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_GPIO_EXTI_Callback+0x68>)
 80012ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012ee:	619a      	str	r2, [r3, #24]
			FIFO_WE_H;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_GPIO_EXTI_Callback+0x6c>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	619a      	str	r2, [r3, #24]

			cam_state = CAM_FRAME_READY;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_GPIO_EXTI_Callback+0x64>)
 80012f8:	2205      	movs	r2, #5
 80012fa:	701a      	strb	r2, [r3, #0]

			FIFO_WE_H;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_GPIO_EXTI_Callback+0x6c>)
 80012fe:	2202      	movs	r2, #2
 8001300:	619a      	str	r2, [r3, #24]
			FIFO_WRST_H;
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_GPIO_EXTI_Callback+0x68>)
 8001304:	2210      	movs	r2, #16
 8001306:	619a      	str	r2, [r3, #24]
		} else if (cam_state == CAM_FRAME_READY) {
			FIFO_WE_L;
			cam_state = CAM_MISSED_FRAME;
		}
	}
}
 8001308:	e00b      	b.n	8001322 <HAL_GPIO_EXTI_Callback+0x56>
		} else if (cam_state == CAM_FRAME_READY) {
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_GPIO_EXTI_Callback+0x64>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b05      	cmp	r3, #5
 8001312:	d106      	bne.n	8001322 <HAL_GPIO_EXTI_Callback+0x56>
			FIFO_WE_L;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001316:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800131a:	619a      	str	r2, [r3, #24]
			cam_state = CAM_MISSED_FRAME;
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_GPIO_EXTI_Callback+0x64>)
 800131e:	2206      	movs	r2, #6
 8001320:	701a      	strb	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200000d4 	.word	0x200000d4
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400

0800133c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001342:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <MX_CAN1_Init+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001348:	2203      	movs	r2, #3
 800134a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_CAN1_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_CAN1_Init+0x64>)
 800135a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800135e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001362:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001366:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_CAN1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_CAN1_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_CAN1_Init+0x64>)
 800138e:	f002 ff45 	bl	800421c <HAL_CAN_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001398:	f002 f84c 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200000d8 	.word	0x200000d8
 80013a4:	40006400 	.word	0x40006400

080013a8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_CAN2_Init+0x64>)
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <MX_CAN2_Init+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_CAN2_Init+0x64>)
 80013b4:	2203      	movs	r2, #3
 80013b6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_CAN2_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_CAN2_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_CAN2_Init+0x64>)
 80013c6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80013ca:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_CAN2_Init+0x64>)
 80013ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013d2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_CAN2_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_CAN2_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <MX_CAN2_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_CAN2_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <MX_CAN2_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_CAN2_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_CAN2_Init+0x64>)
 80013fa:	f002 ff0f 	bl	800421c <HAL_CAN_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001404:	f002 f816 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000100 	.word	0x20000100
 8001410:	40006800 	.word	0x40006800

08001414 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a43      	ldr	r2, [pc, #268]	; (8001540 <HAL_CAN_MspInit+0x12c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d136      	bne.n	80014a4 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_CAN_MspInit+0x130>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a41      	ldr	r2, [pc, #260]	; (8001544 <HAL_CAN_MspInit+0x130>)
 800143e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001440:	4b40      	ldr	r3, [pc, #256]	; (8001544 <HAL_CAN_MspInit+0x130>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d10d      	bne.n	8001464 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <HAL_CAN_MspInit+0x134>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a3d      	ldr	r2, [pc, #244]	; (8001548 <HAL_CAN_MspInit+0x134>)
 8001452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_CAN_MspInit+0x134>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <HAL_CAN_MspInit+0x134>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a36      	ldr	r2, [pc, #216]	; (8001548 <HAL_CAN_MspInit+0x134>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_CAN_MspInit+0x134>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001480:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001492:	2309      	movs	r3, #9
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	482b      	ldr	r0, [pc, #172]	; (800154c <HAL_CAN_MspInit+0x138>)
 800149e:	f003 fc5d 	bl	8004d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80014a2:	e048      	b.n	8001536 <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_CAN_MspInit+0x13c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d143      	bne.n	8001536 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_CAN_MspInit+0x134>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <HAL_CAN_MspInit+0x134>)
 80014b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_CAN_MspInit+0x134>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_CAN_MspInit+0x130>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <HAL_CAN_MspInit+0x130>)
 80014d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_CAN_MspInit+0x130>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d10d      	bne.n	80014f8 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_CAN_MspInit+0x134>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_CAN_MspInit+0x134>)
 80014e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_CAN_MspInit+0x134>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_CAN_MspInit+0x134>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a11      	ldr	r2, [pc, #68]	; (8001548 <HAL_CAN_MspInit+0x134>)
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_CAN_MspInit+0x134>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001514:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001526:	2309      	movs	r3, #9
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <HAL_CAN_MspInit+0x140>)
 8001532:	f003 fc13 	bl	8004d5c <HAL_GPIO_Init>
}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40006400 	.word	0x40006400
 8001544:	20000128 	.word	0x20000128
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40006800 	.word	0x40006800
 8001554:	40020400 	.word	0x40020400

08001558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_DMA_Init+0x3c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <MX_DMA_Init+0x3c>)
 8001568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_DMA_Init+0x3c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	203b      	movs	r0, #59	; 0x3b
 8001580:	f003 f823 	bl	80045ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001584:	203b      	movs	r0, #59	; 0x3b
 8001586:	f003 f83c 	bl	8004602 <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <MX_GPIO_Init+0x1cc>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a6b      	ldr	r2, [pc, #428]	; (8001764 <MX_GPIO_Init+0x1cc>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b69      	ldr	r3, [pc, #420]	; (8001764 <MX_GPIO_Init+0x1cc>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <MX_GPIO_Init+0x1cc>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a64      	ldr	r2, [pc, #400]	; (8001764 <MX_GPIO_Init+0x1cc>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <MX_GPIO_Init+0x1cc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <MX_GPIO_Init+0x1cc>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a5d      	ldr	r2, [pc, #372]	; (8001764 <MX_GPIO_Init+0x1cc>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <MX_GPIO_Init+0x1cc>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b57      	ldr	r3, [pc, #348]	; (8001764 <MX_GPIO_Init+0x1cc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a56      	ldr	r2, [pc, #344]	; (8001764 <MX_GPIO_Init+0x1cc>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b54      	ldr	r3, [pc, #336]	; (8001764 <MX_GPIO_Init+0x1cc>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b50      	ldr	r3, [pc, #320]	; (8001764 <MX_GPIO_Init+0x1cc>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a4f      	ldr	r2, [pc, #316]	; (8001764 <MX_GPIO_Init+0x1cc>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <MX_GPIO_Init+0x1cc>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800163a:	2200      	movs	r2, #0
 800163c:	213f      	movs	r1, #63	; 0x3f
 800163e:	484a      	ldr	r0, [pc, #296]	; (8001768 <MX_GPIO_Init+0x1d0>)
 8001640:	f003 fd40 	bl	80050c4 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f248 0150 	movw	r1, #32848	; 0x8050
 800164a:	4848      	ldr	r0, [pc, #288]	; (800176c <MX_GPIO_Init+0x1d4>)
 800164c:	f003 fd3a 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 8001650:	2200      	movs	r2, #0
 8001652:	f248 01f3 	movw	r1, #33011	; 0x80f3
 8001656:	4846      	ldr	r0, [pc, #280]	; (8001770 <MX_GPIO_Init+0x1d8>)
 8001658:	f003 fd34 	bl	80050c4 <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAM_D7_Pin|CAM_D0_Pin|CAM_D1_Pin|CAM_D2_Pin
 800165c:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8001660:	617b      	str	r3, [r7, #20]
                          |CAM_D3_Pin|CAM_D4_Pin|CAM_D5_Pin|CAM_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	483d      	ldr	r0, [pc, #244]	; (8001768 <MX_GPIO_Init+0x1d0>)
 8001672:	f003 fb73 	bl	8004d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001676:	233f      	movs	r3, #63	; 0x3f
 8001678:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin|TFT_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4836      	ldr	r0, [pc, #216]	; (8001768 <MX_GPIO_Init+0x1d0>)
 800168e:	f003 fb65 	bl	8004d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_HREF_Pin|CAM_RRST_Pin;
 8001692:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	4831      	ldr	r0, [pc, #196]	; (800176c <MX_GPIO_Init+0x1d4>)
 80016a8:	f003 fb58 	bl	8004d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin;
 80016ac:	f248 0350 	movw	r3, #32848	; 0x8050
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4829      	ldr	r0, [pc, #164]	; (800176c <MX_GPIO_Init+0x1d4>)
 80016c6:	f003 fb49 	bl	8004d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 80016ca:	f248 03f3 	movw	r3, #33011	; 0x80f3
 80016ce:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4823      	ldr	r0, [pc, #140]	; (8001770 <MX_GPIO_Init+0x1d8>)
 80016e4:	f003 fb3a 	bl	8004d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 80016e8:	2304      	movs	r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	481d      	ldr	r0, [pc, #116]	; (8001770 <MX_GPIO_Init+0x1d8>)
 80016fc:	f003 fb2e 	bl	8004d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 8001700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001706:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4816      	ldr	r0, [pc, #88]	; (8001770 <MX_GPIO_Init+0x1d8>)
 8001718:	f003 fb20 	bl	8004d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 800171c:	2304      	movs	r3, #4
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <MX_GPIO_Init+0x1dc>)
 8001730:	f003 fb14 	bl	8004d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001734:	2308      	movs	r3, #8
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173c:	2301      	movs	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	480a      	ldr	r0, [pc, #40]	; (8001770 <MX_GPIO_Init+0x1d8>)
 8001748:	f003 fb08 	bl	8004d5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	2028      	movs	r0, #40	; 0x28
 8001752:	f002 ff3a 	bl	80045ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001756:	2028      	movs	r0, #40	; 0x28
 8001758:	f002 ff53 	bl	8004602 <HAL_NVIC_EnableIRQ>

}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	; 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	40020800 	.word	0x40020800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020400 	.word	0x40020400
 8001774:	40020c00 	.word	0x40020c00

08001778 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_I2C2_Init+0x50>)
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <MX_I2C2_Init+0x54>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_I2C2_Init+0x58>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_I2C2_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_I2C2_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017b6:	f003 fcd1 	bl	800515c <HAL_I2C_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017c0:	f001 fe38 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000012c 	.word	0x2000012c
 80017cc:	40005800 	.word	0x40005800
 80017d0:	000186a0 	.word	0x000186a0

080017d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_I2C_MspInit+0x84>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12c      	bne.n	8001850 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_I2C_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = CAM_SCL_Pin|CAM_SDA_Pin;
 8001812:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001818:	2312      	movs	r3, #18
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001824:	2304      	movs	r3, #4
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	480c      	ldr	r0, [pc, #48]	; (8001860 <HAL_I2C_MspInit+0x8c>)
 8001830:	f003 fa94 	bl	8004d5c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_I2C_MspInit+0x88>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_I2C_MspInit+0x88>)
 800183e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40005800 	.word	0x40005800
 800185c:	40023800 	.word	0x40023800
 8001860:	40020400 	.word	0x40020400

08001864 <tft_char_is_changed>:
/* Macro */
#define TFT_XY(x, y) ((y)*char_max_x + (x))  // 2D to 1D index

// Useful function to improve performance
static inline bool tft_char_is_changed(const TFTBuffer buf, uint8_t x,
        uint8_t y) {
 8001864:	b490      	push	{r4, r7}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
 8001870:	4613      	mov	r3, r2
 8001872:	70bb      	strb	r3, [r7, #2]
    const uint16_t idx = TFT_XY(x, y);
 8001874:	78bb      	ldrb	r3, [r7, #2]
 8001876:	b29a      	uxth	r2, r3
 8001878:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <tft_char_is_changed+0x110>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b29b      	uxth	r3, r3
 800187e:	fb12 f303 	smulbb	r3, r2, r3
 8001882:	b29a      	uxth	r2, r3
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	b29b      	uxth	r3, r3
 8001888:	4413      	add	r3, r2
 800188a:	81fb      	strh	r3, [r7, #14]
    return ((buf->text_buf[buf->curr_screen][idx]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	89fa      	ldrh	r2, [r7, #14]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4603      	mov	r3, r0
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4403      	add	r3, r0
 800189c:	015b      	lsls	r3, r3, #5
 800189e:	440b      	add	r3, r1
 80018a0:	4413      	add	r3, r2
 80018a2:	3301      	adds	r3, #1
 80018a4:	781a      	ldrb	r2, [r3, #0]
            != buf->text_buf[!buf->curr_screen][idx])
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf0c      	ite	eq
 80018ae:	2301      	moveq	r3, #1
 80018b0:	2300      	movne	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461c      	mov	r4, r3
 80018b6:	89f9      	ldrh	r1, [r7, #14]
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	4623      	mov	r3, r4
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4423      	add	r3, r4
 80018c0:	015b      	lsls	r3, r3, #5
 80018c2:	4403      	add	r3, r0
 80018c4:	440b      	add	r3, r1
 80018c6:	3301      	adds	r3, #1
 80018c8:	781b      	ldrb	r3, [r3, #0]
            || (buf->text_color_buf[buf->curr_screen][idx]
                    != buf->text_color_buf[!buf->curr_screen][idx])
            || (buf->bg_color_buf[buf->curr_screen][idx]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d147      	bne.n	800195e <tft_char_is_changed+0xfa>
            || (buf->text_color_buf[buf->curr_screen][idx]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	89f9      	ldrh	r1, [r7, #14]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4603      	mov	r3, r0
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4403      	add	r3, r0
 80018de:	015b      	lsls	r3, r3, #5
 80018e0:	440b      	add	r3, r1
 80018e2:	33a0      	adds	r3, #160	; 0xa0
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	885a      	ldrh	r2, [r3, #2]
                    != buf->text_color_buf[!buf->curr_screen][idx])
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461c      	mov	r4, r3
 80018fa:	89f8      	ldrh	r0, [r7, #14]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4623      	mov	r3, r4
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4423      	add	r3, r4
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	4403      	add	r3, r0
 8001908:	33a0      	adds	r3, #160	; 0xa0
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	440b      	add	r3, r1
 800190e:	885b      	ldrh	r3, [r3, #2]
            || (buf->text_color_buf[buf->curr_screen][idx]
 8001910:	429a      	cmp	r2, r3
 8001912:	d124      	bne.n	800195e <tft_char_is_changed+0xfa>
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	89f9      	ldrh	r1, [r7, #14]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4603      	mov	r3, r0
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4403      	add	r3, r0
 8001924:	015b      	lsls	r3, r3, #5
 8001926:	440b      	add	r3, r1
 8001928:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	885a      	ldrh	r2, [r3, #2]
                    != buf->bg_color_buf[!buf->curr_screen][idx]));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461c      	mov	r4, r3
 8001942:	89f8      	ldrh	r0, [r7, #14]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4623      	mov	r3, r4
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4423      	add	r3, r4
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	4403      	add	r3, r0
 8001950:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	885b      	ldrh	r3, [r3, #2]
            || (buf->bg_color_buf[buf->curr_screen][idx]
 800195a:	429a      	cmp	r2, r3
 800195c:	d001      	beq.n	8001962 <tft_char_is_changed+0xfe>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <tft_char_is_changed+0x100>
 8001962:	2300      	movs	r3, #0
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	b2db      	uxtb	r3, r3
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bc90      	pop	{r4, r7}
 8001972:	4770      	bx	lr
 8001974:	20000189 	.word	0x20000189

08001978 <itos>:
 * @param      data  The string to write to
 * @param[in]  i     The signed integer to convert
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* itos(char *data, int32_t i) {
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    if (i < 0) {
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	da07      	bge.n	8001998 <itos+0x20>
        i = -i;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	425b      	negs	r3, r3
 800198c:	603b      	str	r3, [r7, #0]
        *data++ = '-';
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	222d      	movs	r2, #45	; 0x2d
 8001996:	701a      	strb	r2, [r3, #0]
    }
    char buf[14] = { 0 };
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	811a      	strh	r2, [r3, #8]
    char *ptr = &buf[1];
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
    do {
        *ptr++ = '0' + (i % 10);
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <itos+0xa8>)
 80019b4:	fb83 1302 	smull	r1, r3, r3, r2
 80019b8:	1099      	asrs	r1, r3, #2
 80019ba:	17d3      	asrs	r3, r2, #31
 80019bc:	1ac9      	subs	r1, r1, r3
 80019be:	460b      	mov	r3, r1
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	1ad1      	subs	r1, r2, r3
 80019c8:	b2ca      	uxtb	r2, r1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	1c59      	adds	r1, r3, #1
 80019ce:	61f9      	str	r1, [r7, #28]
 80019d0:	3230      	adds	r2, #48	; 0x30
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
        i /= 10;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <itos+0xa8>)
 80019da:	fb82 1203 	smull	r1, r2, r2, r3
 80019de:	1092      	asrs	r2, r2, #2
 80019e0:	17db      	asrs	r3, r3, #31
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	603b      	str	r3, [r7, #0]
    } while (i);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e1      	bne.n	80019b0 <itos+0x38>
    ptr--;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
    while (*ptr) {
 80019f2:	e007      	b.n	8001a04 <itos+0x8c>
        *data++ = *ptr--;
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	1e53      	subs	r3, r2, #1
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	1c59      	adds	r1, r3, #1
 80019fe:	6079      	str	r1, [r7, #4]
 8001a00:	7812      	ldrb	r2, [r2, #0]
 8001a02:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f3      	bne.n	80019f4 <itos+0x7c>
    }
    *data = '\0';
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
    return data;
 8001a12:	687b      	ldr	r3, [r7, #4]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3724      	adds	r7, #36	; 0x24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	66666667 	.word	0x66666667

08001a24 <utos0>:
 * @param[in]  i       The unsigned integer
 * @param[in]  digits  The number of digits
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* utos0(char *data, uint32_t i, uint32_t digits) {
 8001a24:	b480      	push	{r7}
 8001a26:	b08d      	sub	sp, #52	; 0x34
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
    char buf[20] = { 0 };
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
    char *ptr = &buf[1];
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	3301      	adds	r3, #1
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    digits--;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
    uint32_t n = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
        *ptr++ = '0' + (i % 10);
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	4b21      	ldr	r3, [pc, #132]	; (8001adc <utos0+0xb8>)
 8001a58:	fba3 2301 	umull	r2, r3, r3, r1
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	1aca      	subs	r2, r1, r3
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	1c59      	adds	r1, r3, #1
 8001a6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001a70:	3230      	adds	r2, #48	; 0x30
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4a18      	ldr	r2, [pc, #96]	; (8001adc <utos0+0xb8>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	60bb      	str	r3, [r7, #8]
        n++;
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	3301      	adds	r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (i);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e2      	bne.n	8001a54 <utos0+0x30>
    ptr--;
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	3b01      	subs	r3, #1
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (n++ <= digits) {
 8001a94:	e004      	b.n	8001aa0 <utos0+0x7c>
        *data++ = '0';
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60fa      	str	r2, [r7, #12]
 8001a9c:	2230      	movs	r2, #48	; 0x30
 8001a9e:	701a      	strb	r2, [r3, #0]
    while (n++ <= digits) {
 8001aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	62ba      	str	r2, [r7, #40]	; 0x28
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d2f4      	bcs.n	8001a96 <utos0+0x72>
    }
    while (*ptr) {
 8001aac:	e007      	b.n	8001abe <utos0+0x9a>
        *data++ = *ptr--;
 8001aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab0:	1e53      	subs	r3, r2, #1
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1c59      	adds	r1, r3, #1
 8001ab8:	60f9      	str	r1, [r7, #12]
 8001aba:	7812      	ldrb	r2, [r2, #0]
 8001abc:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f3      	bne.n	8001aae <utos0+0x8a>
    }
    *data = '\0';
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
    return data;
 8001acc:	68fb      	ldr	r3, [r7, #12]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3734      	adds	r7, #52	; 0x34
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	cccccccd 	.word	0xcccccccd

08001ae0 <ftos>:
 * @param[in]  i       The float
 * @param[in]  digits  The number of decimal places
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* ftos(char *data, float a, uint32_t dp) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001aec:	6079      	str	r1, [r7, #4]
    int32_t i = a;
 8001aee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af6:	ee17 3a90 	vmov	r3, s15
 8001afa:	61fb      	str	r3, [r7, #28]
    if (a < 0) {
 8001afc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	d515      	bpl.n	8001b36 <ftos+0x56>
        *data++ = '-';
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	222d      	movs	r2, #45	; 0x2d
 8001b12:	701a      	strb	r2, [r3, #0]
        i = -i;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	425b      	negs	r3, r3
 8001b18:	61fb      	str	r3, [r7, #28]
        a = -a - i;
 8001b1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b1e:	eeb1 7a67 	vneg.f32	s14, s15
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b30:	edc7 7a02 	vstr	s15, [r7, #8]
 8001b34:	e00a      	b.n	8001b4c <ftos+0x6c>
    } else {
        a = a - i;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    data = itos(data, i);
 8001b4c:	69f9      	ldr	r1, [r7, #28]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f7ff ff12 	bl	8001978 <itos>
 8001b54:	60f8      	str	r0, [r7, #12]
    *data++ = '.';
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	60fa      	str	r2, [r7, #12]
 8001b5c:	222e      	movs	r2, #46	; 0x2e
 8001b5e:	701a      	strb	r2, [r3, #0]
    float d = a;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
    uint32_t __dp = dp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	617b      	str	r3, [r7, #20]
    while (dp--) {
 8001b68:	e007      	b.n	8001b7a <ftos+0x9a>
        d *= 10;
 8001b6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b76:	edc7 7a06 	vstr	s15, [r7, #24]
    while (dp--) {
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f2      	bne.n	8001b6a <ftos+0x8a>
    }
    if (__dp != 0)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00e      	beq.n	8001ba8 <ftos+0xc8>
        data = utos0(data, (uint32_t) (d + 0.5f), __dp);
 8001b8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	ee17 1a90 	vmov	r1, s15
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff ff3f 	bl	8001a24 <utos0>
 8001ba6:	60f8      	str	r0, [r7, #12]
    return data;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <prints>:
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad) {
 8001bb2:	b4f0      	push	{r4, r5, r6, r7}
 8001bb4:	b08a      	sub	sp, #40	; 0x28
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	603b      	str	r3, [r7, #0]
    register int pc = 0, padchar = ' ';
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	4619      	mov	r1, r3

    if (width > 0) {
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	dd17      	ble.n	8001bfc <prints+0x4a>
        register int len = 0;
 8001bcc:	2500      	movs	r5, #0
        register const char *ptr;
        for (ptr = string; *ptr; ++ptr)
 8001bce:	68be      	ldr	r6, [r7, #8]
 8001bd0:	e001      	b.n	8001bd6 <prints+0x24>
            ++len;
 8001bd2:	3501      	adds	r5, #1
        for (ptr = string; *ptr; ++ptr)
 8001bd4:	3601      	adds	r6, #1
 8001bd6:	7833      	ldrb	r3, [r6, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1fa      	bne.n	8001bd2 <prints+0x20>
        if (len >= width)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	429d      	cmp	r5, r3
 8001be0:	db02      	blt.n	8001be8 <prints+0x36>
            width = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	e002      	b.n	8001bee <prints+0x3c>
        else
            width -= len;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	1b5b      	subs	r3, r3, r5
 8001bec:	607b      	str	r3, [r7, #4]
        if (pad & PAD_ZERO)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <prints+0x4a>
            padchar = '0';
 8001bf8:	2330      	movs	r3, #48	; 0x30
 8001bfa:	4619      	mov	r1, r3
    }
    if (!(pad & PAD_RIGHT)) {
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d12c      	bne.n	8001c60 <prints+0xae>
        for (; width > 0; --width) {
 8001c06:	e012      	b.n	8001c2e <prints+0x7c>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6a3a      	ldr	r2, [r7, #32]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	bf00      	nop
            printchar(out, padchar);
            ++pc;
 8001c26:	3401      	adds	r4, #1
        for (; width > 0; --width) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	dce9      	bgt.n	8001c08 <prints+0x56>
        }
    }
    for (; *string; ++string) {
 8001c34:	e014      	b.n	8001c60 <prints+0xae>
        printchar(out, *string);
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	601a      	str	r2, [r3, #0]
}
 8001c56:	bf00      	nop
        ++pc;
 8001c58:	3401      	adds	r4, #1
    for (; *string; ++string) {
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1e6      	bne.n	8001c36 <prints+0x84>
    }
    for (; width > 0; --width) {
 8001c68:	e012      	b.n	8001c90 <prints+0xde>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	613b      	str	r3, [r7, #16]
    **str = (char) c;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	601a      	str	r2, [r3, #0]
}
 8001c86:	bf00      	nop
        printchar(out, padchar);
        ++pc;
 8001c88:	3401      	adds	r4, #1
    for (; width > 0; --width) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	dce9      	bgt.n	8001c6a <prints+0xb8>
    }

    return pc;
 8001c96:	4623      	mov	r3, r4
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ca0:	4770      	bx	lr

08001ca2 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad,
        int letbase) {
 8001ca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ca6:	b08b      	sub	sp, #44	; 0x2c
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
    char print_buf[PRINT_BUF_LEN];
    register char *s;
    register int t, neg = 0, pc = 0;
 8001cb2:	f04f 0900 	mov.w	r9, #0
 8001cb6:	2600      	movs	r6, #0
    register unsigned int u = (unsigned int) i;
 8001cb8:	68bd      	ldr	r5, [r7, #8]

    if (i == 0) {
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10c      	bne.n	8001cda <printi+0x38>
        print_buf[0] = '0';
 8001cc0:	2330      	movs	r3, #48	; 0x30
 8001cc2:	753b      	strb	r3, [r7, #20]
        print_buf[1] = '\0';
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	757b      	strb	r3, [r7, #21]
        return prints(out, print_buf, width, pad);
 8001cc8:	f107 0114 	add.w	r1, r7, #20
 8001ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff ff6e 	bl	8001bb2 <prints>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	e055      	b.n	8001d86 <printi+0xe4>
    }

    if (sg && b == 10 && i < 0) {
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <printi+0x54>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b0a      	cmp	r3, #10
 8001ce4:	d107      	bne.n	8001cf6 <printi+0x54>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da04      	bge.n	8001cf6 <printi+0x54>
        neg = 1;
 8001cec:	f04f 0901 	mov.w	r9, #1
        u = (unsigned int) -i;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	461d      	mov	r5, r3
    }

    s = print_buf + PRINT_BUF_LEN - 1;
 8001cf6:	f107 0414 	add.w	r4, r7, #20
 8001cfa:	340b      	adds	r4, #11
    *s = '\0';
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	7023      	strb	r3, [r4, #0]

    while (u) {
 8001d00:	e015      	b.n	8001d2e <printi+0x8c>
        t = (unsigned int) u % b;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	fbb5 f2f3 	udiv	r2, r5, r3
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	1aeb      	subs	r3, r5, r3
 8001d0e:	4698      	mov	r8, r3
        if (t >= 10)
 8001d10:	f1b8 0f09 	cmp.w	r8, #9
 8001d14:	dd02      	ble.n	8001d1c <printi+0x7a>
            t += letbase - '0' - 10;
 8001d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d18:	3b3a      	subs	r3, #58	; 0x3a
 8001d1a:	4498      	add	r8, r3
        *--s = (char) (t + '0');
 8001d1c:	fa5f f388 	uxtb.w	r3, r8
 8001d20:	3c01      	subs	r4, #1
 8001d22:	3330      	adds	r3, #48	; 0x30
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	7023      	strb	r3, [r4, #0]
        u /= b;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	fbb5 f5f3 	udiv	r5, r5, r3
    while (u) {
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	d1e7      	bne.n	8001d02 <printi+0x60>
    }

    if (neg) {
 8001d32:	f1b9 0f00 	cmp.w	r9, #0
 8001d36:	d01e      	beq.n	8001d76 <printi+0xd4>
        if (width && (pad & PAD_ZERO)) {
 8001d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d018      	beq.n	8001d70 <printi+0xce>
 8001d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <printi+0xce>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	232d      	movs	r3, #45	; 0x2d
 8001d4e:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a3a      	ldr	r2, [r7, #32]
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	bf00      	nop
            printchar(out, '-');
            ++pc;
 8001d66:	3601      	adds	r6, #1
            --width;
 8001d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d6e:	e002      	b.n	8001d76 <printi+0xd4>
        } else {
            *--s = '-';
 8001d70:	3c01      	subs	r4, #1
 8001d72:	232d      	movs	r3, #45	; 0x2d
 8001d74:	7023      	strb	r3, [r4, #0]
        }
    }

    return pc + prints(out, s, width, pad);
 8001d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff ff18 	bl	8001bb2 <prints>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4433      	add	r3, r6
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	372c      	adds	r7, #44	; 0x2c
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001d90 <printf_>:

static int printf_(char **out, float f, int width, int dp, int pad) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b090      	sub	sp, #64	; 0x40
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6178      	str	r0, [r7, #20]
 8001d98:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d9c:	60f9      	str	r1, [r7, #12]
 8001d9e:	60ba      	str	r2, [r7, #8]
 8001da0:	607b      	str	r3, [r7, #4]
    char buf[40] = { 0 };
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	2224      	movs	r2, #36	; 0x24
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f005 ffdc 	bl	8007d6c <memset>
    ftos(buf, f, dp);
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	4611      	mov	r1, r2
 8001dbc:	ed97 0a04 	vldr	s0, [r7, #16]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fe8d 	bl	8001ae0 <ftos>
    return prints(out, buf, width, pad);
 8001dc6:	f107 0118 	add.w	r1, r7, #24
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff feef 	bl	8001bb2 <prints>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3740      	adds	r7, #64	; 0x40
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <print>:
 * @param out pointer to Output string
 * @param format Format string
 * @param args Arguments
 * @return length of string
 */
static int print(char **out, const char *format, va_list args) {
 8001de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001de4:	b08c      	sub	sp, #48	; 0x30
 8001de6:	af04      	add	r7, sp, #16
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
    register int width, pad, dp;
    register int pc = 0;
 8001dee:	2400      	movs	r4, #0
    char scr[2];

    for (; *format != 0; ++format) {
 8001df0:	e109      	b.n	8002006 <print+0x226>
        if (*format == '%') {
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b25      	cmp	r3, #37	; 0x25
 8001df8:	f040 80ed 	bne.w	8001fd6 <print+0x1f6>
            ++format;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
            width = pad = dp = 0;
 8001e02:	f04f 0800 	mov.w	r8, #0
 8001e06:	4646      	mov	r6, r8
 8001e08:	4635      	mov	r5, r6
            if (*format == '\0')
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80ff 	beq.w	8002012 <print+0x232>
                break;
            if (*format == '%')
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b25      	cmp	r3, #37	; 0x25
 8001e1a:	f000 80de 	beq.w	8001fda <print+0x1fa>
                goto out;
            if (*format == '-') {
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b2d      	cmp	r3, #45	; 0x2d
 8001e24:	d109      	bne.n	8001e3a <print+0x5a>
                ++format;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
                pad = PAD_RIGHT;
 8001e2c:	2601      	movs	r6, #1
            }
            while (*format == '0') {
 8001e2e:	e004      	b.n	8001e3a <print+0x5a>
                ++format;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
                pad |= PAD_ZERO;
 8001e36:	f046 0602 	orr.w	r6, r6, #2
            while (*format == '0') {
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b30      	cmp	r3, #48	; 0x30
 8001e40:	d0f6      	beq.n	8001e30 <print+0x50>
            }
            for (; *format >= '0' && *format <= '9'; ++format) {
 8001e42:	e00b      	b.n	8001e5c <print+0x7c>
                width *= 10;
 8001e44:	462b      	mov	r3, r5
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	442b      	add	r3, r5
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	461d      	mov	r5, r3
                width += *format - '0';
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	3b30      	subs	r3, #48	; 0x30
 8001e54:	441d      	add	r5, r3
            for (; *format >= '0' && *format <= '9'; ++format) {
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b2f      	cmp	r3, #47	; 0x2f
 8001e62:	d903      	bls.n	8001e6c <print+0x8c>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b39      	cmp	r3, #57	; 0x39
 8001e6a:	d9eb      	bls.n	8001e44 <print+0x64>
            }
            if (*format == '.') {
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b2e      	cmp	r3, #46	; 0x2e
 8001e72:	d117      	bne.n	8001ea4 <print+0xc4>
                ++format;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	3301      	adds	r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]
                for (; *format >= '0' && *format <= '9'; ++format) {
 8001e7a:	e00b      	b.n	8001e94 <print+0xb4>
                    dp *= 10;
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4443      	add	r3, r8
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4698      	mov	r8, r3
                    dp += *format - '0';
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	3b30      	subs	r3, #48	; 0x30
 8001e8c:	4498      	add	r8, r3
                for (; *format >= '0' && *format <= '9'; ++format) {
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b2f      	cmp	r3, #47	; 0x2f
 8001e9a:	d903      	bls.n	8001ea4 <print+0xc4>
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b39      	cmp	r3, #57	; 0x39
 8001ea2:	d9eb      	bls.n	8001e7c <print+0x9c>
                }
            }
            if (*format == 's') {
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b73      	cmp	r3, #115	; 0x73
 8001eaa:	d112      	bne.n	8001ed2 <print+0xf2>
                register char *s = (char*) va_arg(args, int);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	1d1a      	adds	r2, r3, #4
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4698      	mov	r8, r3
                pc += prints(out, s ? s : "(null)", width, pad);
 8001eb6:	f1b8 0f00 	cmp.w	r8, #0
 8001eba:	d001      	beq.n	8001ec0 <print+0xe0>
 8001ebc:	4641      	mov	r1, r8
 8001ebe:	e000      	b.n	8001ec2 <print+0xe2>
 8001ec0:	4957      	ldr	r1, [pc, #348]	; (8002020 <print+0x240>)
 8001ec2:	4633      	mov	r3, r6
 8001ec4:	462a      	mov	r2, r5
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f7ff fe73 	bl	8001bb2 <prints>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	441c      	add	r4, r3
                continue;
 8001ed0:	e096      	b.n	8002000 <print+0x220>
            }
            if (*format == 'd') {
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d10f      	bne.n	8001efa <print+0x11a>
                pc += printi(out, va_arg(args, int), 10, 1, width, pad, 'a');
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	1d1a      	adds	r2, r3, #4
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	6819      	ldr	r1, [r3, #0]
 8001ee2:	2361      	movs	r3, #97	; 0x61
 8001ee4:	9302      	str	r3, [sp, #8]
 8001ee6:	9601      	str	r6, [sp, #4]
 8001ee8:	9500      	str	r5, [sp, #0]
 8001eea:	2301      	movs	r3, #1
 8001eec:	220a      	movs	r2, #10
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7ff fed7 	bl	8001ca2 <printi>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	441c      	add	r4, r3
                continue;
 8001ef8:	e082      	b.n	8002000 <print+0x220>
            }
            if (*format == 'x') {
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b78      	cmp	r3, #120	; 0x78
 8001f00:	d10f      	bne.n	8001f22 <print+0x142>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'a');
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1d1a      	adds	r2, r3, #4
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	2361      	movs	r3, #97	; 0x61
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	9601      	str	r6, [sp, #4]
 8001f10:	9500      	str	r5, [sp, #0]
 8001f12:	2300      	movs	r3, #0
 8001f14:	2210      	movs	r2, #16
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7ff fec3 	bl	8001ca2 <printi>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	441c      	add	r4, r3
                continue;
 8001f20:	e06e      	b.n	8002000 <print+0x220>
            }
            if (*format == 'X') {
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b58      	cmp	r3, #88	; 0x58
 8001f28:	d10f      	bne.n	8001f4a <print+0x16a>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'A');
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	1d1a      	adds	r2, r3, #4
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	2341      	movs	r3, #65	; 0x41
 8001f34:	9302      	str	r3, [sp, #8]
 8001f36:	9601      	str	r6, [sp, #4]
 8001f38:	9500      	str	r5, [sp, #0]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f7ff feaf 	bl	8001ca2 <printi>
 8001f44:	4603      	mov	r3, r0
 8001f46:	441c      	add	r4, r3
                continue;
 8001f48:	e05a      	b.n	8002000 <print+0x220>
            }
            if (*format == 'u') {
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b75      	cmp	r3, #117	; 0x75
 8001f50:	d10f      	bne.n	8001f72 <print+0x192>
                pc += printi(out, va_arg(args, int), 10, 0, width, pad, 'a');
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	1d1a      	adds	r2, r3, #4
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	2361      	movs	r3, #97	; 0x61
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	9601      	str	r6, [sp, #4]
 8001f60:	9500      	str	r5, [sp, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	220a      	movs	r2, #10
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff fe9b 	bl	8001ca2 <printi>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	441c      	add	r4, r3
                continue;
 8001f70:	e046      	b.n	8002000 <print+0x220>
            }
            if (*format == 'c') {
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b63      	cmp	r3, #99	; 0x63
 8001f78:	d111      	bne.n	8001f9e <print+0x1be>
                /* char are converted to int then pushed on the stack */
                scr[0] = (char) va_arg(args, int);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	1d1a      	adds	r2, r3, #4
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	753b      	strb	r3, [r7, #20]
                scr[1] = '\0';
 8001f86:	2300      	movs	r3, #0
 8001f88:	757b      	strb	r3, [r7, #21]
                pc += prints(out, scr, width, pad);
 8001f8a:	f107 0114 	add.w	r1, r7, #20
 8001f8e:	4633      	mov	r3, r6
 8001f90:	462a      	mov	r2, r5
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff fe0d 	bl	8001bb2 <prints>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	441c      	add	r4, r3
                continue;
 8001f9c:	e030      	b.n	8002000 <print+0x220>
            }
            if (*format == 'f') {
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b66      	cmp	r3, #102	; 0x66
 8001fa4:	d12c      	bne.n	8002000 <print+0x220>
                pc += printf_(out, va_arg(args, double), width, dp, pad);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3307      	adds	r3, #7
 8001faa:	f023 0307 	bic.w	r3, r3, #7
 8001fae:	f103 0208 	add.w	r2, r3, #8
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fac0 	bl	8000540 <__aeabi_d2f>
 8001fc0:	4633      	mov	r3, r6
 8001fc2:	4642      	mov	r2, r8
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	ee00 0a10 	vmov	s0, r0
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fee0 	bl	8001d90 <printf_>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	441c      	add	r4, r3
                continue;
 8001fd4:	e014      	b.n	8002000 <print+0x220>
            }
        } else {
            out: printchar(out, *format);
 8001fd6:	bf00      	nop
 8001fd8:	e000      	b.n	8001fdc <print+0x1fc>
                goto out;
 8001fda:	bf00      	nop
            out: printchar(out, *format);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	601a      	str	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
            ++pc;
 8001ffe:	3401      	adds	r4, #1
    for (; *format != 0; ++format) {
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3301      	adds	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f47f aef1 	bne.w	8001df2 <print+0x12>
 8002010:	e000      	b.n	8002014 <print+0x234>
                break;
 8002012:	bf00      	nop
        }
    }
    va_end(args);
    return pc;
 8002014:	4623      	mov	r3, r4
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002020:	08007d94 	.word	0x08007d94

08002024 <write_command>:
uint8_t buf_ptr = 0;
static uint8_t tft_dma_bufs[2][TFT_DMA_BUF_SIZE];
#define curr_tft_dma_buf tft_dma_bufs[buf_ptr]

/* TFT SPI communication - with MCU */
static inline void write_command(uint8_t command) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 800202e:	bf00      	nop
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <write_command+0x40>)
 8002032:	f004 fa09 	bl	8006448 <HAL_SPI_GetState>
 8002036:	4603      	mov	r3, r0
 8002038:	2b01      	cmp	r3, #1
 800203a:	d1f9      	bne.n	8002030 <write_command+0xc>
        // wait for the spi to be ready
        ;

    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET); // Data-Command Pin 0-Command 1-Data
 800203c:	2200      	movs	r2, #0
 800203e:	2110      	movs	r1, #16
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <write_command+0x44>)
 8002042:	f003 f83f 	bl	80050c4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) &command, 1, 1);
 8002046:	1df9      	adds	r1, r7, #7
 8002048:	2301      	movs	r3, #1
 800204a:	2201      	movs	r2, #1
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <write_command+0x40>)
 800204e:	f003 feea 	bl	8005e26 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8002052:	2201      	movs	r2, #1
 8002054:	2110      	movs	r1, #16
 8002056:	4804      	ldr	r0, [pc, #16]	; (8002068 <write_command+0x44>)
 8002058:	f003 f834 	bl	80050c4 <HAL_GPIO_WritePin>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200057dc 	.word	0x200057dc
 8002068:	40020800 	.word	0x40020800

0800206c <write_data>:
static inline void write_data(uint8_t *data, uint16_t size) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) data, size, 1);
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	2301      	movs	r3, #1
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4803      	ldr	r0, [pc, #12]	; (800208c <write_data+0x20>)
 8002080:	f003 fed1 	bl	8005e26 <HAL_SPI_Transmit>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200057dc 	.word	0x200057dc

08002090 <write_many>:
static inline void write_many(uint8_t command, uint8_t *data, uint16_t size) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ffbe 	bl	8002024 <write_command>
    write_data(data, size);
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	4619      	mov	r1, r3
 80020ac:	6838      	ldr	r0, [r7, #0]
 80020ae:	f7ff ffdd 	bl	800206c <write_data>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <write_many_dma>:
static inline void write_many_dma(uint8_t command, uint8_t *data, uint16_t size) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
 80020c8:	4613      	mov	r3, r2
 80020ca:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ffa8 	bl	8002024 <write_command>
    HAL_SPI_Transmit_DMA(&TFT_SPI, (uint8_t*) data, size);
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	461a      	mov	r2, r3
 80020d8:	6839      	ldr	r1, [r7, #0]
 80020da:	4803      	ldr	r0, [pc, #12]	; (80020e8 <write_many_dma+0x2c>)
 80020dc:	f003 ffe0 	bl	80060a0 <HAL_SPI_Transmit_DMA>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200057dc 	.word	0x200057dc

080020ec <write_byte>:
static inline void write_byte(uint8_t command, uint8_t data) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	460a      	mov	r2, r1
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71bb      	strb	r3, [r7, #6]
    write_command(command);
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff90 	bl	8002024 <write_command>
    write_data(&data, 1);
 8002104:	1dbb      	adds	r3, r7, #6
 8002106:	2101      	movs	r1, #1
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ffaf 	bl	800206c <write_data>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <write_2hword>:
static inline void write_2hword(uint8_t command, uint16_t a, uint16_t b) {
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
 8002120:	460b      	mov	r3, r1
 8002122:	80bb      	strh	r3, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	807b      	strh	r3, [r7, #2]
    write_command(command);
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff7a 	bl	8002024 <write_command>
    uint8_t buf[4] = { a >> 8, a & 0xFF, b >> 8, b & 0xFF };
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b29b      	uxth	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	733b      	strb	r3, [r7, #12]
 800213a:	88bb      	ldrh	r3, [r7, #4]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	737b      	strb	r3, [r7, #13]
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	b29b      	uxth	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	73bb      	strb	r3, [r7, #14]
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	73fb      	strb	r3, [r7, #15]
    write_data(buf, 4);
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2104      	movs	r1, #4
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff88 	bl	800206c <write_data>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <tft_clear>:

/**
 * @brief Clear the whole text buffer
 *
 */
static inline void tft_clear(void) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 800216a:	2300      	movs	r3, #0
 800216c:	71fb      	strb	r3, [r7, #7]
 800216e:	e023      	b.n	80021b8 <tft_clear+0x54>
        for (uint8_t x = 0; x < char_max_x; x++) {
 8002170:	2300      	movs	r3, #0
 8002172:	71bb      	strb	r3, [r7, #6]
 8002174:	e018      	b.n	80021a8 <tft_clear+0x44>
            curr_text_buf[TFT_XY(x, y)] = ' ';
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <tft_clear+0x6c>)
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <tft_clear+0x6c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <tft_clear+0x70>)
 8002186:	7812      	ldrb	r2, [r2, #0]
 8002188:	fb03 f202 	mul.w	r2, r3, r2
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	441a      	add	r2, r3
 8002190:	4603      	mov	r3, r0
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4403      	add	r3, r0
 8002196:	015b      	lsls	r3, r3, #5
 8002198:	440b      	add	r3, r1
 800219a:	4413      	add	r3, r2
 800219c:	3301      	adds	r3, #1
 800219e:	2220      	movs	r2, #32
 80021a0:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < char_max_x; x++) {
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	3301      	adds	r3, #1
 80021a6:	71bb      	strb	r3, [r7, #6]
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <tft_clear+0x70>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	79ba      	ldrb	r2, [r7, #6]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d3e1      	bcc.n	8002176 <tft_clear+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	3301      	adds	r3, #1
 80021b6:	71fb      	strb	r3, [r7, #7]
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <tft_clear+0x74>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	79fa      	ldrb	r2, [r7, #7]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d3d6      	bcc.n	8002170 <tft_clear+0xc>
        }
    }
}
 80021c2:	bf00      	nop
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	200000a8 	.word	0x200000a8
 80021d4:	20000189 	.word	0x20000189
 80021d8:	2000018a 	.word	0x2000018a

080021dc <tft_clear_full>:

/**
 * @brief Clear the whole text buffer and color buffers
 *
 */
static inline void tft_clear_full(void) {
 80021dc:	b490      	push	{r4, r7}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 80021e2:	2300      	movs	r3, #0
 80021e4:	71fb      	strb	r3, [r7, #7]
 80021e6:	e050      	b.n	800228a <tft_clear_full+0xae>
        for (uint8_t x = 0; x < char_max_x; x++) {
 80021e8:	2300      	movs	r3, #0
 80021ea:	71bb      	strb	r3, [r7, #6]
 80021ec:	e045      	b.n	800227a <tft_clear_full+0x9e>
            uint16_t idx = TFT_XY(x, y);
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <tft_clear_full+0xc4>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	fb12 f303 	smulbb	r3, r2, r3
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	79bb      	ldrb	r3, [r7, #6]
 8002200:	b29b      	uxth	r3, r3
 8002202:	4413      	add	r3, r2
 8002204:	80bb      	strh	r3, [r7, #4]
            curr_text_buf[idx] = ' ';
 8002206:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <tft_clear_full+0xc8>)
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <tft_clear_full+0xc8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	88ba      	ldrh	r2, [r7, #4]
 8002214:	4603      	mov	r3, r0
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4403      	add	r3, r0
 800221a:	015b      	lsls	r3, r3, #5
 800221c:	440b      	add	r3, r1
 800221e:	4413      	add	r3, r2
 8002220:	3301      	adds	r3, #1
 8002222:	2220      	movs	r2, #32
 8002224:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[idx] = curr_text_color;
 8002226:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <tft_clear_full+0xc8>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <tft_clear_full+0xc8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	88b9      	ldrh	r1, [r7, #4]
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <tft_clear_full+0xcc>)
 8002236:	881c      	ldrh	r4, [r3, #0]
 8002238:	4603      	mov	r3, r0
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4403      	add	r3, r0
 800223e:	015b      	lsls	r3, r3, #5
 8002240:	440b      	add	r3, r1
 8002242:	33a0      	adds	r3, #160	; 0xa0
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	4622      	mov	r2, r4
 800224a:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[idx] = curr_bg_color;
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <tft_clear_full+0xc8>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <tft_clear_full+0xc8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	88b9      	ldrh	r1, [r7, #4]
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <tft_clear_full+0xd0>)
 800225c:	881c      	ldrh	r4, [r3, #0]
 800225e:	4603      	mov	r3, r0
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4403      	add	r3, r0
 8002264:	015b      	lsls	r3, r3, #5
 8002266:	440b      	add	r3, r1
 8002268:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	4622      	mov	r2, r4
 8002272:	805a      	strh	r2, [r3, #2]
        for (uint8_t x = 0; x < char_max_x; x++) {
 8002274:	79bb      	ldrb	r3, [r7, #6]
 8002276:	3301      	adds	r3, #1
 8002278:	71bb      	strb	r3, [r7, #6]
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <tft_clear_full+0xc4>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	79ba      	ldrb	r2, [r7, #6]
 8002280:	429a      	cmp	r2, r3
 8002282:	d3b4      	bcc.n	80021ee <tft_clear_full+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	3301      	adds	r3, #1
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <tft_clear_full+0xd4>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	79fa      	ldrb	r2, [r7, #7]
 8002290:	429a      	cmp	r2, r3
 8002292:	d3a9      	bcc.n	80021e8 <tft_clear_full+0xc>
        }
    }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bc90      	pop	{r4, r7}
 800229e:	4770      	bx	lr
 80022a0:	20000189 	.word	0x20000189
 80022a4:	200000a8 	.word	0x200000a8
 80022a8:	20000184 	.word	0x20000184
 80022ac:	20000180 	.word	0x20000180
 80022b0:	2000018a 	.word	0x2000018a

080022b4 <tft_set_region>:

static inline void tft_set_region(uint16_t x, uint16_t y, uint16_t w,
        uint16_t h) {
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4604      	mov	r4, r0
 80022bc:	4608      	mov	r0, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	80fb      	strh	r3, [r7, #6]
 80022c6:	4603      	mov	r3, r0
 80022c8:	80bb      	strh	r3, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	807b      	strh	r3, [r7, #2]
 80022ce:	4613      	mov	r3, r2
 80022d0:	803b      	strh	r3, [r7, #0]
    uint16_t startx = x;
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	81fb      	strh	r3, [r7, #14]
    uint16_t starty = y;
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	81bb      	strh	r3, [r7, #12]
    uint16_t endx = x + w;
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	4413      	add	r3, r2
 80022e0:	817b      	strh	r3, [r7, #10]
    uint16_t endy = y + h;
 80022e2:	88ba      	ldrh	r2, [r7, #4]
 80022e4:	883b      	ldrh	r3, [r7, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	813b      	strh	r3, [r7, #8]

#ifdef MODEL_ST7735
    startx += col_shift;
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <tft_set_region+0x88>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	4413      	add	r3, r2
 80022f4:	81fb      	strh	r3, [r7, #14]
    starty += row_shift;
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <tft_set_region+0x8c>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	89bb      	ldrh	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	81bb      	strh	r3, [r7, #12]
    endx += col_shift;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <tft_set_region+0x88>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	b29a      	uxth	r2, r3
 8002308:	897b      	ldrh	r3, [r7, #10]
 800230a:	4413      	add	r3, r2
 800230c:	817b      	strh	r3, [r7, #10]
    endy += row_shift;
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <tft_set_region+0x8c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	b29a      	uxth	r2, r3
 8002314:	893b      	ldrh	r3, [r7, #8]
 8002316:	4413      	add	r3, r2
 8002318:	813b      	strh	r3, [r7, #8]
#endif

    write_2hword(0x2a, startx, endx);  // Column addr set
 800231a:	897a      	ldrh	r2, [r7, #10]
 800231c:	89fb      	ldrh	r3, [r7, #14]
 800231e:	4619      	mov	r1, r3
 8002320:	202a      	movs	r0, #42	; 0x2a
 8002322:	f7ff fef8 	bl	8002116 <write_2hword>
    write_2hword(0x2b, starty, endy);  // Row addr set
 8002326:	893a      	ldrh	r2, [r7, #8]
 8002328:	89bb      	ldrh	r3, [r7, #12]
 800232a:	4619      	mov	r1, r3
 800232c:	202b      	movs	r0, #43	; 0x2b
 800232e:	f7ff fef2 	bl	8002116 <write_2hword>
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}
 800233a:	bf00      	nop
 800233c:	200007ce 	.word	0x200007ce
 8002340:	200007cf 	.word	0x200007cf

08002344 <tft_init>:
 * @param  text_color: default text color
 * @param  text_color_sp: default special text color
 * @param  highlight_color: default highlight color
 */
void tft_init(TFT_ORIENTATION orientation, uint16_t bg_color,
        uint16_t text_color, uint16_t text_color_sp, uint16_t highlight_color) {
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	4604      	mov	r4, r0
 800234c:	4608      	mov	r0, r1
 800234e:	4611      	mov	r1, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4623      	mov	r3, r4
 8002354:	71fb      	strb	r3, [r7, #7]
 8002356:	4603      	mov	r3, r0
 8002358:	80bb      	strh	r3, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	807b      	strh	r3, [r7, #2]
 800235e:	4613      	mov	r3, r2
 8002360:	803b      	strh	r3, [r7, #0]
    curr_screen = 0;
 8002362:	4b6e      	ldr	r3, [pc, #440]	; (800251c <tft_init+0x1d8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
    tft_orientation = orientation;
 800236a:	4a6d      	ldr	r2, [pc, #436]	; (8002520 <tft_init+0x1dc>)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	7013      	strb	r3, [r2, #0]

    char_max_x =
            (orientation % 2) ? CHAR_MAX_X_HORIZONTAL : CHAR_MAX_X_VERTICAL;
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
    char_max_x =
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <tft_init+0x3c>
 800237c:	2214      	movs	r2, #20
 800237e:	e000      	b.n	8002382 <tft_init+0x3e>
 8002380:	2210      	movs	r2, #16
 8002382:	4b68      	ldr	r3, [pc, #416]	; (8002524 <tft_init+0x1e0>)
 8002384:	701a      	strb	r2, [r3, #0]
    char_max_y =
            (orientation % 2) ? CHAR_MAX_Y_HORIZONTAL : CHAR_MAX_Y_VERTICAL;
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
    char_max_y =
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <tft_init+0x52>
 8002392:	2208      	movs	r2, #8
 8002394:	e000      	b.n	8002398 <tft_init+0x54>
 8002396:	220a      	movs	r2, #10
 8002398:	4b63      	ldr	r3, [pc, #396]	; (8002528 <tft_init+0x1e4>)
 800239a:	701a      	strb	r2, [r3, #0]

    TFT_SPI_INIT();
 800239c:	f001 fa5c 	bl	8003858 <MX_SPI1_Init>

    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2140      	movs	r1, #64	; 0x40
 80023a4:	4861      	ldr	r0, [pc, #388]	; (800252c <tft_init+0x1e8>)
 80023a6:	f002 fe8d 	bl	80050c4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80023aa:	2064      	movs	r0, #100	; 0x64
 80023ac:	f001 ff12 	bl	80041d4 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2140      	movs	r1, #64	; 0x40
 80023b4:	485d      	ldr	r0, [pc, #372]	; (800252c <tft_init+0x1e8>)
 80023b6:	f002 fe85 	bl	80050c4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80023ba:	2064      	movs	r0, #100	; 0x64
 80023bc:	f001 ff0a 	bl	80041d4 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 80023c0:	2201      	movs	r2, #1
 80023c2:	2140      	movs	r1, #64	; 0x40
 80023c4:	4859      	ldr	r0, [pc, #356]	; (800252c <tft_init+0x1e8>)
 80023c6:	f002 fe7d 	bl	80050c4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80023ca:	2064      	movs	r0, #100	; 0x64
 80023cc:	f001 ff02 	bl	80041d4 <HAL_Delay>

    HAL_GPIO_WritePin(TFT_BL_GPIO_Port, TFT_BL_Pin, GPIO_PIN_SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	2101      	movs	r1, #1
 80023d4:	4856      	ldr	r0, [pc, #344]	; (8002530 <tft_init+0x1ec>)
 80023d6:	f002 fe75 	bl	80050c4 <HAL_GPIO_WritePin>

#if defined(TFT_CS_Pin) && !defined(MODEL_ST7735)
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
#endif

    uint32_t i = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 80023de:	e058      	b.n	8002492 <tft_init+0x14e>
        if (tft_init_code[i] == TFT_ORIENTATION_CMD) {
 80023e0:	4a54      	ldr	r2, [pc, #336]	; (8002534 <tft_init+0x1f0>)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4413      	add	r3, r2
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b36      	cmp	r3, #54	; 0x36
 80023ea:	d110      	bne.n	800240e <tft_init+0xca>
            write_byte(tft_init_code[i],
 80023ec:	4a51      	ldr	r2, [pc, #324]	; (8002534 <tft_init+0x1f0>)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4a4a      	ldr	r2, [pc, #296]	; (8002520 <tft_init+0x1dc>)
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4a4f      	ldr	r2, [pc, #316]	; (8002538 <tft_init+0x1f4>)
 80023fc:	5c52      	ldrb	r2, [r2, r1]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fe73 	bl	80020ec <write_byte>
                    tft_orientation_init_code[tft_orientation]);
            i++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3301      	adds	r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e041      	b.n	8002492 <tft_init+0x14e>
        } else if (tft_init_code[i] == TFT_DELAY_MARKER) {
 800240e:	4a49      	ldr	r2, [pc, #292]	; (8002534 <tft_init+0x1f0>)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2bff      	cmp	r3, #255	; 0xff
 8002418:	d10a      	bne.n	8002430 <tft_init+0xec>
            i += 3;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3303      	adds	r3, #3
 800241e:	60fb      	str	r3, [r7, #12]
            HAL_Delay(tft_init_code[i]);
 8002420:	4a44      	ldr	r2, [pc, #272]	; (8002534 <tft_init+0x1f0>)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4413      	add	r3, r2
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f001 fed3 	bl	80041d4 <HAL_Delay>
 800242e:	e030      	b.n	8002492 <tft_init+0x14e>
        } else if (tft_init_code[i + 1] == TFT_EOL_MARKER) {
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3301      	adds	r3, #1
 8002434:	4a3f      	ldr	r2, [pc, #252]	; (8002534 <tft_init+0x1f0>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	2b43      	cmp	r3, #67	; 0x43
 800243a:	d10a      	bne.n	8002452 <tft_init+0x10e>
            write_command(tft_init_code[i]);
 800243c:	4a3d      	ldr	r2, [pc, #244]	; (8002534 <tft_init+0x1f0>)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4413      	add	r3, r2
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fded 	bl	8002024 <write_command>
            i++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3301      	adds	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e01f      	b.n	8002492 <tft_init+0x14e>
        } else {
            int len;
            for (len = 0; tft_init_code[i + len + 1] != TFT_EOL_MARKER; len++) {
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	e002      	b.n	800245e <tft_init+0x11a>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3301      	adds	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	3301      	adds	r3, #1
 8002466:	4a33      	ldr	r2, [pc, #204]	; (8002534 <tft_init+0x1f0>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	2b43      	cmp	r3, #67	; 0x43
 800246c:	d1f4      	bne.n	8002458 <tft_init+0x114>
            }
            write_many(tft_init_code[i], (uint8_t*) &tft_init_code[i + 1], len);
 800246e:	4a31      	ldr	r2, [pc, #196]	; (8002534 <tft_init+0x1f0>)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	7818      	ldrb	r0, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3301      	adds	r3, #1
 800247a:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <tft_init+0x1f0>)
 800247c:	4413      	add	r3, r2
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	b292      	uxth	r2, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7ff fe04 	bl	8002090 <write_many>
            i += len + 1;
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3301      	adds	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	4a26      	ldr	r2, [pc, #152]	; (8002534 <tft_init+0x1f0>)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b42      	cmp	r3, #66	; 0x42
 80024a2:	d19d      	bne.n	80023e0 <tft_init+0x9c>
        }
    }

#ifdef MODEL_ST7735
    switch (tft_orientation) {
 80024a4:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <tft_init+0x1dc>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d01a      	beq.n	80024e2 <tft_init+0x19e>
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	dc03      	bgt.n	80024b8 <tft_init+0x174>
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d008      	beq.n	80024c6 <tft_init+0x182>
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d00d      	beq.n	80024d4 <tft_init+0x190>
    default:
    case 0:
        col_shift = 2;
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <tft_init+0x1f8>)
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
        row_shift = 1;
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <tft_init+0x1fc>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
        break;
 80024c4:	e014      	b.n	80024f0 <tft_init+0x1ac>
    case 1:
        col_shift = 1;
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <tft_init+0x1f8>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <tft_init+0x1fc>)
 80024ce:	2202      	movs	r2, #2
 80024d0:	701a      	strb	r2, [r3, #0]
        break;
 80024d2:	e00d      	b.n	80024f0 <tft_init+0x1ac>
    case 2:
        col_shift = 2;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <tft_init+0x1f8>)
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <tft_init+0x1fc>)
 80024dc:	2202      	movs	r2, #2
 80024de:	701a      	strb	r2, [r3, #0]
        break;
 80024e0:	e006      	b.n	80024f0 <tft_init+0x1ac>
    case 3:
        col_shift = 1;
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <tft_init+0x1f8>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <tft_init+0x1fc>)
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]
        break;
 80024ee:	bf00      	nop
    }
#endif

    tft_set_bg_color(bg_color);
 80024f0:	88bb      	ldrh	r3, [r7, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f826 	bl	8002544 <tft_set_bg_color>
    tft_set_text_color(text_color);
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f842 	bl	8002584 <tft_set_text_color>
    tft_set_special_color(text_color_sp);
 8002500:	883b      	ldrh	r3, [r7, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f84e 	bl	80025a4 <tft_set_special_color>
    tft_set_highlight_color(highlight_color);
 8002508:	8c3b      	ldrh	r3, [r7, #32]
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f82a 	bl	8002564 <tft_set_highlight_color>

    tft_force_clear();
 8002510:	f000 f858 	bl	80025c4 <tft_force_clear>
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}
 800251c:	200000a8 	.word	0x200000a8
 8002520:	20000188 	.word	0x20000188
 8002524:	20000189 	.word	0x20000189
 8002528:	2000018a 	.word	0x2000018a
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	08008c20 	.word	0x08008c20
 8002538:	08008c94 	.word	0x08008c94
 800253c:	200007ce 	.word	0x200007ce
 8002540:	200007cf 	.word	0x200007cf

08002544 <tft_set_bg_color>:
/**
 * @brief Set current background color
 *
 * @param bg_color (BLACK, BLUE, RED, ...)
 */
void tft_set_bg_color(uint16_t bg_color) {
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
    curr_bg_color = bg_color;
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <tft_set_bg_color+0x1c>)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	8013      	strh	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20000180 	.word	0x20000180

08002564 <tft_set_highlight_color>:
/**
 * @brief Set current highlight color
 *
 * @param highlight_color (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_highlight_color(uint16_t highlight_color) {
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
    curr_highlight_color = highlight_color;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <tft_set_highlight_color+0x1c>)
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	8013      	strh	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	20000182 	.word	0x20000182

08002584 <tft_set_text_color>:
/**
 * @brief Set current text color
 *
 * @param text_color (WHITE, SKYBLUE, GREEN, ...)
 */
void tft_set_text_color(uint16_t text_color) {
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]
    curr_text_color = text_color;
 800258e:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <tft_set_text_color+0x1c>)
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	8013      	strh	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	20000184 	.word	0x20000184

080025a4 <tft_set_special_color>:
/**
 * @brief Set current special text color
 *
 * @param text_color_sp (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_special_color(uint16_t text_color_sp) {
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
    curr_text_color_sp = text_color_sp;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <tft_set_special_color+0x1c>)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	8013      	strh	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	20000186 	.word	0x20000186

080025c4 <tft_force_clear>:

/**
 * @brief  Clear every pixels on the screen
 */
void tft_force_clear(void) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af02      	add	r7, sp, #8
    tft_clear_full();
 80025ca:	f7ff fe07 	bl	80021dc <tft_clear_full>
    tft_update(0);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f000 fb22 	bl	8002c18 <tft_update>
    tft_clear_full();
 80025d4:	f7ff fe02 	bl	80021dc <tft_clear_full>
    if (tft_orientation % 2)
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <tft_force_clear+0x50>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <tft_force_clear+0x36>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_HEIGHT, MAX_WIDTH);
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <tft_force_clear+0x54>)
 80025e8:	8818      	ldrh	r0, [r3, #0]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	23a0      	movs	r3, #160	; 0xa0
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	f000 fa5a 	bl	8002aac <tft_print_rectangle>
    else
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
}
 80025f8:	e008      	b.n	800260c <tft_force_clear+0x48>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <tft_force_clear+0x54>)
 80025fc:	8818      	ldrh	r0, [r3, #0]
 80025fe:	23a0      	movs	r3, #160	; 0xa0
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	f000 fa50 	bl	8002aac <tft_print_rectangle>
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000188 	.word	0x20000188
 8002618:	20000180 	.word	0x20000180

0800261c <tft_print_colored>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fp pointer to the character(s)
 */
void tft_print_colored(uint8_t x, uint8_t y, const char *fp,
        uint16_t text_color, uint16_t bg_color) {
 800261c:	b490      	push	{r4, r7}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	603a      	str	r2, [r7, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
 800262a:	460b      	mov	r3, r1
 800262c:	71bb      	strb	r3, [r7, #6]
 800262e:	4613      	mov	r3, r2
 8002630:	80bb      	strh	r3, [r7, #4]
    uint8_t i = x;
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	73fb      	strb	r3, [r7, #15]
    uint8_t j = y;
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	73bb      	strb	r3, [r7, #14]
    uint8_t is_special = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	737b      	strb	r3, [r7, #13]
    uint8_t is_highlighted = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	733b      	strb	r3, [r7, #12]
    uint8_t is_underlined = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	72fb      	strb	r3, [r7, #11]

    while (*fp && i < char_max_x && j < char_max_y) {
 8002646:	e14a      	b.n	80028de <tft_print_colored+0x2c2>
        switch (*fp) {
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b7d      	cmp	r3, #125	; 0x7d
 800264e:	f300 80e0 	bgt.w	8002812 <tft_print_colored+0x1f6>
 8002652:	2b5b      	cmp	r3, #91	; 0x5b
 8002654:	da04      	bge.n	8002660 <tft_print_colored+0x44>
 8002656:	2b0a      	cmp	r3, #10
 8002658:	d050      	beq.n	80026fc <tft_print_colored+0xe0>
 800265a:	2b0d      	cmp	r3, #13
 800265c:	d051      	beq.n	8002702 <tft_print_colored+0xe6>
 800265e:	e0d8      	b.n	8002812 <tft_print_colored+0x1f6>
 8002660:	3b5b      	subs	r3, #91	; 0x5b
 8002662:	2b22      	cmp	r3, #34	; 0x22
 8002664:	f200 80d5 	bhi.w	8002812 <tft_print_colored+0x1f6>
 8002668:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <tft_print_colored+0x54>)
 800266a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266e:	bf00      	nop
 8002670:	080027df 	.word	0x080027df
 8002674:	08002813 	.word	0x08002813
 8002678:	080027df 	.word	0x080027df
 800267c:	08002813 	.word	0x08002813
 8002680:	08002813 	.word	0x08002813
 8002684:	08002709 	.word	0x08002709
 8002688:	08002813 	.word	0x08002813
 800268c:	08002813 	.word	0x08002813
 8002690:	08002813 	.word	0x08002813
 8002694:	08002813 	.word	0x08002813
 8002698:	08002813 	.word	0x08002813
 800269c:	08002813 	.word	0x08002813
 80026a0:	08002813 	.word	0x08002813
 80026a4:	08002813 	.word	0x08002813
 80026a8:	08002813 	.word	0x08002813
 80026ac:	08002813 	.word	0x08002813
 80026b0:	08002813 	.word	0x08002813
 80026b4:	08002813 	.word	0x08002813
 80026b8:	08002813 	.word	0x08002813
 80026bc:	08002813 	.word	0x08002813
 80026c0:	08002813 	.word	0x08002813
 80026c4:	08002813 	.word	0x08002813
 80026c8:	08002813 	.word	0x08002813
 80026cc:	08002813 	.word	0x08002813
 80026d0:	08002813 	.word	0x08002813
 80026d4:	08002813 	.word	0x08002813
 80026d8:	08002813 	.word	0x08002813
 80026dc:	08002813 	.word	0x08002813
 80026e0:	08002813 	.word	0x08002813
 80026e4:	08002813 	.word	0x08002813
 80026e8:	08002813 	.word	0x08002813
 80026ec:	08002813 	.word	0x08002813
 80026f0:	080027f1 	.word	0x080027f1
 80026f4:	08002803 	.word	0x08002803
 80026f8:	080027f1 	.word	0x080027f1
        case '\n':
            j++;  // fall through
 80026fc:	7bbb      	ldrb	r3, [r7, #14]
 80026fe:	3301      	adds	r3, #1
 8002700:	73bb      	strb	r3, [r7, #14]
        case '\r':
            i = x;
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	73fb      	strb	r3, [r7, #15]
            break;
 8002706:	e0e7      	b.n	80028d8 <tft_print_colored+0x2bc>
        case '`': // escape character
            if (*(fp + 1) != '\0') {
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80e1 	beq.w	80028d6 <tft_print_colored+0x2ba>
                fp++;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	603b      	str	r3, [r7, #0]
                curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b25b      	sxtb	r3, r3
 8002720:	7afa      	ldrb	r2, [r7, #11]
 8002722:	2a00      	cmp	r2, #0
 8002724:	d002      	beq.n	800272c <tft_print_colored+0x110>
 8002726:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800272a:	e000      	b.n	800272e <tft_print_colored+0x112>
 800272c:	2200      	movs	r2, #0
 800272e:	4313      	orrs	r3, r2
 8002730:	b25c      	sxtb	r4, r3
 8002732:	4b75      	ldr	r3, [pc, #468]	; (8002908 <tft_print_colored+0x2ec>)
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	4b74      	ldr	r3, [pc, #464]	; (8002908 <tft_print_colored+0x2ec>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	7bbb      	ldrb	r3, [r7, #14]
 8002740:	4a72      	ldr	r2, [pc, #456]	; (800290c <tft_print_colored+0x2f0>)
 8002742:	7812      	ldrb	r2, [r2, #0]
 8002744:	fb03 f202 	mul.w	r2, r3, r2
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	441a      	add	r2, r3
 800274c:	b2e4      	uxtb	r4, r4
 800274e:	4603      	mov	r3, r0
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4403      	add	r3, r0
 8002754:	015b      	lsls	r3, r3, #5
 8002756:	440b      	add	r3, r1
 8002758:	4413      	add	r3, r2
 800275a:	3301      	adds	r3, #1
 800275c:	4622      	mov	r2, r4
 800275e:	701a      	strb	r2, [r3, #0]
                curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <tft_print_colored+0x150>
 8002766:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <tft_print_colored+0x2f4>)
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	e000      	b.n	800276e <tft_print_colored+0x152>
 800276c:	88ba      	ldrh	r2, [r7, #4]
 800276e:	4b66      	ldr	r3, [pc, #408]	; (8002908 <tft_print_colored+0x2ec>)
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	4b65      	ldr	r3, [pc, #404]	; (8002908 <tft_print_colored+0x2ec>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461c      	mov	r4, r3
 800277a:	7bbb      	ldrb	r3, [r7, #14]
 800277c:	4863      	ldr	r0, [pc, #396]	; (800290c <tft_print_colored+0x2f0>)
 800277e:	7800      	ldrb	r0, [r0, #0]
 8002780:	fb03 f000 	mul.w	r0, r3, r0
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	4418      	add	r0, r3
 8002788:	4623      	mov	r3, r4
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4423      	add	r3, r4
 800278e:	015b      	lsls	r3, r3, #5
 8002790:	4403      	add	r3, r0
 8002792:	33a0      	adds	r3, #160	; 0xa0
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	440b      	add	r3, r1
 8002798:	805a      	strh	r2, [r3, #2]
                curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 800279a:	7b3b      	ldrb	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <tft_print_colored+0x18a>
 80027a0:	4b5c      	ldr	r3, [pc, #368]	; (8002914 <tft_print_colored+0x2f8>)
 80027a2:	881a      	ldrh	r2, [r3, #0]
 80027a4:	e000      	b.n	80027a8 <tft_print_colored+0x18c>
 80027a6:	8b3a      	ldrh	r2, [r7, #24]
 80027a8:	4b57      	ldr	r3, [pc, #348]	; (8002908 <tft_print_colored+0x2ec>)
 80027aa:	6819      	ldr	r1, [r3, #0]
 80027ac:	4b56      	ldr	r3, [pc, #344]	; (8002908 <tft_print_colored+0x2ec>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461c      	mov	r4, r3
 80027b4:	7bbb      	ldrb	r3, [r7, #14]
 80027b6:	4855      	ldr	r0, [pc, #340]	; (800290c <tft_print_colored+0x2f0>)
 80027b8:	7800      	ldrb	r0, [r0, #0]
 80027ba:	fb03 f000 	mul.w	r0, r3, r0
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	4418      	add	r0, r3
 80027c2:	4623      	mov	r3, r4
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4423      	add	r3, r4
 80027c8:	015b      	lsls	r3, r3, #5
 80027ca:	4403      	add	r3, r0
 80027cc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	440b      	add	r3, r1
 80027d4:	805a      	strh	r2, [r3, #2]
                i++;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	3301      	adds	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80027dc:	e07b      	b.n	80028d6 <tft_print_colored+0x2ba>
        case '[':
        case ']':
            is_special = (*fp == '[');
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b5b      	cmp	r3, #91	; 0x5b
 80027e4:	bf0c      	ite	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	2300      	movne	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	737b      	strb	r3, [r7, #13]
            break;
 80027ee:	e073      	b.n	80028d8 <tft_print_colored+0x2bc>
        case '{':
        case '}':
            is_highlighted = (*fp == '{');
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b7b      	cmp	r3, #123	; 0x7b
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	733b      	strb	r3, [r7, #12]
            break;
 8002800:	e06a      	b.n	80028d8 <tft_print_colored+0x2bc>
        case '|':
            is_underlined = !is_underlined;
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	72fb      	strb	r3, [r7, #11]
            break;
 8002810:	e062      	b.n	80028d8 <tft_print_colored+0x2bc>
        default:
            curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b25b      	sxtb	r3, r3
 8002818:	7afa      	ldrb	r2, [r7, #11]
 800281a:	2a00      	cmp	r2, #0
 800281c:	d002      	beq.n	8002824 <tft_print_colored+0x208>
 800281e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002822:	e000      	b.n	8002826 <tft_print_colored+0x20a>
 8002824:	2200      	movs	r2, #0
 8002826:	4313      	orrs	r3, r2
 8002828:	b25c      	sxtb	r4, r3
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <tft_print_colored+0x2ec>)
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <tft_print_colored+0x2ec>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	4a34      	ldr	r2, [pc, #208]	; (800290c <tft_print_colored+0x2f0>)
 800283a:	7812      	ldrb	r2, [r2, #0]
 800283c:	fb03 f202 	mul.w	r2, r3, r2
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	441a      	add	r2, r3
 8002844:	b2e4      	uxtb	r4, r4
 8002846:	4603      	mov	r3, r0
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4403      	add	r3, r0
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	440b      	add	r3, r1
 8002850:	4413      	add	r3, r2
 8002852:	3301      	adds	r3, #1
 8002854:	4622      	mov	r2, r4
 8002856:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 8002858:	7b7b      	ldrb	r3, [r7, #13]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <tft_print_colored+0x248>
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <tft_print_colored+0x2f4>)
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	e000      	b.n	8002866 <tft_print_colored+0x24a>
 8002864:	88ba      	ldrh	r2, [r7, #4]
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <tft_print_colored+0x2ec>)
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <tft_print_colored+0x2ec>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	461c      	mov	r4, r3
 8002872:	7bbb      	ldrb	r3, [r7, #14]
 8002874:	4825      	ldr	r0, [pc, #148]	; (800290c <tft_print_colored+0x2f0>)
 8002876:	7800      	ldrb	r0, [r0, #0]
 8002878:	fb03 f000 	mul.w	r0, r3, r0
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	4418      	add	r0, r3
 8002880:	4623      	mov	r3, r4
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4423      	add	r3, r4
 8002886:	015b      	lsls	r3, r3, #5
 8002888:	4403      	add	r3, r0
 800288a:	33a0      	adds	r3, #160	; 0xa0
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	440b      	add	r3, r1
 8002890:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 8002892:	7b3b      	ldrb	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <tft_print_colored+0x282>
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <tft_print_colored+0x2f8>)
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	e000      	b.n	80028a0 <tft_print_colored+0x284>
 800289e:	8b3a      	ldrh	r2, [r7, #24]
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <tft_print_colored+0x2ec>)
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <tft_print_colored+0x2ec>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461c      	mov	r4, r3
 80028ac:	7bbb      	ldrb	r3, [r7, #14]
 80028ae:	4817      	ldr	r0, [pc, #92]	; (800290c <tft_print_colored+0x2f0>)
 80028b0:	7800      	ldrb	r0, [r0, #0]
 80028b2:	fb03 f000 	mul.w	r0, r3, r0
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	4418      	add	r0, r3
 80028ba:	4623      	mov	r3, r4
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4423      	add	r3, r4
 80028c0:	015b      	lsls	r3, r3, #5
 80028c2:	4403      	add	r3, r0
 80028c4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	440b      	add	r3, r1
 80028cc:	805a      	strh	r2, [r3, #2]
            i++;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	3301      	adds	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
            break;
 80028d4:	e000      	b.n	80028d8 <tft_print_colored+0x2bc>
            break;
 80028d6:	bf00      	nop
        }
        fp++;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	603b      	str	r3, [r7, #0]
    while (*fp && i < char_max_x && j < char_max_y) {
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <tft_print_colored+0x2e0>
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <tft_print_colored+0x2f0>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d205      	bcs.n	80028fc <tft_print_colored+0x2e0>
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <tft_print_colored+0x2fc>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	7bba      	ldrb	r2, [r7, #14]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	f4ff aea6 	bcc.w	8002648 <tft_print_colored+0x2c>
    }
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bc90      	pop	{r4, r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	200000a8 	.word	0x200000a8
 800290c:	20000189 	.word	0x20000189
 8002910:	20000186 	.word	0x20000186
 8002914:	20000182 	.word	0x20000182
 8002918:	2000018a 	.word	0x2000018a

0800291c <tft_printc>:
 *
 * @param x x-coordinate
 * @param y y-coordinate
 * @param fp pointer to character
 */
void tft_printc(uint8_t x, uint8_t y, const char *fp) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af02      	add	r7, sp, #8
 8002922:	4603      	mov	r3, r0
 8002924:	603a      	str	r2, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
 8002928:	460b      	mov	r3, r1
 800292a:	71bb      	strb	r3, [r7, #6]
    tft_print_colored(x, y, fp, curr_text_color, curr_bg_color);
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <tft_printc+0x30>)
 800292e:	881a      	ldrh	r2, [r3, #0]
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <tft_printc+0x34>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	79b9      	ldrb	r1, [r7, #6]
 8002936:	79f8      	ldrb	r0, [r7, #7]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	f7ff fe6d 	bl	800261c <tft_print_colored>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000184 	.word	0x20000184
 8002950:	20000180 	.word	0x20000180

08002954 <tft_prints>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fmt string to be printed with format
 * @param __VA_ARGS__ variables to replace spaceholders
 */
void tft_prints(uint8_t x, uint8_t y, const char *fmt, ...) {
 8002954:	b40c      	push	{r2, r3}
 8002956:	b580      	push	{r7, lr}
 8002958:	b08e      	sub	sp, #56	; 0x38
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	460a      	mov	r2, r1
 8002960:	71fb      	strb	r3, [r7, #7]
 8002962:	4613      	mov	r3, r2
 8002964:	71bb      	strb	r3, [r7, #6]
    char buf[CHAR_MAX_X * 2] = { 0 }, *fp = buf;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f005 f9fa 	bl	8007d6c <memset>
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	60fb      	str	r3, [r7, #12]

    va_list args;
    va_start(args, fmt);
 800297e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002982:	60bb      	str	r3, [r7, #8]
    print(&fp, fmt, args);
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fa27 	bl	8001de0 <print>

    tft_printc(x, y, buf);
 8002992:	f107 0210 	add.w	r2, r7, #16
 8002996:	79b9      	ldrb	r1, [r7, #6]
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ffbe 	bl	800291c <tft_printc>
}
 80029a0:	bf00      	nop
 80029a2:	3738      	adds	r7, #56	; 0x38
 80029a4:	46bd      	mov	sp, r7
 80029a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029aa:	b002      	add	sp, #8
 80029ac:	4770      	bx	lr
	...

080029b0 <tft_print_rectangle_dma>:
#endif
    }
}

void tft_print_rectangle_dma(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	; 0x30
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4603      	mov	r3, r0
 80029be:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t l = (i > TFT_DMA_BUF_PIXELS) ? TFT_DMA_BUF_PIXELS : i; // safety guard
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80029d0:	bf28      	it	cs
 80029d2:	f44f 53a0 	movcs.w	r3, #5120	; 0x1400
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
    tft_buffer_pixels(curr_tft_dma_buf, color, l);
 80029d8:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <tft_print_rectangle_dma+0xf0>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	02db      	lsls	r3, r3, #11
 80029e6:	4a2f      	ldr	r2, [pc, #188]	; (8002aa4 <tft_print_rectangle_dma+0xf4>)
 80029e8:	441a      	add	r2, r3
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	627a      	str	r2, [r7, #36]	; 0x24
 80029ee:	89fa      	ldrh	r2, [r7, #14]
 80029f0:	847a      	strh	r2, [r7, #34]	; 0x22
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029fc:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 80029fe:	8afb      	ldrh	r3, [r7, #22]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	8afa      	ldrh	r2, [r7, #22]
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]
}
 8002a14:	bf00      	nop
    while (len--) {
 8002a16:	e009      	b.n	8002a2c <tft_print_rectangle_dma+0x7c>
        *out++ = buf[0];
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8002a1e:	7d3a      	ldrb	r2, [r7, #20]
 8002a20:	701a      	strb	r2, [r3, #0]
        *out++ = buf[1];
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	627a      	str	r2, [r7, #36]	; 0x24
 8002a28:	7d7a      	ldrb	r2, [r7, #21]
 8002a2a:	701a      	strb	r2, [r3, #0]
    while (len--) {
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	1e5a      	subs	r2, r3, #1
 8002a30:	61fa      	str	r2, [r7, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <tft_print_rectangle_dma+0x68>
}
 8002a36:	bf00      	nop
    tft_set_region(x, y, w - 1, h - 1);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	b298      	uxth	r0, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	b299      	uxth	r1, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f7ff fc30 	bl	80022b4 <tft_set_region>
    write_command(0x2c);
 8002a54:	202c      	movs	r0, #44	; 0x2c
 8002a56:	f7ff fae5 	bl	8002024 <write_command>
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8002a5a:	bf00      	nop
 8002a5c:	4812      	ldr	r0, [pc, #72]	; (8002aa8 <tft_print_rectangle_dma+0xf8>)
 8002a5e:	f003 fcf3 	bl	8006448 <HAL_SPI_GetState>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d1f9      	bne.n	8002a5c <tft_print_rectangle_dma+0xac>
        ;
    write_many_dma(0x2c, curr_tft_dma_buf, l * PIXEL_BYTES);
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <tft_print_rectangle_dma+0xf0>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	02db      	lsls	r3, r3, #11
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <tft_print_rectangle_dma+0xf4>)
 8002a78:	1899      	adds	r1, r3, r2
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	202c      	movs	r0, #44	; 0x2c
 8002a86:	f7ff fb19 	bl	80020bc <write_many_dma>
    buf_ptr ^= 0x1;
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <tft_print_rectangle_dma+0xf0>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b02      	ldr	r3, [pc, #8]	; (8002aa0 <tft_print_rectangle_dma+0xf0>)
 8002a96:	701a      	strb	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	3730      	adds	r7, #48	; 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200007d0 	.word	0x200007d0
 8002aa4:	200007d4 	.word	0x200007d4
 8002aa8:	200057dc 	.word	0x200057dc

08002aac <tft_print_rectangle>:
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_rectangle(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b08d      	sub	sp, #52	; 0x34
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4603      	mov	r3, r0
 8002aba:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
    if (i <= (64)) {
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d82f      	bhi.n	8002b2c <tft_print_rectangle+0x80>
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	89fb      	ldrh	r3, [r7, #14]
 8002ad4:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	8afa      	ldrh	r2, [r7, #22]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]
}
 8002aec:	bf00      	nop
        uint8_t buf[PIXEL_BYTES];
        tft_buffer_pixel(buf, color);

        tft_set_region(x, y, w - 1, h - 1);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	b298      	uxth	r0, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	b299      	uxth	r1, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f7ff fbd5 	bl	80022b4 <tft_set_region>
        write_command(0x2c);
 8002b0a:	202c      	movs	r0, #44	; 0x2c
 8002b0c:	f7ff fa8a 	bl	8002024 <write_command>
        for (; i != 0; i--) {
 8002b10:	e008      	b.n	8002b24 <tft_print_rectangle+0x78>
            write_data(buf, PIXEL_BYTES);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	2102      	movs	r1, #2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff faa7 	bl	800206c <write_data>
        for (; i != 0; i--) {
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	3b01      	subs	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f3      	bne.n	8002b12 <tft_print_rectangle+0x66>
        if (h % buf_max_h > 0) {
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
                    h % buf_max_h);
        }
    }
}
 8002b2a:	e040      	b.n	8002bae <tft_print_rectangle+0x102>
        uint16_t buf_max_h = TFT_DMA_BUF_PIXELS / w;
 8002b2c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	83fb      	strh	r3, [r7, #30]
        uint16_t num_section = h / buf_max_h;
 8002b38:	8bfb      	ldrh	r3, [r7, #30]
 8002b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	83bb      	strh	r3, [r7, #28]
        for (int k = 0; k < num_section; ++k) {
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	e010      	b.n	8002b6a <tft_print_rectangle+0xbe>
            tft_print_rectangle_dma(color, x, y + k * buf_max_h, w, buf_max_h);
 8002b48:	8bfb      	ldrh	r3, [r7, #30]
 8002b4a:	6a3a      	ldr	r2, [r7, #32]
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	441a      	add	r2, r3
 8002b56:	8bfb      	ldrh	r3, [r7, #30]
 8002b58:	89f8      	ldrh	r0, [r7, #14]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	f7ff ff26 	bl	80029b0 <tft_print_rectangle_dma>
        for (int k = 0; k < num_section; ++k) {
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	3301      	adds	r3, #1
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	8bbb      	ldrh	r3, [r7, #28]
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	dbea      	blt.n	8002b48 <tft_print_rectangle+0x9c>
        if (h % buf_max_h > 0) {
 8002b72:	8bfa      	ldrh	r2, [r7, #30]
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b7a:	fb01 f202 	mul.w	r2, r1, r2
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d014      	beq.n	8002bae <tft_print_rectangle+0x102>
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
 8002b84:	8bbb      	ldrh	r3, [r7, #28]
 8002b86:	8bfa      	ldrh	r2, [r7, #30]
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	18d4      	adds	r4, r2, r3
 8002b92:	8bfa      	ldrh	r2, [r7, #30]
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b9a:	fb01 f202 	mul.w	r2, r1, r2
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	89f8      	ldrh	r0, [r7, #14]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	f7ff ff01 	bl	80029b0 <tft_print_rectangle_dma>
}
 8002bae:	bf00      	nop
 8002bb0:	372c      	adds	r7, #44	; 0x2c
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}
	...

08002bb8 <tft_print_image>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_image(void *buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8002bc6:	bf00      	nop
 8002bc8:	4812      	ldr	r0, [pc, #72]	; (8002c14 <tft_print_image+0x5c>)
 8002bca:	f003 fc3d 	bl	8006448 <HAL_SPI_GetState>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d1f9      	bne.n	8002bc8 <tft_print_image+0x10>
        ;  // wait for the SPI to be ready

    tft_set_region(x, y, w - 1, h - 1);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	b298      	uxth	r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	b299      	uxth	r1, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f7ff fb62 	bl	80022b4 <tft_set_region>

    write_many_dma(0x2c, buf, w * h * PIXEL_BYTES);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	fb12 f303 	smulbb	r3, r2, r3
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	68f9      	ldr	r1, [r7, #12]
 8002c06:	202c      	movs	r0, #44	; 0x2c
 8002c08:	f7ff fa58 	bl	80020bc <write_many_dma>
}
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200057dc 	.word	0x200057dc

08002c18 <tft_update>:
 * @brief Update the screen in certain period
 *
 * @param period time in ms
 * @return state
 */
uint8_t tft_update(uint32_t period) {
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b08d      	sub	sp, #52	; 0x34
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	6078      	str	r0, [r7, #4]
    static uint32_t last_update = 0;
    if ((HAL_GetTick() - last_update) < period)
 8002c20:	f001 facc 	bl	80041bc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4ba0      	ldr	r3, [pc, #640]	; (8002ea8 <tft_update+0x290>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d901      	bls.n	8002c36 <tft_update+0x1e>
        return 2;
 8002c32:	2302      	movs	r3, #2
 8002c34:	e133      	b.n	8002e9e <tft_update+0x286>
    last_update = HAL_GetTick();
 8002c36:	f001 fac1 	bl	80041bc <HAL_GetTick>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4a9a      	ldr	r2, [pc, #616]	; (8002ea8 <tft_update+0x290>)
 8002c3e:	6013      	str	r3, [r2, #0]

    for (uint8_t j = 0; j < char_max_y; j++) {
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c46:	e115      	b.n	8002e74 <tft_update+0x25c>
        for (uint8_t i = 0; i < char_max_x; i++) {
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c4e:	e105      	b.n	8002e5c <tft_update+0x244>
            if (tft_char_is_changed(tft_screens, i, j)) {
 8002c50:	4b96      	ldr	r3, [pc, #600]	; (8002eac <tft_update+0x294>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002c58:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fe01 	bl	8001864 <tft_char_is_changed>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80f4 	beq.w	8002e52 <tft_update+0x23a>
                uint8_t adj_cnt = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8002c70:	e004      	b.n	8002c7c <tft_update+0x64>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
                    adj_cnt++;  // Search for diff char
 8002c72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c76:	3301      	adds	r3, #1
 8002c78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8002c7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c84:	4413      	add	r3, r2
 8002c86:	4a8a      	ldr	r2, [pc, #552]	; (8002eb0 <tft_update+0x298>)
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	da13      	bge.n	8002cb6 <tft_update+0x9e>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
 8002c8e:	4b87      	ldr	r3, [pc, #540]	; (8002eac <tft_update+0x294>)
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c9a:	4413      	add	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f7fe fdde 	bl	8001864 <tft_char_is_changed>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <tft_update+0x9e>
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
 8002cae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002cb2:	2b27      	cmp	r3, #39	; 0x27
 8002cb4:	d9dd      	bls.n	8002c72 <tft_update+0x5a>

                uint16_t px = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	847b      	strh	r3, [r7, #34]	; 0x22
                uint16_t y = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 8002cbe:	e09a      	b.n	8002df6 <tft_update+0x1de>
                    uint8_t char_cnt = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 8002cc4:	e08e      	b.n	8002de4 <tft_update+0x1cc>
                        const uint8_t char_ptr = (CHAR_PTR(
 8002cc6:	4b79      	ldr	r3, [pc, #484]	; (8002eac <tft_update+0x294>)
 8002cc8:	6819      	ldr	r1, [r3, #0]
 8002cca:	4b78      	ldr	r3, [pc, #480]	; (8002eac <tft_update+0x294>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461c      	mov	r4, r3
 8002cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cd6:	4a76      	ldr	r2, [pc, #472]	; (8002eb0 <tft_update+0x298>)
 8002cd8:	7812      	ldrb	r2, [r2, #0]
 8002cda:	fb03 f202 	mul.w	r2, r3, r2
 8002cde:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	4403      	add	r3, r0
 8002ce6:	441a      	add	r2, r3
 8002ce8:	4623      	mov	r3, r4
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4423      	add	r3, r4
 8002cee:	015b      	lsls	r3, r3, #5
 8002cf0:	440b      	add	r3, r1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	3b20      	subs	r3, #32
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	461a      	mov	r2, r3
                                curr_text_buf[TFT_XY(i + char_cnt, j)]))[y];
 8002cfe:	8c3b      	ldrh	r3, [r7, #32]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a6c      	ldr	r2, [pc, #432]	; (8002eb4 <tft_update+0x29c>)
 8002d04:	4413      	add	r3, r2
                        const uint8_t char_ptr = (CHAR_PTR(
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	777b      	strb	r3, [r7, #29]
                        uint16_t fg = curr_text_color_buf[TFT_XY(i + char_cnt, j)];
 8002d0a:	4b68      	ldr	r3, [pc, #416]	; (8002eac <tft_update+0x294>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4b67      	ldr	r3, [pc, #412]	; (8002eac <tft_update+0x294>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461c      	mov	r4, r3
 8002d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d1a:	4965      	ldr	r1, [pc, #404]	; (8002eb0 <tft_update+0x298>)
 8002d1c:	7809      	ldrb	r1, [r1, #0]
 8002d1e:	fb03 f101 	mul.w	r1, r3, r1
 8002d22:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002d26:	7ffb      	ldrb	r3, [r7, #31]
 8002d28:	4403      	add	r3, r0
 8002d2a:	4419      	add	r1, r3
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4423      	add	r3, r4
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	440b      	add	r3, r1
 8002d36:	33a0      	adds	r3, #160	; 0xa0
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	885b      	ldrh	r3, [r3, #2]
 8002d3e:	837b      	strh	r3, [r7, #26]
                        uint16_t bg = curr_bg_color_buf[TFT_XY(i + char_cnt, j)];
 8002d40:	4b5a      	ldr	r3, [pc, #360]	; (8002eac <tft_update+0x294>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <tft_update+0x294>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	461c      	mov	r4, r3
 8002d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d50:	4957      	ldr	r1, [pc, #348]	; (8002eb0 <tft_update+0x298>)
 8002d52:	7809      	ldrb	r1, [r1, #0]
 8002d54:	fb03 f101 	mul.w	r1, r3, r1
 8002d58:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
 8002d5e:	4403      	add	r3, r0
 8002d60:	4419      	add	r1, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4423      	add	r3, r4
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	885b      	ldrh	r3, [r3, #2]
 8002d76:	833b      	strh	r3, [r7, #24]
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 8002d78:	2308      	movs	r3, #8
 8002d7a:	77bb      	strb	r3, [r7, #30]
 8002d7c:	e02c      	b.n	8002dd8 <tft_update+0x1c0>
                            uint16_t color =
                                    ((char_ptr >> (x - 1)) & 0x01) ? fg : bg;
 8002d7e:	7f7a      	ldrb	r2, [r7, #29]
 8002d80:	7fbb      	ldrb	r3, [r7, #30]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	fa42 f303 	asr.w	r3, r2, r3
 8002d88:	f003 0301 	and.w	r3, r3, #1
                            uint16_t color =
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <tft_update+0x17c>
 8002d90:	8b7b      	ldrh	r3, [r7, #26]
 8002d92:	e000      	b.n	8002d96 <tft_update+0x17e>
 8002d94:	8b3b      	ldrh	r3, [r7, #24]
 8002d96:	82fb      	strh	r3, [r7, #22]
                            tft_buffer_pixel(&tft_dma_bufs[buf_ptr][px], color);
 8002d98:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <tft_update+0x2a0>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	02db      	lsls	r3, r3, #11
 8002da8:	4413      	add	r3, r2
 8002daa:	4a44      	ldr	r2, [pc, #272]	; (8002ebc <tft_update+0x2a4>)
 8002dac:	4413      	add	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	8afb      	ldrh	r3, [r7, #22]
 8002db2:	81fb      	strh	r3, [r7, #14]
    out[0] = rgb565 >> 8;
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	89fa      	ldrh	r2, [r7, #14]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]
}
 8002dca:	bf00      	nop
                            px += PIXEL_BYTES;
 8002dcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dce:	3302      	adds	r3, #2
 8002dd0:	847b      	strh	r3, [r7, #34]	; 0x22
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 8002dd2:	7fbb      	ldrb	r3, [r7, #30]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	77bb      	strb	r3, [r7, #30]
 8002dd8:	7fbb      	ldrb	r3, [r7, #30]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cf      	bne.n	8002d7e <tft_update+0x166>
                        }
                        char_cnt++;
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	3301      	adds	r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 8002de4:	7ffa      	ldrb	r2, [r7, #31]
 8002de6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002dea:	429a      	cmp	r2, r3
 8002dec:	f47f af6b 	bne.w	8002cc6 <tft_update+0xae>
                    }
                    y++;
 8002df0:	8c3b      	ldrh	r3, [r7, #32]
 8002df2:	3301      	adds	r3, #1
 8002df4:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 8002df6:	8c3b      	ldrh	r3, [r7, #32]
 8002df8:	2b0f      	cmp	r3, #15
 8002dfa:	f67f af61 	bls.w	8002cc0 <tft_update+0xa8>
                }

                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 8002dfe:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <tft_update+0x2a0>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	02db      	lsls	r3, r3, #11
 8002e0c:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <tft_update+0x2a4>)
 8002e0e:	1898      	adds	r0, r3, r2
 8002e10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4619      	mov	r1, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 8002e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e1c:	011b      	lsls	r3, r3, #4
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 8002e1e:	461a      	mov	r2, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 8002e20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002e24:	00db      	lsls	r3, r3, #3
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 8002e26:	461c      	mov	r4, r3
 8002e28:	2310      	movs	r3, #16
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	f7ff fec3 	bl	8002bb8 <tft_print_image>
                        CHAR_HEIGHT);
                buf_ptr ^= 0x1;
 8002e32:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <tft_update+0x2a0>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	f083 0301 	eor.w	r3, r3, #1
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <tft_update+0x2a0>)
 8002e3e:	701a      	strb	r2, [r3, #0]
                i += adj_cnt - 1;
 8002e40:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002e44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t i = 0; i < char_max_x; i++) {
 8002e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e56:	3301      	adds	r3, #1
 8002e58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <tft_update+0x298>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f4ff aef3 	bcc.w	8002c50 <tft_update+0x38>
    for (uint8_t j = 0; j < char_max_y; j++) {
 8002e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <tft_update+0x2a8>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f4ff aee3 	bcc.w	8002c48 <tft_update+0x30>
            }
        }
    }

    // Swap pointers
    curr_screen = !curr_screen;
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <tft_update+0x294>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <tft_update+0x294>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	701a      	strb	r2, [r3, #0]

    tft_clear();
 8002e98:	f7ff f964 	bl	8002164 <tft_clear>

    return 0;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	372c      	adds	r7, #44	; 0x2c
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200057d4 	.word	0x200057d4
 8002eac:	200000a8 	.word	0x200000a8
 8002eb0:	20000189 	.word	0x20000189
 8002eb4:	08007e20 	.word	0x08007e20
 8002eb8:	200007d0 	.word	0x200007d0
 8002ebc:	200007d4 	.word	0x200007d4
 8002ec0:	2000018a 	.word	0x2000018a

08002ec4 <blackFilter>:
#include "lcd/lcd_graphics.h"
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void blackFilter(uint16_t width, uint16_t height, uint16_t* originalPTR, uint16_t* processedPTR)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60ba      	str	r2, [r7, #8]
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	4603      	mov	r3, r0
 8002ed0:	81fb      	strh	r3, [r7, #14]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	81bb      	strh	r3, [r7, #12]
	for (uint16_t x=0; x<width; x++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	82fb      	strh	r3, [r7, #22]
 8002eda:	e037      	b.n	8002f4c <blackFilter+0x88>
	{
		for (uint16_t y =0; y<height; y++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	82bb      	strh	r3, [r7, #20]
 8002ee0:	e02d      	b.n	8002f3e <blackFilter+0x7a>
		{
			uint16_t pixel = *(originalPTR + width*y + x) & 0x001F;
 8002ee2:	89fb      	ldrh	r3, [r7, #14]
 8002ee4:	8aba      	ldrh	r2, [r7, #20]
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	8afb      	ldrh	r3, [r7, #22]
 8002eee:	4413      	add	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	827b      	strh	r3, [r7, #18]
			if (pixel > 11)
 8002efe:	8a7b      	ldrh	r3, [r7, #18]
 8002f00:	2b0b      	cmp	r3, #11
 8002f02:	d90d      	bls.n	8002f20 <blackFilter+0x5c>
			{
				*(processedPTR + width*y + x) = *(processedPTR + width*y + x) | 0xFFFF;
 8002f04:	89fb      	ldrh	r3, [r7, #14]
 8002f06:	8aba      	ldrh	r2, [r7, #20]
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	8afb      	ldrh	r3, [r7, #22]
 8002f10:	4413      	add	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	e00b      	b.n	8002f38 <blackFilter+0x74>
			}
			else
			{
				*(processedPTR + width*y + x) = *(processedPTR + width*y + x) & 0x0000;
 8002f20:	89fb      	ldrh	r3, [r7, #14]
 8002f22:	8aba      	ldrh	r2, [r7, #20]
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	8afb      	ldrh	r3, [r7, #22]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	2200      	movs	r2, #0
 8002f36:	801a      	strh	r2, [r3, #0]
		for (uint16_t y =0; y<height; y++)
 8002f38:	8abb      	ldrh	r3, [r7, #20]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	82bb      	strh	r3, [r7, #20]
 8002f3e:	8aba      	ldrh	r2, [r7, #20]
 8002f40:	89bb      	ldrh	r3, [r7, #12]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d3cd      	bcc.n	8002ee2 <blackFilter+0x1e>
	for (uint16_t x=0; x<width; x++)
 8002f46:	8afb      	ldrh	r3, [r7, #22]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	82fb      	strh	r3, [r7, #22]
 8002f4c:	8afa      	ldrh	r2, [r7, #22]
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3c3      	bcc.n	8002edc <blackFilter+0x18>
			}
		}
	}
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <pwm_init>:
            *(processed_dataPtr + width * y + x) = temporary;
        }
    }
}

void pwm_init(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
	// init the pwm prescaler value and auto-reload value and start the pwm
	/* Your code start here */
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //servoMotor
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4816      	ldr	r0, [pc, #88]	; (8002fc4 <pwm_init+0x60>)
 8002f6c:	f003 fcec 	bl	8006948 <HAL_TIM_PWM_Start>
	TIM5->ARR = 39999;
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <pwm_init+0x64>)
 8002f72:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM5->PSC = 41;
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <pwm_init+0x64>)
 8002f7a:	2229      	movs	r2, #41	; 0x29
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->CCR1 = 2999;
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <pwm_init+0x64>)
 8002f80:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002f84:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); //leftMotor
 8002f86:	2100      	movs	r1, #0
 8002f88:	4810      	ldr	r0, [pc, #64]	; (8002fcc <pwm_init+0x68>)
 8002f8a:	f003 fcdd 	bl	8006948 <HAL_TIM_PWM_Start>
	TIM10->ARR = 839;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <pwm_init+0x6c>)
 8002f90:	f240 3247 	movw	r2, #839	; 0x347
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM10->PSC = 9;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <pwm_init+0x6c>)
 8002f98:	2209      	movs	r2, #9
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM10->CCR1 = 0;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <pwm_init+0x6c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1); //rightMotor
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	480b      	ldr	r0, [pc, #44]	; (8002fd4 <pwm_init+0x70>)
 8002fa6:	f003 fccf 	bl	8006948 <HAL_TIM_PWM_Start>
	TIM11->ARR = 839;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <pwm_init+0x74>)
 8002fac:	f240 3247 	movw	r2, #839	; 0x347
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM11->PSC = 9;
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <pwm_init+0x74>)
 8002fb4:	2209      	movs	r2, #9
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM11->CCR1 = 0;
 8002fb8:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <pwm_init+0x74>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20005894 	.word	0x20005894
 8002fc8:	40000c00 	.word	0x40000c00
 8002fcc:	200058dc 	.word	0x200058dc
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	20005924 	.word	0x20005924
 8002fd8:	40014800 	.word	0x40014800

08002fdc <steeringAlgorithm>:
	gpio_reset(IN3);
	gpio_set(IN4);
}

void steeringAlgorithm(uint16_t* image, uint16_t width, uint16_t height)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	803b      	strh	r3, [r7, #0]
	uint16_t left = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	82fb      	strh	r3, [r7, #22]
	uint16_t right = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	82bb      	strh	r3, [r7, #20]
	for (uint16_t y = 0; y<height/4-1; y++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	827b      	strh	r3, [r7, #18]
 8002ff8:	e041      	b.n	800307e <steeringAlgorithm+0xa2>
	{
		for (uint16_t x = 0; x<width/2-1; x++) // Calculate Left Rectangle
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	823b      	strh	r3, [r7, #16]
 8002ffe:	e014      	b.n	800302a <steeringAlgorithm+0x4e>
		{
			if (*(image + width*y + x) == 0xFFFF)
 8003000:	887b      	ldrh	r3, [r7, #2]
 8003002:	8a7a      	ldrh	r2, [r7, #18]
 8003004:	fb02 f303 	mul.w	r3, r2, r3
 8003008:	461a      	mov	r2, r3
 800300a:	8a3b      	ldrh	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800301a:	4293      	cmp	r3, r2
 800301c:	d102      	bne.n	8003024 <steeringAlgorithm+0x48>
			{
				right++;
 800301e:	8abb      	ldrh	r3, [r7, #20]
 8003020:	3301      	adds	r3, #1
 8003022:	82bb      	strh	r3, [r7, #20]
		for (uint16_t x = 0; x<width/2-1; x++) // Calculate Left Rectangle
 8003024:	8a3b      	ldrh	r3, [r7, #16]
 8003026:	3301      	adds	r3, #1
 8003028:	823b      	strh	r3, [r7, #16]
 800302a:	8a3a      	ldrh	r2, [r7, #16]
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	429a      	cmp	r2, r3
 8003036:	dbe3      	blt.n	8003000 <steeringAlgorithm+0x24>
			}
		}
		for (uint16_t x = width/2-1;x<width-1;x++) // Calculate Right Rectangle
 8003038:	887b      	ldrh	r3, [r7, #2]
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	81fb      	strh	r3, [r7, #14]
 8003042:	e014      	b.n	800306e <steeringAlgorithm+0x92>
		{
			if (*(image + width*y + x) == 0xFFFF)
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	8a7a      	ldrh	r2, [r7, #18]
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	461a      	mov	r2, r3
 800304e:	89fb      	ldrh	r3, [r7, #14]
 8003050:	4413      	add	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800305e:	4293      	cmp	r3, r2
 8003060:	d102      	bne.n	8003068 <steeringAlgorithm+0x8c>
			{
				left++;
 8003062:	8afb      	ldrh	r3, [r7, #22]
 8003064:	3301      	adds	r3, #1
 8003066:	82fb      	strh	r3, [r7, #22]
		for (uint16_t x = width/2-1;x<width-1;x++) // Calculate Right Rectangle
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	3301      	adds	r3, #1
 800306c:	81fb      	strh	r3, [r7, #14]
 800306e:	89fa      	ldrh	r2, [r7, #14]
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	3b01      	subs	r3, #1
 8003074:	429a      	cmp	r2, r3
 8003076:	dbe5      	blt.n	8003044 <steeringAlgorithm+0x68>
	for (uint16_t y = 0; y<height/4-1; y++)
 8003078:	8a7b      	ldrh	r3, [r7, #18]
 800307a:	3301      	adds	r3, #1
 800307c:	827b      	strh	r3, [r7, #18]
 800307e:	8a7a      	ldrh	r2, [r7, #18]
 8003080:	883b      	ldrh	r3, [r7, #0]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	429a      	cmp	r2, r3
 800308a:	dbb6      	blt.n	8002ffa <steeringAlgorithm+0x1e>
			}
		}
	}

	if (abs(left-right) >= 250) //find difference of number of pixels between left and right
 800308c:	8afa      	ldrh	r2, [r7, #22]
 800308e:	8abb      	ldrh	r3, [r7, #20]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	bfb8      	it	lt
 8003096:	425b      	neglt	r3, r3
 8003098:	2bf9      	cmp	r3, #249	; 0xf9
 800309a:	dd0d      	ble.n	80030b8 <steeringAlgorithm+0xdc>
	{
		if (left > right)
 800309c:	8afa      	ldrh	r2, [r7, #22]
 800309e:	8abb      	ldrh	r3, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d904      	bls.n	80030ae <steeringAlgorithm+0xd2>
		{
			TIM5->CCR1 = 1680;
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <steeringAlgorithm+0xf0>)
 80030a6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80030aa:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		TIM5->CCR1 = 3200;
	}
}
 80030ac:	e008      	b.n	80030c0 <steeringAlgorithm+0xe4>
			TIM5->CCR1 = 4200;
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <steeringAlgorithm+0xf0>)
 80030b0:	f241 0268 	movw	r2, #4200	; 0x1068
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030b6:	e003      	b.n	80030c0 <steeringAlgorithm+0xe4>
		TIM5->CCR1 = 3200;
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <steeringAlgorithm+0xf0>)
 80030ba:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80030be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40000c00 	.word	0x40000c00

080030d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b08a      	sub	sp, #40	; 0x28
 80030d6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030d8:	f001 f80a 	bl	80040f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030dc:	f000 f940 	bl	8003360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030e0:	f7fe fa5a 	bl	8001598 <MX_GPIO_Init>
  MX_CAN1_Init();
 80030e4:	f7fe f92a 	bl	800133c <MX_CAN1_Init>
  MX_CAN2_Init();
 80030e8:	f7fe f95e 	bl	80013a8 <MX_CAN2_Init>
  //MX_SPI1_Init();
  MX_USART1_UART_Init();
 80030ec:	f000 ff06 	bl	8003efc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80030f0:	f7fe fb42 	bl	8001778 <MX_I2C2_Init>
  MX_DMA_Init();
 80030f4:	f7fe fa30 	bl	8001558 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80030f8:	f000 ff2a 	bl	8003f50 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80030fc:	f000 fcf8 	bl	8003af0 <MX_TIM5_Init>
  MX_TIM10_Init();
 8003100:	f000 fd6c 	bl	8003bdc <MX_TIM10_Init>
  MX_TIM11_Init();
 8003104:	f000 fdb8 	bl	8003c78 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  led_off(LED1);
 8003108:	2201      	movs	r2, #1
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	488b      	ldr	r0, [pc, #556]	; (800333c <main+0x26c>)
 800310e:	f001 ffd9 	bl	80050c4 <HAL_GPIO_WritePin>
  led_off(LED2);
 8003112:	2201      	movs	r2, #1
 8003114:	2140      	movs	r1, #64	; 0x40
 8003116:	4889      	ldr	r0, [pc, #548]	; (800333c <main+0x26c>)
 8003118:	f001 ffd4 	bl	80050c4 <HAL_GPIO_WritePin>
  led_off(LED3);
 800311c:	2201      	movs	r2, #1
 800311e:	2120      	movs	r1, #32
 8003120:	4886      	ldr	r0, [pc, #536]	; (800333c <main+0x26c>)
 8003122:	f001 ffcf 	bl	80050c4 <HAL_GPIO_WritePin>
  led_off(LED4);
 8003126:	2201      	movs	r2, #1
 8003128:	2110      	movs	r1, #16
 800312a:	4884      	ldr	r0, [pc, #528]	; (800333c <main+0x26c>)
 800312c:	f001 ffca 	bl	80050c4 <HAL_GPIO_WritePin>
  tft_init(PIN_ON_BOTTOM, BLACK, WHITE, YELLOW, DARK_GREEN);
 8003130:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800313a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800313e:	2100      	movs	r1, #0
 8003140:	2002      	movs	r0, #2
 8003142:	f7ff f8ff 	bl	8002344 <tft_init>

  camera_GPIO_init();
 8003146:	f7fd fc7b 	bl	8000a40 <camera_GPIO_init>
  	tft_prints(0, 0, "Initing camera");
 800314a:	4a7d      	ldr	r2, [pc, #500]	; (8003340 <main+0x270>)
 800314c:	2100      	movs	r1, #0
 800314e:	2000      	movs	r0, #0
 8003150:	f7ff fc00 	bl	8002954 <tft_prints>
  	tft_update(0);
 8003154:	2000      	movs	r0, #0
 8003156:	f7ff fd5f 	bl	8002c18 <tft_update>
  	if (camera_init() == CAM_NOT_INITED || camera_init() == CAM_INIT_ERROR) {
 800315a:	f7fd fcc5 	bl	8000ae8 <camera_init>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <main+0x9e>
 8003164:	f7fd fcc0 	bl	8000ae8 <camera_init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b01      	cmp	r3, #1
 800316c:	d105      	bne.n	800317a <main+0xaa>
  		tft_prints(0, 0, "No OV7725 module");
 800316e:	4a75      	ldr	r2, [pc, #468]	; (8003344 <main+0x274>)
 8003170:	2100      	movs	r1, #0
 8003172:	2000      	movs	r0, #0
 8003174:	f7ff fbee 	bl	8002954 <tft_prints>
 8003178:	e007      	b.n	800318a <main+0xba>
  	}
  	else {
  		tft_prints(0, 0, "Inited");
 800317a:	4a73      	ldr	r2, [pc, #460]	; (8003348 <main+0x278>)
 800317c:	2100      	movs	r1, #0
 800317e:	2000      	movs	r0, #0
 8003180:	f7ff fbe8 	bl	8002954 <tft_prints>
  		cam_set_state(CAM_CAPTURING);
 8003184:	2004      	movs	r0, #4
 8003186:	f7fd fcf3 	bl	8000b70 <cam_set_state>
  	}
  	tft_update(0);
 800318a:	2000      	movs	r0, #0
 800318c:	f7ff fd44 	bl	8002c18 <tft_update>
  	cam_set_window(70, 0, QQVGA_120x160);
 8003190:	2203      	movs	r2, #3
 8003192:	2100      	movs	r1, #0
 8003194:	2046      	movs	r0, #70	; 0x46
 8003196:	f7fd fd0d 	bl	8000bb4 <cam_set_window>
  	cam_set_zoomscale(0);
 800319a:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 800334c <main+0x27c>
 800319e:	f7fd fde9 	bl	8000d74 <cam_set_zoomscale>
//  	cam_set_framesize(QQVGA_120x160);
  	cam_set_framerate(CAM_75FPS);
 80031a2:	2002      	movs	r0, #2
 80031a4:	f7fd fdbc 	bl	8000d20 <cam_set_framerate>
  	cam_set_colormode(CAM_GRAYSCALE);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fd fcf1 	bl	8000b90 <cam_set_colormode>
  //	cam_set_brightness(0);
  //
  //cam_set_saturation(0);
  //	cam_set_contrast(0);
  //	init the pwm pins//
  	pwm_init();
 80031ae:	f7ff fed9 	bl	8002f64 <pwm_init>

#define IMG_WIDTH 120
#define IMG_HEIGHT 160
  	const int WIDTH = cam_sizes[cam_get_framesize()].width, HEIGHT = cam_sizes[cam_get_framesize()].height;
 80031b2:	f7fd ffc7 	bl	8001144 <cam_get_framesize>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b65      	ldr	r3, [pc, #404]	; (8003350 <main+0x280>)
 80031bc:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	f7fd ffbf 	bl	8001144 <cam_get_framesize>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4a61      	ldr	r2, [pc, #388]	; (8003350 <main+0x280>)
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	885b      	ldrh	r3, [r3, #2]
 80031d0:	61bb      	str	r3, [r7, #24]

  	uint16_t image[HEIGHT*WIDTH];
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	603a      	str	r2, [r7, #0]
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	010b      	lsls	r3, r1, #4
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	010a      	lsls	r2, r1, #4
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	461a      	mov	r2, r3
 800320e:	2300      	movs	r3, #0
 8003210:	4692      	mov	sl, r2
 8003212:	469b      	mov	fp, r3
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8003220:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8003224:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	3307      	adds	r3, #7
 8003234:	08db      	lsrs	r3, r3, #3
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	ebad 0d03 	sub.w	sp, sp, r3
 800323c:	ab02      	add	r3, sp, #8
 800323e:	3301      	adds	r3, #1
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	613b      	str	r3, [r7, #16]
//  	uint16_t img_data[IMG_HEIGHT*IMG_WIDTH] = {0};
  	uint16_t processed[HEIGHT*WIDTH];
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	461a      	mov	r2, r3
 800325c:	2300      	movs	r3, #0
 800325e:	4690      	mov	r8, r2
 8003260:	4699      	mov	r9, r3
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800326e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8003272:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	461a      	mov	r2, r3
 8003280:	2300      	movs	r3, #0
 8003282:	4614      	mov	r4, r2
 8003284:	461d      	mov	r5, r3
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	012b      	lsls	r3, r5, #4
 8003290:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003294:	0122      	lsls	r2, r4, #4
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	3307      	adds	r3, #7
 80032a2:	08db      	lsrs	r3, r3, #3
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	ebad 0d03 	sub.w	sp, sp, r3
 80032aa:	ab02      	add	r3, sp, #8
 80032ac:	3301      	adds	r3, #1
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
  	//uint16_t printable[IMG_HEIGHT*IMG_WIDTH] = {0};

  	while (1)
  	{
  		static uint16_t last_ticks = 0;
  		if (cam_is_frame_ready())
 80032b4:	f7fd ff34 	bl	8001120 <cam_is_frame_ready>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d034      	beq.n	8003328 <main+0x258>
  		{
  			//Get image from camera
  			cam_get_rgb565(image);
 80032be:	6938      	ldr	r0, [r7, #16]
 80032c0:	f7fd ff4c 	bl	800115c <cam_get_rgb565>
  			//Commence SobelOperation:
  			if (HAL_GetTick() - last_ticks >= 100)
 80032c4:	f000 ff7a 	bl	80041bc <HAL_GetTick>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4a22      	ldr	r2, [pc, #136]	; (8003354 <main+0x284>)
 80032cc:	8812      	ldrh	r2, [r2, #0]
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	2b63      	cmp	r3, #99	; 0x63
 80032d2:	d911      	bls.n	80032f8 <main+0x228>
			{
  				blackFilter(WIDTH, HEIGHT, image, processed);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	b298      	uxth	r0, r3
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	b299      	uxth	r1, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	f7ff fdf0 	bl	8002ec4 <blackFilter>
				led_toggle(LED1);
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	4815      	ldr	r0, [pc, #84]	; (800333c <main+0x26c>)
 80032e8:	f001 ff05 	bl	80050f6 <HAL_GPIO_TogglePin>
				last_ticks = HAL_GetTick();
 80032ec:	f000 ff66 	bl	80041bc <HAL_GetTick>
 80032f0:	4603      	mov	r3, r0
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <main+0x284>)
 80032f6:	801a      	strh	r2, [r3, #0]
			}
  			steeringAlgorithm(processed, WIDTH, HEIGHT);
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	b292      	uxth	r2, r2
 8003300:	4619      	mov	r1, r3
 8003302:	68b8      	ldr	r0, [r7, #8]
 8003304:	f7ff fe6a 	bl	8002fdc <steeringAlgorithm>
  			tft_update(0);
 8003308:	2000      	movs	r0, #0
 800330a:	f7ff fc85 	bl	8002c18 <tft_update>
  			cam_rgb2printable(processed, image);
 800330e:	6939      	ldr	r1, [r7, #16]
 8003310:	68b8      	ldr	r0, [r7, #8]
 8003312:	f7fd ffa1 	bl	8001258 <cam_rgb2printable>
  			//Print Image
  			tft_print_image(image,0,0,WIDTH,HEIGHT);
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	2200      	movs	r2, #0
 8003320:	2100      	movs	r1, #0
 8003322:	6938      	ldr	r0, [r7, #16]
 8003324:	f7ff fc48 	bl	8002bb8 <tft_print_image>
  		}
  		//Motors
		TIM10->CCR1 = 620;
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <main+0x288>)
 800332a:	f44f 721b 	mov.w	r2, #620	; 0x26c
 800332e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM11->CCR1 = 620;
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <main+0x28c>)
 8003332:	f44f 721b 	mov.w	r2, #620	; 0x26c
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
  	{
 8003338:	e7bc      	b.n	80032b4 <main+0x1e4>
 800333a:	bf00      	nop
 800333c:	40020400 	.word	0x40020400
 8003340:	08007dc4 	.word	0x08007dc4
 8003344:	08007dd4 	.word	0x08007dd4
 8003348:	08007de8 	.word	0x08007de8
 800334c:	00000000 	.word	0x00000000
 8003350:	08008c98 	.word	0x08008c98
 8003354:	200057d8 	.word	0x200057d8
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800

08003360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b094      	sub	sp, #80	; 0x50
 8003364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003366:	f107 0320 	add.w	r3, r7, #32
 800336a:	2230      	movs	r2, #48	; 0x30
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f004 fcfc 	bl	8007d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003374:	f107 030c 	add.w	r3, r7, #12
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003384:	2300      	movs	r3, #0
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	4b28      	ldr	r3, [pc, #160]	; (800342c <SystemClock_Config+0xcc>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	4a27      	ldr	r2, [pc, #156]	; (800342c <SystemClock_Config+0xcc>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	6413      	str	r3, [r2, #64]	; 0x40
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <SystemClock_Config+0xcc>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033a0:	2300      	movs	r3, #0
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	4b22      	ldr	r3, [pc, #136]	; (8003430 <SystemClock_Config+0xd0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a21      	ldr	r2, [pc, #132]	; (8003430 <SystemClock_Config+0xd0>)
 80033aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <SystemClock_Config+0xd0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033bc:	2301      	movs	r3, #1
 80033be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c6:	2302      	movs	r3, #2
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80033d0:	2304      	movs	r3, #4
 80033d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80033d4:	23a8      	movs	r3, #168	; 0xa8
 80033d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033d8:	2302      	movs	r3, #2
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80033dc:	2304      	movs	r3, #4
 80033de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033e0:	f107 0320 	add.w	r3, r7, #32
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 fffd 	bl	80053e4 <HAL_RCC_OscConfig>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033f0:	f000 f820 	bl	8003434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033f4:	230f      	movs	r3, #15
 80033f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f8:	2302      	movs	r3, #2
 80033fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003400:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800340a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	2105      	movs	r1, #5
 8003412:	4618      	mov	r0, r3
 8003414:	f002 fa5e 	bl	80058d4 <HAL_RCC_ClockConfig>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800341e:	f000 f809 	bl	8003434 <Error_Handler>
  }
}
 8003422:	bf00      	nop
 8003424:	3750      	adds	r7, #80	; 0x50
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800
 8003430:	40007000 	.word	0x40007000

08003434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003438:	b672      	cpsid	i
}
 800343a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {}
 800343c:	e7fe      	b.n	800343c <Error_Handler+0x8>
	...

08003440 <SCCB_GPIO_init>:
#include "tim.h"

#include "stm32f4xx.h"
#define SCCB_TIMER htim5

void SCCB_GPIO_init(void) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure = {0};
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003454:	2300      	movs	r3, #0
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <SCCB_GPIO_init+0x6c>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	4a13      	ldr	r2, [pc, #76]	; (80034ac <SCCB_GPIO_init+0x6c>)
 800345e:	f043 0302 	orr.w	r3, r3, #2
 8003462:	6313      	str	r3, [r2, #48]	; 0x30
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <SCCB_GPIO_init+0x6c>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStructure.Pin = OV7725_SDA_PIN;
 8003470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003474:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003476:	2301      	movs	r3, #1
 8003478:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800347a:	2311      	movs	r3, #17
 800347c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(OV7725_SDA_PORT, &GPIO_InitStructure);
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	4619      	mov	r1, r3
 8003482:	480b      	ldr	r0, [pc, #44]	; (80034b0 <SCCB_GPIO_init+0x70>)
 8003484:	f001 fc6a 	bl	8004d5c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = OV7725_SCL_PIN;
 8003488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800348c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(OV7725_SCL_PORT, &GPIO_InitStructure);
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	4619      	mov	r1, r3
 8003492:	4807      	ldr	r0, [pc, #28]	; (80034b0 <SCCB_GPIO_init+0x70>)
 8003494:	f001 fc62 	bl	8004d5c <HAL_GPIO_Init>
	HAL_TIM_Base_Init(&SCCB_TIMER);
 8003498:	4806      	ldr	r0, [pc, #24]	; (80034b4 <SCCB_GPIO_init+0x74>)
 800349a:	f003 f943 	bl	8006724 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&SCCB_TIMER);
 800349e:	4805      	ldr	r0, [pc, #20]	; (80034b4 <SCCB_GPIO_init+0x74>)
 80034a0:	f003 f990 	bl	80067c4 <HAL_TIM_Base_Start>
}
 80034a4:	bf00      	nop
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40020400 	.word	0x40020400
 80034b4:	20005894 	.word	0x20005894

080034b8 <delay_us>:

static inline void delay_us(uint16_t us) {
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&SCCB_TIMER, 0);
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <delay_us+0x30>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&SCCB_TIMER) < us)
 80034ca:	bf00      	nop
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <delay_us+0x30>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d3f9      	bcc.n	80034cc <delay_us+0x14>
		;
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20005894 	.word	0x20005894

080034ec <SCCB_delay>:

static inline void SCCB_delay(void) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
	// volatile uint16_t i = 400;
	// while (i--)
	// 	;
	delay_us(12); // min 12us
 80034f0:	200c      	movs	r0, #12
 80034f2:	f7ff ffe1 	bl	80034b8 <delay_us>
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <SCCB_start>:

static inline SCCBState SCCB_start(void) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
	SDA_H;
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <SCCB_start+0x60>)
 8003502:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003506:	619a      	str	r2, [r3, #24]
	SCL_H;
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <SCCB_start+0x60>)
 800350a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003510:	f7ff ffec 	bl	80034ec <SCCB_delay>
	if (!SDA_READ)
 8003514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003518:	4810      	ldr	r0, [pc, #64]	; (800355c <SCCB_start+0x60>)
 800351a:	f001 fdbb 	bl	8005094 <HAL_GPIO_ReadPin>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <SCCB_start+0x2c>
		return SCCB_FAIL; // If SDA is low, bus is busy
 8003524:	2300      	movs	r3, #0
 8003526:	e016      	b.n	8003556 <SCCB_start+0x5a>
	SDA_L;
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <SCCB_start+0x60>)
 800352a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800352e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003530:	f7ff ffdc 	bl	80034ec <SCCB_delay>
	if (SDA_READ)
 8003534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003538:	4808      	ldr	r0, [pc, #32]	; (800355c <SCCB_start+0x60>)
 800353a:	f001 fdab 	bl	8005094 <HAL_GPIO_ReadPin>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <SCCB_start+0x4c>
		return SCCB_FAIL; // If SDA is high, bus error
 8003544:	2300      	movs	r3, #0
 8003546:	e006      	b.n	8003556 <SCCB_start+0x5a>
	SDA_L;
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <SCCB_start+0x60>)
 800354a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800354e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003550:	f7ff ffcc 	bl	80034ec <SCCB_delay>
	return SCCB_OK;
 8003554:	2301      	movs	r3, #1
}
 8003556:	4618      	mov	r0, r3
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40020400 	.word	0x40020400

08003560 <SCCB_stop>:

static inline void SCCB_stop(void) {
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
	SCL_L;
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <SCCB_stop+0x38>)
 8003566:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800356a:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 800356c:	f7ff ffbe 	bl	80034ec <SCCB_delay>
	SDA_L;
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <SCCB_stop+0x38>)
 8003572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003576:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003578:	f7ff ffb8 	bl	80034ec <SCCB_delay>
	SCL_H;
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <SCCB_stop+0x38>)
 800357e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003582:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003584:	f7ff ffb2 	bl	80034ec <SCCB_delay>
	SDA_H;
 8003588:	4b03      	ldr	r3, [pc, #12]	; (8003598 <SCCB_stop+0x38>)
 800358a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800358e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003590:	f7ff ffac 	bl	80034ec <SCCB_delay>
}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40020400 	.word	0x40020400

0800359c <SCCB_ack>:

static inline void SCCB_ack(void) {
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
	SCL_L;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <SCCB_ack+0x38>)
 80035a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035a6:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80035a8:	f7ff ffa0 	bl	80034ec <SCCB_delay>
	SDA_L;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <SCCB_ack+0x38>)
 80035ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035b2:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80035b4:	f7ff ff9a 	bl	80034ec <SCCB_delay>
	SCL_H;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <SCCB_ack+0x38>)
 80035ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035be:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80035c0:	f7ff ff94 	bl	80034ec <SCCB_delay>
	SCL_L;
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <SCCB_ack+0x38>)
 80035c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035ca:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80035cc:	f7ff ff8e 	bl	80034ec <SCCB_delay>
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40020400 	.word	0x40020400

080035d8 <SCCB_noAck>:

static inline void SCCB_noAck(void) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
	SCL_L;
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <SCCB_noAck+0x38>)
 80035de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035e2:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80035e4:	f7ff ff82 	bl	80034ec <SCCB_delay>
	SDA_H;
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <SCCB_noAck+0x38>)
 80035ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ee:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80035f0:	f7ff ff7c 	bl	80034ec <SCCB_delay>
	SCL_H;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <SCCB_noAck+0x38>)
 80035f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fa:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 80035fc:	f7ff ff76 	bl	80034ec <SCCB_delay>
	SCL_L;
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <SCCB_noAck+0x38>)
 8003602:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003606:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003608:	f7ff ff70 	bl	80034ec <SCCB_delay>
}
 800360c:	bf00      	nop
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40020400 	.word	0x40020400

08003614 <SCCB_waitAck>:

static inline SCCBState SCCB_waitAck(void) {
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
	SCL_L;
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <SCCB_waitAck+0x54>)
 800361a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800361e:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003620:	f7ff ff64 	bl	80034ec <SCCB_delay>
	SDA_H;
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <SCCB_waitAck+0x54>)
 8003626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800362a:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 800362c:	f7ff ff5e 	bl	80034ec <SCCB_delay>
	SCL_H;
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <SCCB_waitAck+0x54>)
 8003632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003636:	619a      	str	r2, [r3, #24]
	SCCB_delay();
 8003638:	f7ff ff58 	bl	80034ec <SCCB_delay>
	if (SDA_READ) {
 800363c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003640:	4809      	ldr	r0, [pc, #36]	; (8003668 <SCCB_waitAck+0x54>)
 8003642:	f001 fd27 	bl	8005094 <HAL_GPIO_ReadPin>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <SCCB_waitAck+0x44>
		SCL_L;
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <SCCB_waitAck+0x54>)
 800364e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003652:	619a      	str	r2, [r3, #24]
		return SCCB_FAIL;
 8003654:	2300      	movs	r3, #0
 8003656:	e004      	b.n	8003662 <SCCB_waitAck+0x4e>
	}
	SCL_L;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <SCCB_waitAck+0x54>)
 800365a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800365e:	619a      	str	r2, [r3, #24]
	return SCCB_OK;
 8003660:	2301      	movs	r3, #1
}
 8003662:	4618      	mov	r0, r3
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40020400 	.word	0x40020400

0800366c <SCCB_TxByte>:

static inline void SCCB_TxByte(uint8_t SendByte) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t i = 8;
 8003676:	2308      	movs	r3, #8
 8003678:	73fb      	strb	r3, [r7, #15]
	while (i--) {
 800367a:	e01d      	b.n	80036b8 <SCCB_TxByte+0x4c>
		SCL_L;
 800367c:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <SCCB_TxByte+0x6c>)
 800367e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003682:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8003684:	f7ff ff32 	bl	80034ec <SCCB_delay>
		if (SendByte & 0x80) {
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	2b00      	cmp	r3, #0
 800368e:	da04      	bge.n	800369a <SCCB_TxByte+0x2e>
			SDA_H;
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <SCCB_TxByte+0x6c>)
 8003692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003696:	619a      	str	r2, [r3, #24]
 8003698:	e003      	b.n	80036a2 <SCCB_TxByte+0x36>
		} else {
			SDA_L;
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <SCCB_TxByte+0x6c>)
 800369c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036a0:	619a      	str	r2, [r3, #24]
		}
		SendByte <<= 1;
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	71fb      	strb	r3, [r7, #7]
		SCCB_delay();
 80036a8:	f7ff ff20 	bl	80034ec <SCCB_delay>
		SCL_H;
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <SCCB_TxByte+0x6c>)
 80036ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b2:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 80036b4:	f7ff ff1a 	bl	80034ec <SCCB_delay>
	while (i--) {
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	1e5a      	subs	r2, r3, #1
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	73fa      	strb	r2, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1da      	bne.n	800367c <SCCB_TxByte+0x10>
	}
	SCL_L;
 80036c6:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <SCCB_TxByte+0x6c>)
 80036c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40020400 	.word	0x40020400

080036dc <SCCB_RxByte>:

static inline uint8_t SCCB_RxByte(void) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
	volatile uint8_t i = 8;
 80036e2:	2308      	movs	r3, #8
 80036e4:	71bb      	strb	r3, [r7, #6]
	uint8_t ReceiveByte = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	71fb      	strb	r3, [r7, #7]

	SDA_H;
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <SCCB_RxByte+0x70>)
 80036ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f0:	619a      	str	r2, [r3, #24]
	while (i--) {
 80036f2:	e01a      	b.n	800372a <SCCB_RxByte+0x4e>
		ReceiveByte <<= 1;
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	71fb      	strb	r3, [r7, #7]
		SCL_L;
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <SCCB_RxByte+0x70>)
 80036fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003700:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 8003702:	f7ff fef3 	bl	80034ec <SCCB_delay>
		SCL_H;
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <SCCB_RxByte+0x70>)
 8003708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800370c:	619a      	str	r2, [r3, #24]
		SCCB_delay();
 800370e:	f7ff feed 	bl	80034ec <SCCB_delay>
		if (SDA_READ) {
 8003712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003716:	480d      	ldr	r0, [pc, #52]	; (800374c <SCCB_RxByte+0x70>)
 8003718:	f001 fcbc 	bl	8005094 <HAL_GPIO_ReadPin>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <SCCB_RxByte+0x4e>
			ReceiveByte |= 0x01;
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	71fb      	strb	r3, [r7, #7]
	while (i--) {
 800372a:	79bb      	ldrb	r3, [r7, #6]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	1e5a      	subs	r2, r3, #1
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	71ba      	strb	r2, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1dd      	bne.n	80036f4 <SCCB_RxByte+0x18>
		}
	}
	SCL_L;
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <SCCB_RxByte+0x70>)
 800373a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800373e:	619a      	str	r2, [r3, #24]
	return ReceiveByte & 0xFF;
 8003740:	79fb      	ldrb	r3, [r7, #7]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40020400 	.word	0x40020400

08003750 <SCCB_send_byte>:

SCCBState SCCB_send_byte(uint16_t WriteAddress, uint8_t SendByte) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	460a      	mov	r2, r1
 800375a:	80fb      	strh	r3, [r7, #6]
 800375c:	4613      	mov	r3, r2
 800375e:	717b      	strb	r3, [r7, #5]
	if (!SCCB_start()) {
 8003760:	f7ff fecc 	bl	80034fc <SCCB_start>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <SCCB_send_byte+0x1e>
		return SCCB_FAIL;
 800376a:	2300      	movs	r3, #0
 800376c:	e01b      	b.n	80037a6 <SCCB_send_byte+0x56>
	}
	SCCB_TxByte(OV7725_ADDR); // device address
 800376e:	2042      	movs	r0, #66	; 0x42
 8003770:	f7ff ff7c 	bl	800366c <SCCB_TxByte>
	if (!SCCB_waitAck()) {
 8003774:	f7ff ff4e 	bl	8003614 <SCCB_waitAck>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <SCCB_send_byte+0x36>
		SCCB_stop();
 800377e:	f7ff feef 	bl	8003560 <SCCB_stop>
		return SCCB_FAIL;
 8003782:	2300      	movs	r3, #0
 8003784:	e00f      	b.n	80037a6 <SCCB_send_byte+0x56>
	}
	SCCB_TxByte((uint8_t)(WriteAddress & 0x00FF));
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff6e 	bl	800366c <SCCB_TxByte>
	SCCB_waitAck();
 8003790:	f7ff ff40 	bl	8003614 <SCCB_waitAck>
	SCCB_TxByte(SendByte);
 8003794:	797b      	ldrb	r3, [r7, #5]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff68 	bl	800366c <SCCB_TxByte>
	SCCB_waitAck();
 800379c:	f7ff ff3a 	bl	8003614 <SCCB_waitAck>
	SCCB_stop();
 80037a0:	f7ff fede 	bl	8003560 <SCCB_stop>
	return SCCB_OK;
 80037a4:	2301      	movs	r3, #1
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <SCCB_read_byte>:

SCCBState SCCB_read_byte(uint8_t addr, uint8_t* buf, uint16_t len) {
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	6039      	str	r1, [r7, #0]
 80037b8:	71fb      	strb	r3, [r7, #7]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80bb      	strh	r3, [r7, #4]
	if (!SCCB_start()) {
 80037be:	f7ff fe9d 	bl	80034fc <SCCB_start>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <SCCB_read_byte+0x1e>
		return SCCB_FAIL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e040      	b.n	800384e <SCCB_read_byte+0xa0>
	}
	SCCB_TxByte(OV7725_ADDR); // device address
 80037cc:	2042      	movs	r0, #66	; 0x42
 80037ce:	f7ff ff4d 	bl	800366c <SCCB_TxByte>
	if (!SCCB_waitAck()) {
 80037d2:	f7ff ff1f 	bl	8003614 <SCCB_waitAck>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <SCCB_read_byte+0x36>
		SCCB_stop();
 80037dc:	f7ff fec0 	bl	8003560 <SCCB_stop>
		return SCCB_FAIL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e034      	b.n	800384e <SCCB_read_byte+0xa0>
	}
	SCCB_TxByte(addr);
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff40 	bl	800366c <SCCB_TxByte>
	SCCB_waitAck();
 80037ec:	f7ff ff12 	bl	8003614 <SCCB_waitAck>
	SCCB_stop();
 80037f0:	f7ff feb6 	bl	8003560 <SCCB_stop>

	if (!SCCB_start()) {
 80037f4:	f7ff fe82 	bl	80034fc <SCCB_start>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <SCCB_read_byte+0x54>
		return SCCB_FAIL;
 80037fe:	2300      	movs	r3, #0
 8003800:	e025      	b.n	800384e <SCCB_read_byte+0xa0>
	}
	SCCB_TxByte(OV7725_ADDR + 1);
 8003802:	2043      	movs	r0, #67	; 0x43
 8003804:	f7ff ff32 	bl	800366c <SCCB_TxByte>
	if (!SCCB_waitAck()) {
 8003808:	f7ff ff04 	bl	8003614 <SCCB_waitAck>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d117      	bne.n	8003842 <SCCB_read_byte+0x94>
		SCCB_stop();
 8003812:	f7ff fea5 	bl	8003560 <SCCB_stop>
		return SCCB_FAIL;
 8003816:	2300      	movs	r3, #0
 8003818:	e019      	b.n	800384e <SCCB_read_byte+0xa0>
	}
	while (len) {
		*buf = SCCB_RxByte();
 800381a:	f7ff ff5f 	bl	80036dc <SCCB_RxByte>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	701a      	strb	r2, [r3, #0]
		if (len == 1) {
 8003826:	88bb      	ldrh	r3, [r7, #4]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d102      	bne.n	8003832 <SCCB_read_byte+0x84>
			SCCB_noAck();
 800382c:	f7ff fed4 	bl	80035d8 <SCCB_noAck>
 8003830:	e001      	b.n	8003836 <SCCB_read_byte+0x88>
		} else {
			SCCB_ack();
 8003832:	f7ff feb3 	bl	800359c <SCCB_ack>
		}
		buf++;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	603b      	str	r3, [r7, #0]
		len--;
 800383c:	88bb      	ldrh	r3, [r7, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	80bb      	strh	r3, [r7, #4]
	while (len) {
 8003842:	88bb      	ldrh	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e8      	bne.n	800381a <SCCB_read_byte+0x6c>
	}
	SCCB_stop();
 8003848:	f7ff fe8a 	bl	8003560 <SCCB_stop>
	return SCCB_OK;
 800384c:	2301      	movs	r3, #1
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <MX_SPI1_Init+0x64>)
 800385e:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <MX_SPI1_Init+0x68>)
 8003860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003862:	4b16      	ldr	r3, [pc, #88]	; (80038bc <MX_SPI1_Init+0x64>)
 8003864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <MX_SPI1_Init+0x64>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <MX_SPI1_Init+0x64>)
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <MX_SPI1_Init+0x64>)
 8003878:	2200      	movs	r2, #0
 800387a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <MX_SPI1_Init+0x64>)
 800387e:	2200      	movs	r2, #0
 8003880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <MX_SPI1_Init+0x64>)
 8003884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <MX_SPI1_Init+0x64>)
 800388c:	2200      	movs	r2, #0
 800388e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <MX_SPI1_Init+0x64>)
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <MX_SPI1_Init+0x64>)
 8003898:	2200      	movs	r2, #0
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800389c:	4b07      	ldr	r3, [pc, #28]	; (80038bc <MX_SPI1_Init+0x64>)
 800389e:	2200      	movs	r2, #0
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <MX_SPI1_Init+0x64>)
 80038a4:	220a      	movs	r2, #10
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038a8:	4804      	ldr	r0, [pc, #16]	; (80038bc <MX_SPI1_Init+0x64>)
 80038aa:	f002 fa33 	bl	8005d14 <HAL_SPI_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038b4:	f7ff fdbe 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200057dc 	.word	0x200057dc
 80038c0:	40013000 	.word	0x40013000

080038c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a39      	ldr	r2, [pc, #228]	; (80039c8 <HAL_SPI_MspInit+0x104>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d16b      	bne.n	80039be <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	4b38      	ldr	r3, [pc, #224]	; (80039cc <HAL_SPI_MspInit+0x108>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	4a37      	ldr	r2, [pc, #220]	; (80039cc <HAL_SPI_MspInit+0x108>)
 80038f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038f4:	6453      	str	r3, [r2, #68]	; 0x44
 80038f6:	4b35      	ldr	r3, [pc, #212]	; (80039cc <HAL_SPI_MspInit+0x108>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <HAL_SPI_MspInit+0x108>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a30      	ldr	r2, [pc, #192]	; (80039cc <HAL_SPI_MspInit+0x108>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <HAL_SPI_MspInit+0x108>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MOSI_Pin;
 800391e:	23a0      	movs	r3, #160	; 0xa0
 8003920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392a:	2303      	movs	r3, #3
 800392c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800392e:	2305      	movs	r3, #5
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	4619      	mov	r1, r3
 8003938:	4825      	ldr	r0, [pc, #148]	; (80039d0 <HAL_SPI_MspInit+0x10c>)
 800393a:	f001 fa0f 	bl	8004d5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800393e:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 8003940:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <HAL_SPI_MspInit+0x114>)
 8003942:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003944:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 8003946:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800394a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 8003954:	2200      	movs	r2, #0
 8003956:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 800395a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800395e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003960:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 8003962:	2200      	movs	r2, #0
 8003964:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 800396e:	2200      	movs	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 800397a:	2204      	movs	r2, #4
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 8003980:	2203      	movs	r2, #3
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_INC16;
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 8003986:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003992:	4810      	ldr	r0, [pc, #64]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 8003994:	f000 fe50 	bl	8004638 <HAL_DMA_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 800399e:	f7ff fd49 	bl	8003434 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 80039a6:	649a      	str	r2, [r3, #72]	; 0x48
 80039a8:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_SPI_MspInit+0x110>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	2100      	movs	r1, #0
 80039b2:	2023      	movs	r0, #35	; 0x23
 80039b4:	f000 fe09 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039b8:	2023      	movs	r0, #35	; 0x23
 80039ba:	f000 fe22 	bl	8004602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039be:	bf00      	nop
 80039c0:	3728      	adds	r7, #40	; 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40013000 	.word	0x40013000
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40020000 	.word	0x40020000
 80039d4:	20005834 	.word	0x20005834
 80039d8:	40026458 	.word	0x40026458

080039dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <HAL_MspInit+0x4c>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a0f      	ldr	r2, [pc, #60]	; (8003a28 <HAL_MspInit+0x4c>)
 80039ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_MspInit+0x4c>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_MspInit+0x4c>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <HAL_MspInit+0x4c>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_MspInit+0x4c>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800

08003a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a30:	e7fe      	b.n	8003a30 <NMI_Handler+0x4>

08003a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a36:	e7fe      	b.n	8003a36 <HardFault_Handler+0x4>

08003a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a3c:	e7fe      	b.n	8003a3c <MemManage_Handler+0x4>

08003a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a42:	e7fe      	b.n	8003a42 <BusFault_Handler+0x4>

08003a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <UsageFault_Handler+0x4>

08003a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a78:	f000 fb8c 	bl	8004194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <SPI1_IRQHandler+0x10>)
 8003a86:	f002 fbc1 	bl	800620c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200057dc 	.word	0x200057dc

08003a94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAM_VSYNC_Pin);
 8003a98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a9c:	f001 fb46 	bl	800512c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003aa0:	bf00      	nop
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <TIM5_IRQHandler+0x10>)
 8003aaa:	f003 f815 	bl	8006ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20005894 	.word	0x20005894

08003ab8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <DMA2_Stream3_IRQHandler+0x10>)
 8003abe:	f000 fee3 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20005834 	.word	0x20005834

08003acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <SystemInit+0x20>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	4a05      	ldr	r2, [pc, #20]	; (8003aec <SystemInit+0x20>)
 8003ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <MX_TIM5_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08e      	sub	sp, #56	; 0x38
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b04:	f107 0320 	add.w	r3, r7, #32
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
 8003b1c:	615a      	str	r2, [r3, #20]
 8003b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b20:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b22:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <MX_TIM5_Init+0xe8>)
 8003b24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8003b26:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b28:	2253      	movs	r2, #83	; 0x53
 8003b2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2c:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8003b32:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b38:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b3e:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003b44:	4823      	ldr	r0, [pc, #140]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b46:	f002 fded 	bl	8006724 <HAL_TIM_Base_Init>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8003b50:	f7ff fc70 	bl	8003434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b5e:	4619      	mov	r1, r3
 8003b60:	481c      	ldr	r0, [pc, #112]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b62:	f003 f983 	bl	8006e6c <HAL_TIM_ConfigClockSource>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8003b6c:	f7ff fc62 	bl	8003434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003b70:	4818      	ldr	r0, [pc, #96]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b72:	f002 fe8f 	bl	8006894 <HAL_TIM_PWM_Init>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8003b7c:	f7ff fc5a 	bl	8003434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b88:	f107 0320 	add.w	r3, r7, #32
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4811      	ldr	r0, [pc, #68]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003b90:	f003 fd76 	bl	8007680 <HAL_TIMEx_MasterConfigSynchronization>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8003b9a:	f7ff fc4b 	bl	8003434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b9e:	2360      	movs	r3, #96	; 0x60
 8003ba0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4807      	ldr	r0, [pc, #28]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003bb6:	f003 f897 	bl	8006ce8 <HAL_TIM_PWM_ConfigChannel>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8003bc0:	f7ff fc38 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003bc4:	4803      	ldr	r0, [pc, #12]	; (8003bd4 <MX_TIM5_Init+0xe4>)
 8003bc6:	f000 f90f 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003bca:	bf00      	nop
 8003bcc:	3738      	adds	r7, #56	; 0x38
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20005894 	.word	0x20005894
 8003bd8:	40000c00 	.word	0x40000c00

08003bdc <MX_TIM10_Init>:
  /* USER CODE END TIM6_Init 2 */

}
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]
 8003bf0:	615a      	str	r2, [r3, #20]
 8003bf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <MX_TIM10_Init+0x98>)
 8003bf8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003bfc:	2253      	movs	r2, #83	; 0x53
 8003bfe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003c06:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0e:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c14:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003c1a:	4815      	ldr	r0, [pc, #84]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003c1c:	f002 fd82 	bl	8006724 <HAL_TIM_Base_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003c26:	f7ff fc05 	bl	8003434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003c2a:	4811      	ldr	r0, [pc, #68]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003c2c:	f002 fe32 	bl	8006894 <HAL_TIM_PWM_Init>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003c36:	f7ff fbfd 	bl	8003434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c3a:	2360      	movs	r3, #96	; 0x60
 8003c3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c4a:	1d3b      	adds	r3, r7, #4
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4807      	ldr	r0, [pc, #28]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003c52:	f003 f849 	bl	8006ce8 <HAL_TIM_PWM_ConfigChannel>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003c5c:	f7ff fbea 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003c60:	4803      	ldr	r0, [pc, #12]	; (8003c70 <MX_TIM10_Init+0x94>)
 8003c62:	f000 f8c1 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003c66:	bf00      	nop
 8003c68:	3720      	adds	r7, #32
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200058dc 	.word	0x200058dc
 8003c74:	40014400 	.word	0x40014400

08003c78 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	611a      	str	r2, [r3, #16]
 8003c8c:	615a      	str	r2, [r3, #20]
 8003c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003c90:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003c92:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <MX_TIM11_Init+0x98>)
 8003c94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8003c96:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003c98:	2253      	movs	r2, #83	; 0x53
 8003c9a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003caa:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb0:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003cb6:	4815      	ldr	r0, [pc, #84]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003cb8:	f002 fd34 	bl	8006724 <HAL_TIM_Base_Init>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003cc2:	f7ff fbb7 	bl	8003434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003cc6:	4811      	ldr	r0, [pc, #68]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003cc8:	f002 fde4 	bl	8006894 <HAL_TIM_PWM_Init>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003cd2:	f7ff fbaf 	bl	8003434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cd6:	2360      	movs	r3, #96	; 0x60
 8003cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4619      	mov	r1, r3
 8003cec:	4807      	ldr	r0, [pc, #28]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003cee:	f002 fffb 	bl	8006ce8 <HAL_TIM_PWM_ConfigChannel>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003cf8:	f7ff fb9c 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003cfc:	4803      	ldr	r0, [pc, #12]	; (8003d0c <MX_TIM11_Init+0x94>)
 8003cfe:	f000 f873 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003d02:	bf00      	nop
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20005924 	.word	0x20005924
 8003d10:	40014800 	.word	0x40014800

08003d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2c      	ldr	r2, [pc, #176]	; (8003dd4 <HAL_TIM_Base_MspInit+0xc0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d116      	bne.n	8003d54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003d30:	f043 0308 	orr.w	r3, r3, #8
 8003d34:	6413      	str	r3, [r2, #64]	; 0x40
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2100      	movs	r1, #0
 8003d46:	2032      	movs	r0, #50	; 0x32
 8003d48:	f000 fc3f 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003d4c:	2032      	movs	r0, #50	; 0x32
 8003d4e:	f000 fc58 	bl	8004602 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003d52:	e03a      	b.n	8003dca <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <HAL_TIM_Base_MspInit+0xc8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003d68:	f043 0310 	orr.w	r3, r3, #16
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]
}
 8003d7a:	e026      	b.n	8003dca <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d94:	6453      	str	r3, [r2, #68]	; 0x44
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	e012      	b.n	8003dca <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_TIM_Base_MspInit+0xd0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10d      	bne.n	8003dca <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_TIM_Base_MspInit+0xc4>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40000c00 	.word	0x40000c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40001000 	.word	0x40001000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800

08003de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a37      	ldr	r2, [pc, #220]	; (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d11e      	bne.n	8003e48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a35      	ldr	r2, [pc, #212]	; (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = servo_Pin;
 8003e26:	2301      	movs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003e36:	2302      	movs	r3, #2
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 8003e3a:	f107 0314 	add.w	r3, r7, #20
 8003e3e:	4619      	mov	r1, r3
 8003e40:	482a      	ldr	r0, [pc, #168]	; (8003eec <HAL_TIM_MspPostInit+0x104>)
 8003e42:	f000 ff8b 	bl	8004d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003e46:	e048      	b.n	8003eda <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM10)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <HAL_TIM_MspPostInit+0x108>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d11f      	bne.n	8003e92 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	6313      	str	r3, [r2, #48]	; 0x30
 8003e62:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENA_Pin;
 8003e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e74:	2302      	movs	r3, #2
 8003e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003e80:	2303      	movs	r3, #3
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	4619      	mov	r1, r3
 8003e8a:	481a      	ldr	r0, [pc, #104]	; (8003ef4 <HAL_TIM_MspPostInit+0x10c>)
 8003e8c:	f000 ff66 	bl	8004d5c <HAL_GPIO_Init>
}
 8003e90:	e023      	b.n	8003eda <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM11)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_TIM_MspPostInit+0x110>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d11e      	bne.n	8003eda <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003ea6:	f043 0302 	orr.w	r3, r3, #2
 8003eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8003eac:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENB_Pin;
 8003eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENB_GPIO_Port, &GPIO_InitStruct);
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4807      	ldr	r0, [pc, #28]	; (8003ef4 <HAL_TIM_MspPostInit+0x10c>)
 8003ed6:	f000 ff41 	bl	8004d5c <HAL_GPIO_Init>
}
 8003eda:	bf00      	nop
 8003edc:	3728      	adds	r7, #40	; 0x28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40020000 	.word	0x40020000
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40020400 	.word	0x40020400
 8003ef8:	40014800 	.word	0x40014800

08003efc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <MX_USART1_UART_Init+0x4c>)
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <MX_USART1_UART_Init+0x50>)
 8003f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <MX_USART1_UART_Init+0x4c>)
 8003f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <MX_USART1_UART_Init+0x4c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <MX_USART1_UART_Init+0x4c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <MX_USART1_UART_Init+0x4c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <MX_USART1_UART_Init+0x4c>)
 8003f22:	220c      	movs	r2, #12
 8003f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <MX_USART1_UART_Init+0x4c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <MX_USART1_UART_Init+0x4c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f32:	4805      	ldr	r0, [pc, #20]	; (8003f48 <MX_USART1_UART_Init+0x4c>)
 8003f34:	f003 fc34 	bl	80077a0 <HAL_UART_Init>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f3e:	f7ff fa79 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	2000596c 	.word	0x2000596c
 8003f4c:	40011000 	.word	0x40011000

08003f50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f56:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <MX_USART2_UART_Init+0x50>)
 8003f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f76:	220c      	movs	r2, #12
 8003f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f88:	f003 fc0a 	bl	80077a0 <HAL_UART_Init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f92:	f7ff fa4f 	bl	8003434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200059b0 	.word	0x200059b0
 8003fa0:	40004400 	.word	0x40004400

08003fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	; 0x30
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 031c 	add.w	r3, r7, #28
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a32      	ldr	r2, [pc, #200]	; (800408c <HAL_UART_MspInit+0xe8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d12d      	bne.n	8004022 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <HAL_UART_MspInit+0xec>)
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	4a30      	ldr	r2, [pc, #192]	; (8004090 <HAL_UART_MspInit+0xec>)
 8003fd0:	f043 0310 	orr.w	r3, r3, #16
 8003fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd6:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <HAL_UART_MspInit+0xec>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	4b2a      	ldr	r3, [pc, #168]	; (8004090 <HAL_UART_MspInit+0xec>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a29      	ldr	r2, [pc, #164]	; (8004090 <HAL_UART_MspInit+0xec>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b27      	ldr	r3, [pc, #156]	; (8004090 <HAL_UART_MspInit+0xec>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ffe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400c:	2303      	movs	r3, #3
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004010:	2307      	movs	r3, #7
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004014:	f107 031c 	add.w	r3, r7, #28
 8004018:	4619      	mov	r1, r3
 800401a:	481e      	ldr	r0, [pc, #120]	; (8004094 <HAL_UART_MspInit+0xf0>)
 800401c:	f000 fe9e 	bl	8004d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004020:	e030      	b.n	8004084 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <HAL_UART_MspInit+0xf4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d12b      	bne.n	8004084 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_UART_MspInit+0xec>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <HAL_UART_MspInit+0xec>)
 8004036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403a:	6413      	str	r3, [r2, #64]	; 0x40
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_UART_MspInit+0xec>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_UART_MspInit+0xec>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <HAL_UART_MspInit+0xec>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6313      	str	r3, [r2, #48]	; 0x30
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <HAL_UART_MspInit+0xec>)
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004064:	230c      	movs	r3, #12
 8004066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004068:	2302      	movs	r3, #2
 800406a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004074:	2307      	movs	r3, #7
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004078:	f107 031c 	add.w	r3, r7, #28
 800407c:	4619      	mov	r1, r3
 800407e:	4805      	ldr	r0, [pc, #20]	; (8004094 <HAL_UART_MspInit+0xf0>)
 8004080:	f000 fe6c 	bl	8004d5c <HAL_GPIO_Init>
}
 8004084:	bf00      	nop
 8004086:	3730      	adds	r7, #48	; 0x30
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40011000 	.word	0x40011000
 8004090:	40023800 	.word	0x40023800
 8004094:	40020000 	.word	0x40020000
 8004098:	40004400 	.word	0x40004400

0800409c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800409c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040a0:	480d      	ldr	r0, [pc, #52]	; (80040d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040a2:	490e      	ldr	r1, [pc, #56]	; (80040dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040a4:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040b8:	4c0b      	ldr	r4, [pc, #44]	; (80040e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80040c6:	f7ff fd01 	bl	8003acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040ca:	f003 fe2b 	bl	8007d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ce:	f7fe ffff 	bl	80030d0 <main>
  bx  lr    
 80040d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80040d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040dc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80040e0:	08008ce8 	.word	0x08008ce8
  ldr r2, =_sbss
 80040e4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80040e8:	200059f8 	.word	0x200059f8

080040ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040ec:	e7fe      	b.n	80040ec <ADC_IRQHandler>
	...

080040f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_Init+0x40>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <HAL_Init+0x40>)
 80040fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_Init+0x40>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a0a      	ldr	r2, [pc, #40]	; (8004130 <HAL_Init+0x40>)
 8004106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_Init+0x40>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a07      	ldr	r2, [pc, #28]	; (8004130 <HAL_Init+0x40>)
 8004112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004118:	2003      	movs	r0, #3
 800411a:	f000 fa4b 	bl	80045b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800411e:	200f      	movs	r0, #15
 8004120:	f000 f808 	bl	8004134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004124:	f7ff fc5a 	bl	80039dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00

08004134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_InitTick+0x54>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_InitTick+0x58>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	4619      	mov	r1, r3
 8004146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800414a:	fbb3 f3f1 	udiv	r3, r3, r1
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fa63 	bl	800461e <HAL_SYSTICK_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e00e      	b.n	8004180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	d80a      	bhi.n	800417e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004168:	2200      	movs	r2, #0
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	f000 fa2b 	bl	80045ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004174:	4a06      	ldr	r2, [pc, #24]	; (8004190 <HAL_InitTick+0x5c>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	200000ac 	.word	0x200000ac
 800418c:	200000b4 	.word	0x200000b4
 8004190:	200000b0 	.word	0x200000b0

08004194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_IncTick+0x20>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_IncTick+0x24>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4413      	add	r3, r2
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <HAL_IncTick+0x24>)
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	200000b4 	.word	0x200000b4
 80041b8:	200059f4 	.word	0x200059f4

080041bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return uwTick;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_GetTick+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	200059f4 	.word	0x200059f4

080041d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041dc:	f7ff ffee 	bl	80041bc <HAL_GetTick>
 80041e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d005      	beq.n	80041fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_Delay+0x44>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041fa:	bf00      	nop
 80041fc:	f7ff ffde 	bl	80041bc <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	429a      	cmp	r2, r3
 800420a:	d8f7      	bhi.n	80041fc <HAL_Delay+0x28>
  {
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200000b4 	.word	0x200000b4

0800421c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0ed      	b.n	800440a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd f8ea 	bl	8001414 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004250:	f7ff ffb4 	bl	80041bc <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004256:	e012      	b.n	800427e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004258:	f7ff ffb0 	bl	80041bc <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b0a      	cmp	r3, #10
 8004264:	d90b      	bls.n	800427e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2205      	movs	r2, #5
 8004276:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0c5      	b.n	800440a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0e5      	beq.n	8004258 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0202 	bic.w	r2, r2, #2
 800429a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800429c:	f7ff ff8e 	bl	80041bc <HAL_GetTick>
 80042a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042a2:	e012      	b.n	80042ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042a4:	f7ff ff8a 	bl	80041bc <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b0a      	cmp	r3, #10
 80042b0:	d90b      	bls.n	80042ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2205      	movs	r2, #5
 80042c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e09f      	b.n	800440a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	7e1b      	ldrb	r3, [r3, #24]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d108      	bne.n	80042f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e007      	b.n	8004302 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004300:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	7e5b      	ldrb	r3, [r3, #25]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d108      	bne.n	800431c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	e007      	b.n	800432c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7e9b      	ldrb	r3, [r3, #26]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d108      	bne.n	8004346 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0220 	orr.w	r2, r2, #32
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e007      	b.n	8004356 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0220 	bic.w	r2, r2, #32
 8004354:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	7edb      	ldrb	r3, [r3, #27]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d108      	bne.n	8004370 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0210 	bic.w	r2, r2, #16
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e007      	b.n	8004380 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0210 	orr.w	r2, r2, #16
 800437e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	7f1b      	ldrb	r3, [r3, #28]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d108      	bne.n	800439a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0208 	orr.w	r2, r2, #8
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e007      	b.n	80043aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0208 	bic.w	r2, r2, #8
 80043a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7f5b      	ldrb	r3, [r3, #29]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d108      	bne.n	80043c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0204 	orr.w	r2, r2, #4
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e007      	b.n	80043d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0204 	bic.w	r2, r2, #4
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	ea42 0103 	orr.w	r1, r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	1e5a      	subs	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <__NVIC_SetPriorityGrouping+0x44>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004430:	4013      	ands	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800443c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004446:	4a04      	ldr	r2, [pc, #16]	; (8004458 <__NVIC_SetPriorityGrouping+0x44>)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	60d3      	str	r3, [r2, #12]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000ed00 	.word	0xe000ed00

0800445c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <__NVIC_GetPriorityGrouping+0x18>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	f003 0307 	and.w	r3, r3, #7
}
 800446a:	4618      	mov	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	e000ed00 	.word	0xe000ed00

08004478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	2b00      	cmp	r3, #0
 8004488:	db0b      	blt.n	80044a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	f003 021f 	and.w	r2, r3, #31
 8004490:	4907      	ldr	r1, [pc, #28]	; (80044b0 <__NVIC_EnableIRQ+0x38>)
 8004492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2001      	movs	r0, #1
 800449a:	fa00 f202 	lsl.w	r2, r0, r2
 800449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e100 	.word	0xe000e100

080044b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	db0a      	blt.n	80044de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	490c      	ldr	r1, [pc, #48]	; (8004500 <__NVIC_SetPriority+0x4c>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	0112      	lsls	r2, r2, #4
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	440b      	add	r3, r1
 80044d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044dc:	e00a      	b.n	80044f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4908      	ldr	r1, [pc, #32]	; (8004504 <__NVIC_SetPriority+0x50>)
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	3b04      	subs	r3, #4
 80044ec:	0112      	lsls	r2, r2, #4
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	440b      	add	r3, r1
 80044f2:	761a      	strb	r2, [r3, #24]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000e100 	.word	0xe000e100
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f1c3 0307 	rsb	r3, r3, #7
 8004522:	2b04      	cmp	r3, #4
 8004524:	bf28      	it	cs
 8004526:	2304      	movcs	r3, #4
 8004528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3304      	adds	r3, #4
 800452e:	2b06      	cmp	r3, #6
 8004530:	d902      	bls.n	8004538 <NVIC_EncodePriority+0x30>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3b03      	subs	r3, #3
 8004536:	e000      	b.n	800453a <NVIC_EncodePriority+0x32>
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43da      	mvns	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	401a      	ands	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004550:	f04f 31ff 	mov.w	r1, #4294967295
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	43d9      	mvns	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004560:	4313      	orrs	r3, r2
         );
}
 8004562:	4618      	mov	r0, r3
 8004564:	3724      	adds	r7, #36	; 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004580:	d301      	bcc.n	8004586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004582:	2301      	movs	r3, #1
 8004584:	e00f      	b.n	80045a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <SysTick_Config+0x40>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458e:	210f      	movs	r1, #15
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	f7ff ff8e 	bl	80044b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <SysTick_Config+0x40>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <SysTick_Config+0x40>)
 80045a0:	2207      	movs	r2, #7
 80045a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010

080045b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff29 	bl	8004414 <__NVIC_SetPriorityGrouping>
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	4603      	mov	r3, r0
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045dc:	f7ff ff3e 	bl	800445c <__NVIC_GetPriorityGrouping>
 80045e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	6978      	ldr	r0, [r7, #20]
 80045e8:	f7ff ff8e 	bl	8004508 <NVIC_EncodePriority>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff ff5d 	bl	80044b4 <__NVIC_SetPriority>
}
 80045fa:	bf00      	nop
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	4603      	mov	r3, r0
 800460a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800460c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff31 	bl	8004478 <__NVIC_EnableIRQ>
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff ffa2 	bl	8004570 <SysTick_Config>
 800462c:	4603      	mov	r3, r0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004644:	f7ff fdba 	bl	80041bc <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e099      	b.n	8004788 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0201 	bic.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004674:	e00f      	b.n	8004696 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004676:	f7ff fda1 	bl	80041bc <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b05      	cmp	r3, #5
 8004682:	d908      	bls.n	8004696 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2203      	movs	r2, #3
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e078      	b.n	8004788 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e8      	bne.n	8004676 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4b38      	ldr	r3, [pc, #224]	; (8004790 <HAL_DMA_Init+0x158>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d107      	bne.n	8004700 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	4313      	orrs	r3, r2
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0307 	bic.w	r3, r3, #7
 8004716:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b04      	cmp	r3, #4
 8004728:	d117      	bne.n	800475a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fa91 	bl	8004c64 <DMA_CheckFifoParam>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2240      	movs	r2, #64	; 0x40
 800474c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004756:	2301      	movs	r3, #1
 8004758:	e016      	b.n	8004788 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa48 	bl	8004bf8 <DMA_CalcBaseAndBitshift>
 8004768:	4603      	mov	r3, r0
 800476a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004770:	223f      	movs	r2, #63	; 0x3f
 8004772:	409a      	lsls	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	f010803f 	.word	0xf010803f

08004794 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_DMA_Start_IT+0x26>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e040      	b.n	800483c <HAL_DMA_Start_IT+0xa8>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d12f      	bne.n	800482e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f9da 	bl	8004b9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	223f      	movs	r2, #63	; 0x3f
 80047ee:	409a      	lsls	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0216 	orr.w	r2, r2, #22
 8004802:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0208 	orr.w	r2, r2, #8
 800481a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	e005      	b.n	800483a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004836:	2302      	movs	r3, #2
 8004838:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800483a:	7dfb      	ldrb	r3, [r7, #23]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d004      	beq.n	8004862 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e00c      	b.n	800487c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2205      	movs	r2, #5
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004894:	4b8e      	ldr	r3, [pc, #568]	; (8004ad0 <HAL_DMA_IRQHandler+0x248>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a8e      	ldr	r2, [pc, #568]	; (8004ad4 <HAL_DMA_IRQHandler+0x24c>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	2208      	movs	r2, #8
 80048b4:	409a      	lsls	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01a      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d013      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0204 	bic.w	r2, r2, #4
 80048da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	2208      	movs	r2, #8
 80048e2:	409a      	lsls	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f043 0201 	orr.w	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004916:	2201      	movs	r2, #1
 8004918:	409a      	lsls	r2, r3
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f043 0202 	orr.w	r2, r3, #2
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492e:	2204      	movs	r2, #4
 8004930:	409a      	lsls	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4013      	ands	r3, r2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d012      	beq.n	8004960 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	2204      	movs	r2, #4
 800494e:	409a      	lsls	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	f043 0204 	orr.w	r2, r3, #4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2210      	movs	r2, #16
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d043      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d03c      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004982:	2210      	movs	r2, #16
 8004984:	409a      	lsls	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d018      	beq.n	80049ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d024      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
 80049b6:	e01f      	b.n	80049f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01b      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
 80049c8:	e016      	b.n	80049f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0208 	bic.w	r2, r2, #8
 80049e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fc:	2220      	movs	r2, #32
 80049fe:	409a      	lsls	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 808f 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8087 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	2220      	movs	r2, #32
 8004a20:	409a      	lsls	r2, r3
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d136      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0216 	bic.w	r2, r2, #22
 8004a40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_DMA_IRQHandler+0x1da>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0208 	bic.w	r2, r2, #8
 8004a70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	223f      	movs	r2, #63	; 0x3f
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d07e      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
        }
        return;
 8004a9e:	e079      	b.n	8004b94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01d      	beq.n	8004aea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10d      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d031      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
 8004acc:	e02c      	b.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
 8004ace:	bf00      	nop
 8004ad0:	200000ac 	.word	0x200000ac
 8004ad4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d023      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
 8004ae8:	e01e      	b.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10f      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0210 	bic.w	r2, r2, #16
 8004b06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d032      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d022      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2205      	movs	r2, #5
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d307      	bcc.n	8004b70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f2      	bne.n	8004b54 <HAL_DMA_IRQHandler+0x2cc>
 8004b6e:	e000      	b.n	8004b72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
 8004b92:	e000      	b.n	8004b96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b94:	bf00      	nop
    }
  }
}
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d108      	bne.n	8004bdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004bda:	e007      	b.n	8004bec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	3b10      	subs	r3, #16
 8004c08:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <DMA_CalcBaseAndBitshift+0x64>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c12:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <DMA_CalcBaseAndBitshift+0x68>)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d909      	bls.n	8004c3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	1d1a      	adds	r2, r3, #4
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	659a      	str	r2, [r3, #88]	; 0x58
 8004c38:	e007      	b.n	8004c4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c42:	f023 0303 	bic.w	r3, r3, #3
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	aaaaaaab 	.word	0xaaaaaaab
 8004c60:	08008cd0 	.word	0x08008cd0

08004c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11f      	bne.n	8004cbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d856      	bhi.n	8004d32 <DMA_CheckFifoParam+0xce>
 8004c84:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <DMA_CheckFifoParam+0x28>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004c9d 	.word	0x08004c9d
 8004c90:	08004caf 	.word	0x08004caf
 8004c94:	08004c9d 	.word	0x08004c9d
 8004c98:	08004d33 	.word	0x08004d33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d046      	beq.n	8004d36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cac:	e043      	b.n	8004d36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb6:	d140      	bne.n	8004d3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cbc:	e03d      	b.n	8004d3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc6:	d121      	bne.n	8004d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d837      	bhi.n	8004d3e <DMA_CheckFifoParam+0xda>
 8004cce:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <DMA_CheckFifoParam+0x70>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004ce5 	.word	0x08004ce5
 8004cd8:	08004ceb 	.word	0x08004ceb
 8004cdc:	08004ce5 	.word	0x08004ce5
 8004ce0:	08004cfd 	.word	0x08004cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce8:	e030      	b.n	8004d4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d025      	beq.n	8004d42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cfa:	e022      	b.n	8004d42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d04:	d11f      	bne.n	8004d46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d0a:	e01c      	b.n	8004d46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d903      	bls.n	8004d1a <DMA_CheckFifoParam+0xb6>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d003      	beq.n	8004d20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d18:	e018      	b.n	8004d4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1e:	e015      	b.n	8004d4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00e      	beq.n	8004d4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d30:	e00b      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
      break;
 8004d32:	bf00      	nop
 8004d34:	e00a      	b.n	8004d4c <DMA_CheckFifoParam+0xe8>
      break;
 8004d36:	bf00      	nop
 8004d38:	e008      	b.n	8004d4c <DMA_CheckFifoParam+0xe8>
      break;
 8004d3a:	bf00      	nop
 8004d3c:	e006      	b.n	8004d4c <DMA_CheckFifoParam+0xe8>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e004      	b.n	8004d4c <DMA_CheckFifoParam+0xe8>
      break;
 8004d42:	bf00      	nop
 8004d44:	e002      	b.n	8004d4c <DMA_CheckFifoParam+0xe8>
      break;   
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <DMA_CheckFifoParam+0xe8>
      break;
 8004d4a:	bf00      	nop
    }
  } 
  
  return status; 
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop

08004d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b089      	sub	sp, #36	; 0x24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	e16b      	b.n	8005050 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d78:	2201      	movs	r2, #1
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	f040 815a 	bne.w	800504a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d005      	beq.n	8004dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d130      	bne.n	8004e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	2203      	movs	r2, #3
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004de4:	2201      	movs	r2, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 0201 	and.w	r2, r3, #1
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d017      	beq.n	8004e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	2203      	movs	r2, #3
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4013      	ands	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d123      	bne.n	8004ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	08da      	lsrs	r2, r3, #3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3208      	adds	r2, #8
 8004e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	220f      	movs	r2, #15
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	08da      	lsrs	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3208      	adds	r2, #8
 8004e9a:	69b9      	ldr	r1, [r7, #24]
 8004e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	2203      	movs	r2, #3
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 0203 	and.w	r2, r3, #3
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80b4 	beq.w	800504a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	4b60      	ldr	r3, [pc, #384]	; (8005068 <HAL_GPIO_Init+0x30c>)
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	4a5f      	ldr	r2, [pc, #380]	; (8005068 <HAL_GPIO_Init+0x30c>)
 8004eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ef2:	4b5d      	ldr	r3, [pc, #372]	; (8005068 <HAL_GPIO_Init+0x30c>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004efe:	4a5b      	ldr	r2, [pc, #364]	; (800506c <HAL_GPIO_Init+0x310>)
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	089b      	lsrs	r3, r3, #2
 8004f04:	3302      	adds	r3, #2
 8004f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	220f      	movs	r2, #15
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a52      	ldr	r2, [pc, #328]	; (8005070 <HAL_GPIO_Init+0x314>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d02b      	beq.n	8004f82 <HAL_GPIO_Init+0x226>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a51      	ldr	r2, [pc, #324]	; (8005074 <HAL_GPIO_Init+0x318>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d025      	beq.n	8004f7e <HAL_GPIO_Init+0x222>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a50      	ldr	r2, [pc, #320]	; (8005078 <HAL_GPIO_Init+0x31c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01f      	beq.n	8004f7a <HAL_GPIO_Init+0x21e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a4f      	ldr	r2, [pc, #316]	; (800507c <HAL_GPIO_Init+0x320>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d019      	beq.n	8004f76 <HAL_GPIO_Init+0x21a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a4e      	ldr	r2, [pc, #312]	; (8005080 <HAL_GPIO_Init+0x324>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_GPIO_Init+0x216>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a4d      	ldr	r2, [pc, #308]	; (8005084 <HAL_GPIO_Init+0x328>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00d      	beq.n	8004f6e <HAL_GPIO_Init+0x212>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a4c      	ldr	r2, [pc, #304]	; (8005088 <HAL_GPIO_Init+0x32c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <HAL_GPIO_Init+0x20e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a4b      	ldr	r2, [pc, #300]	; (800508c <HAL_GPIO_Init+0x330>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <HAL_GPIO_Init+0x20a>
 8004f62:	2307      	movs	r3, #7
 8004f64:	e00e      	b.n	8004f84 <HAL_GPIO_Init+0x228>
 8004f66:	2308      	movs	r3, #8
 8004f68:	e00c      	b.n	8004f84 <HAL_GPIO_Init+0x228>
 8004f6a:	2306      	movs	r3, #6
 8004f6c:	e00a      	b.n	8004f84 <HAL_GPIO_Init+0x228>
 8004f6e:	2305      	movs	r3, #5
 8004f70:	e008      	b.n	8004f84 <HAL_GPIO_Init+0x228>
 8004f72:	2304      	movs	r3, #4
 8004f74:	e006      	b.n	8004f84 <HAL_GPIO_Init+0x228>
 8004f76:	2303      	movs	r3, #3
 8004f78:	e004      	b.n	8004f84 <HAL_GPIO_Init+0x228>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e002      	b.n	8004f84 <HAL_GPIO_Init+0x228>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <HAL_GPIO_Init+0x228>
 8004f82:	2300      	movs	r3, #0
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	f002 0203 	and.w	r2, r2, #3
 8004f8a:	0092      	lsls	r2, r2, #2
 8004f8c:	4093      	lsls	r3, r2
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f94:	4935      	ldr	r1, [pc, #212]	; (800506c <HAL_GPIO_Init+0x310>)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	089b      	lsrs	r3, r3, #2
 8004f9a:	3302      	adds	r3, #2
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fa2:	4b3b      	ldr	r3, [pc, #236]	; (8005090 <HAL_GPIO_Init+0x334>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	43db      	mvns	r3, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fc6:	4a32      	ldr	r2, [pc, #200]	; (8005090 <HAL_GPIO_Init+0x334>)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fcc:	4b30      	ldr	r3, [pc, #192]	; (8005090 <HAL_GPIO_Init+0x334>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ff0:	4a27      	ldr	r2, [pc, #156]	; (8005090 <HAL_GPIO_Init+0x334>)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ff6:	4b26      	ldr	r3, [pc, #152]	; (8005090 <HAL_GPIO_Init+0x334>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800501a:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <HAL_GPIO_Init+0x334>)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_GPIO_Init+0x334>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005044:	4a12      	ldr	r2, [pc, #72]	; (8005090 <HAL_GPIO_Init+0x334>)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3301      	adds	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b0f      	cmp	r3, #15
 8005054:	f67f ae90 	bls.w	8004d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	3724      	adds	r7, #36	; 0x24
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	40013800 	.word	0x40013800
 8005070:	40020000 	.word	0x40020000
 8005074:	40020400 	.word	0x40020400
 8005078:	40020800 	.word	0x40020800
 800507c:	40020c00 	.word	0x40020c00
 8005080:	40021000 	.word	0x40021000
 8005084:	40021400 	.word	0x40021400
 8005088:	40021800 	.word	0x40021800
 800508c:	40021c00 	.word	0x40021c00
 8005090:	40013c00 	.word	0x40013c00

08005094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
 80050b0:	e001      	b.n	80050b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
 80050d0:	4613      	mov	r3, r2
 80050d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050d4:	787b      	ldrb	r3, [r7, #1]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050e0:	e003      	b.n	80050ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050e2:	887b      	ldrh	r3, [r7, #2]
 80050e4:	041a      	lsls	r2, r3, #16
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	619a      	str	r2, [r3, #24]
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005108:	887a      	ldrh	r2, [r7, #2]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4013      	ands	r3, r2
 800510e:	041a      	lsls	r2, r3, #16
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	43d9      	mvns	r1, r3
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	400b      	ands	r3, r1
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	619a      	str	r2, [r3, #24]
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	4013      	ands	r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d006      	beq.n	8005150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005142:	4a05      	ldr	r2, [pc, #20]	; (8005158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005148:	88fb      	ldrh	r3, [r7, #6]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fc f8be 	bl	80012cc <HAL_GPIO_EXTI_Callback>
  }
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40013c00 	.word	0x40013c00

0800515c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e12b      	b.n	80053c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc fb26 	bl	80017d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2224      	movs	r2, #36	; 0x24
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0201 	bic.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051c0:	f000 fd80 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 80051c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4a81      	ldr	r2, [pc, #516]	; (80053d0 <HAL_I2C_Init+0x274>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d807      	bhi.n	80051e0 <HAL_I2C_Init+0x84>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a80      	ldr	r2, [pc, #512]	; (80053d4 <HAL_I2C_Init+0x278>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	bf94      	ite	ls
 80051d8:	2301      	movls	r3, #1
 80051da:	2300      	movhi	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	e006      	b.n	80051ee <HAL_I2C_Init+0x92>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a7d      	ldr	r2, [pc, #500]	; (80053d8 <HAL_I2C_Init+0x27c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	bf94      	ite	ls
 80051e8:	2301      	movls	r3, #1
 80051ea:	2300      	movhi	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e0e7      	b.n	80053c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a78      	ldr	r2, [pc, #480]	; (80053dc <HAL_I2C_Init+0x280>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	0c9b      	lsrs	r3, r3, #18
 8005200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4a6a      	ldr	r2, [pc, #424]	; (80053d0 <HAL_I2C_Init+0x274>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d802      	bhi.n	8005230 <HAL_I2C_Init+0xd4>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	3301      	adds	r3, #1
 800522e:	e009      	b.n	8005244 <HAL_I2C_Init+0xe8>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	4a69      	ldr	r2, [pc, #420]	; (80053e0 <HAL_I2C_Init+0x284>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	099b      	lsrs	r3, r3, #6
 8005242:	3301      	adds	r3, #1
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	430b      	orrs	r3, r1
 800524a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005256:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	495c      	ldr	r1, [pc, #368]	; (80053d0 <HAL_I2C_Init+0x274>)
 8005260:	428b      	cmp	r3, r1
 8005262:	d819      	bhi.n	8005298 <HAL_I2C_Init+0x13c>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1e59      	subs	r1, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005272:	1c59      	adds	r1, r3, #1
 8005274:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005278:	400b      	ands	r3, r1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_I2C_Init+0x138>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1e59      	subs	r1, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	fbb1 f3f3 	udiv	r3, r1, r3
 800528c:	3301      	adds	r3, #1
 800528e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005292:	e051      	b.n	8005338 <HAL_I2C_Init+0x1dc>
 8005294:	2304      	movs	r3, #4
 8005296:	e04f      	b.n	8005338 <HAL_I2C_Init+0x1dc>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d111      	bne.n	80052c4 <HAL_I2C_Init+0x168>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1e58      	subs	r0, r3, #1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6859      	ldr	r1, [r3, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	440b      	add	r3, r1
 80052ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b2:	3301      	adds	r3, #1
 80052b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	e012      	b.n	80052ea <HAL_I2C_Init+0x18e>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1e58      	subs	r0, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6859      	ldr	r1, [r3, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	0099      	lsls	r1, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052da:	3301      	adds	r3, #1
 80052dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_I2C_Init+0x196>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e022      	b.n	8005338 <HAL_I2C_Init+0x1dc>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10e      	bne.n	8005318 <HAL_I2C_Init+0x1bc>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1e58      	subs	r0, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6859      	ldr	r1, [r3, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	440b      	add	r3, r1
 8005308:	fbb0 f3f3 	udiv	r3, r0, r3
 800530c:	3301      	adds	r3, #1
 800530e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005316:	e00f      	b.n	8005338 <HAL_I2C_Init+0x1dc>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1e58      	subs	r0, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6859      	ldr	r1, [r3, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	0099      	lsls	r1, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	fbb0 f3f3 	udiv	r3, r0, r3
 800532e:	3301      	adds	r3, #1
 8005330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	6809      	ldr	r1, [r1, #0]
 800533c:	4313      	orrs	r3, r2
 800533e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69da      	ldr	r2, [r3, #28]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6911      	ldr	r1, [r2, #16]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	68d2      	ldr	r2, [r2, #12]
 8005372:	4311      	orrs	r1, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	430b      	orrs	r3, r1
 800537a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	000186a0 	.word	0x000186a0
 80053d4:	001e847f 	.word	0x001e847f
 80053d8:	003d08ff 	.word	0x003d08ff
 80053dc:	431bde83 	.word	0x431bde83
 80053e0:	10624dd3 	.word	0x10624dd3

080053e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e267      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d075      	beq.n	80054ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005402:	4b88      	ldr	r3, [pc, #544]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 030c 	and.w	r3, r3, #12
 800540a:	2b04      	cmp	r3, #4
 800540c:	d00c      	beq.n	8005428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800540e:	4b85      	ldr	r3, [pc, #532]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005416:	2b08      	cmp	r3, #8
 8005418:	d112      	bne.n	8005440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541a:	4b82      	ldr	r3, [pc, #520]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005426:	d10b      	bne.n	8005440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	4b7e      	ldr	r3, [pc, #504]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d05b      	beq.n	80054ec <HAL_RCC_OscConfig+0x108>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d157      	bne.n	80054ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e242      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d106      	bne.n	8005458 <HAL_RCC_OscConfig+0x74>
 800544a:	4b76      	ldr	r3, [pc, #472]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a75      	ldr	r2, [pc, #468]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e01d      	b.n	8005494 <HAL_RCC_OscConfig+0xb0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005460:	d10c      	bne.n	800547c <HAL_RCC_OscConfig+0x98>
 8005462:	4b70      	ldr	r3, [pc, #448]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a6f      	ldr	r2, [pc, #444]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4b6d      	ldr	r3, [pc, #436]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6c      	ldr	r2, [pc, #432]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e00b      	b.n	8005494 <HAL_RCC_OscConfig+0xb0>
 800547c:	4b69      	ldr	r3, [pc, #420]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a68      	ldr	r2, [pc, #416]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	4b66      	ldr	r3, [pc, #408]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a65      	ldr	r2, [pc, #404]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 800548e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d013      	beq.n	80054c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fe fe8e 	bl	80041bc <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fe fe8a 	bl	80041bc <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e207      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b6:	4b5b      	ldr	r3, [pc, #364]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f0      	beq.n	80054a4 <HAL_RCC_OscConfig+0xc0>
 80054c2:	e014      	b.n	80054ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c4:	f7fe fe7a 	bl	80041bc <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054cc:	f7fe fe76 	bl	80041bc <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	; 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e1f3      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054de:	4b51      	ldr	r3, [pc, #324]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f0      	bne.n	80054cc <HAL_RCC_OscConfig+0xe8>
 80054ea:	e000      	b.n	80054ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d063      	beq.n	80055c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054fa:	4b4a      	ldr	r3, [pc, #296]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005506:	4b47      	ldr	r3, [pc, #284]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800550e:	2b08      	cmp	r3, #8
 8005510:	d11c      	bne.n	800554c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005512:	4b44      	ldr	r3, [pc, #272]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d116      	bne.n	800554c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551e:	4b41      	ldr	r3, [pc, #260]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_RCC_OscConfig+0x152>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d001      	beq.n	8005536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e1c7      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005536:	4b3b      	ldr	r3, [pc, #236]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4937      	ldr	r1, [pc, #220]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800554a:	e03a      	b.n	80055c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d020      	beq.n	8005596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005554:	4b34      	ldr	r3, [pc, #208]	; (8005628 <HAL_RCC_OscConfig+0x244>)
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fe fe2f 	bl	80041bc <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005562:	f7fe fe2b 	bl	80041bc <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e1a8      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005574:	4b2b      	ldr	r3, [pc, #172]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005580:	4b28      	ldr	r3, [pc, #160]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4925      	ldr	r1, [pc, #148]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 8005590:	4313      	orrs	r3, r2
 8005592:	600b      	str	r3, [r1, #0]
 8005594:	e015      	b.n	80055c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005596:	4b24      	ldr	r3, [pc, #144]	; (8005628 <HAL_RCC_OscConfig+0x244>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559c:	f7fe fe0e 	bl	80041bc <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a4:	f7fe fe0a 	bl	80041bc <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e187      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055b6:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f0      	bne.n	80055a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d036      	beq.n	800563c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d016      	beq.n	8005604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055d6:	4b15      	ldr	r3, [pc, #84]	; (800562c <HAL_RCC_OscConfig+0x248>)
 80055d8:	2201      	movs	r2, #1
 80055da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fe fdee 	bl	80041bc <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e4:	f7fe fdea 	bl	80041bc <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e167      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <HAL_RCC_OscConfig+0x240>)
 80055f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0x200>
 8005602:	e01b      	b.n	800563c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005604:	4b09      	ldr	r3, [pc, #36]	; (800562c <HAL_RCC_OscConfig+0x248>)
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560a:	f7fe fdd7 	bl	80041bc <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005610:	e00e      	b.n	8005630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005612:	f7fe fdd3 	bl	80041bc <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d907      	bls.n	8005630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e150      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
 8005624:	40023800 	.word	0x40023800
 8005628:	42470000 	.word	0x42470000
 800562c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005630:	4b88      	ldr	r3, [pc, #544]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 8005632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1ea      	bne.n	8005612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8097 	beq.w	8005778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564e:	4b81      	ldr	r3, [pc, #516]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10f      	bne.n	800567a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	4b7d      	ldr	r3, [pc, #500]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	4a7c      	ldr	r2, [pc, #496]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 8005664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005668:	6413      	str	r3, [r2, #64]	; 0x40
 800566a:	4b7a      	ldr	r3, [pc, #488]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567a:	4b77      	ldr	r3, [pc, #476]	; (8005858 <HAL_RCC_OscConfig+0x474>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d118      	bne.n	80056b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005686:	4b74      	ldr	r3, [pc, #464]	; (8005858 <HAL_RCC_OscConfig+0x474>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a73      	ldr	r2, [pc, #460]	; (8005858 <HAL_RCC_OscConfig+0x474>)
 800568c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005692:	f7fe fd93 	bl	80041bc <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569a:	f7fe fd8f 	bl	80041bc <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e10c      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ac:	4b6a      	ldr	r3, [pc, #424]	; (8005858 <HAL_RCC_OscConfig+0x474>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f0      	beq.n	800569a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d106      	bne.n	80056ce <HAL_RCC_OscConfig+0x2ea>
 80056c0:	4b64      	ldr	r3, [pc, #400]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	4a63      	ldr	r2, [pc, #396]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	6713      	str	r3, [r2, #112]	; 0x70
 80056cc:	e01c      	b.n	8005708 <HAL_RCC_OscConfig+0x324>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d10c      	bne.n	80056f0 <HAL_RCC_OscConfig+0x30c>
 80056d6:	4b5f      	ldr	r3, [pc, #380]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	4a5e      	ldr	r2, [pc, #376]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80056dc:	f043 0304 	orr.w	r3, r3, #4
 80056e0:	6713      	str	r3, [r2, #112]	; 0x70
 80056e2:	4b5c      	ldr	r3, [pc, #368]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	4a5b      	ldr	r2, [pc, #364]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	6713      	str	r3, [r2, #112]	; 0x70
 80056ee:	e00b      	b.n	8005708 <HAL_RCC_OscConfig+0x324>
 80056f0:	4b58      	ldr	r3, [pc, #352]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	4a57      	ldr	r2, [pc, #348]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	6713      	str	r3, [r2, #112]	; 0x70
 80056fc:	4b55      	ldr	r3, [pc, #340]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	4a54      	ldr	r2, [pc, #336]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 8005702:	f023 0304 	bic.w	r3, r3, #4
 8005706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d015      	beq.n	800573c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fe fd54 	bl	80041bc <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005716:	e00a      	b.n	800572e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005718:	f7fe fd50 	bl	80041bc <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f241 3288 	movw	r2, #5000	; 0x1388
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e0cb      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572e:	4b49      	ldr	r3, [pc, #292]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0ee      	beq.n	8005718 <HAL_RCC_OscConfig+0x334>
 800573a:	e014      	b.n	8005766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573c:	f7fe fd3e 	bl	80041bc <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005742:	e00a      	b.n	800575a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005744:	f7fe fd3a 	bl	80041bc <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e0b5      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800575a:	4b3e      	ldr	r3, [pc, #248]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1ee      	bne.n	8005744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d105      	bne.n	8005778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576c:	4b39      	ldr	r3, [pc, #228]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	4a38      	ldr	r2, [pc, #224]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 8005772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80a1 	beq.w	80058c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005782:	4b34      	ldr	r3, [pc, #208]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b08      	cmp	r3, #8
 800578c:	d05c      	beq.n	8005848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d141      	bne.n	800581a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005796:	4b31      	ldr	r3, [pc, #196]	; (800585c <HAL_RCC_OscConfig+0x478>)
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579c:	f7fe fd0e 	bl	80041bc <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a4:	f7fe fd0a 	bl	80041bc <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e087      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	019b      	lsls	r3, r3, #6
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	3b01      	subs	r3, #1
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	491b      	ldr	r1, [pc, #108]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ec:	4b1b      	ldr	r3, [pc, #108]	; (800585c <HAL_RCC_OscConfig+0x478>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f2:	f7fe fce3 	bl	80041bc <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fa:	f7fe fcdf 	bl	80041bc <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e05c      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580c:	4b11      	ldr	r3, [pc, #68]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f0      	beq.n	80057fa <HAL_RCC_OscConfig+0x416>
 8005818:	e054      	b.n	80058c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800581a:	4b10      	ldr	r3, [pc, #64]	; (800585c <HAL_RCC_OscConfig+0x478>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005820:	f7fe fccc 	bl	80041bc <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005828:	f7fe fcc8 	bl	80041bc <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e045      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_RCC_OscConfig+0x470>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f0      	bne.n	8005828 <HAL_RCC_OscConfig+0x444>
 8005846:	e03d      	b.n	80058c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d107      	bne.n	8005860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e038      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
 8005854:	40023800 	.word	0x40023800
 8005858:	40007000 	.word	0x40007000
 800585c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <HAL_RCC_OscConfig+0x4ec>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d028      	beq.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005878:	429a      	cmp	r2, r3
 800587a:	d121      	bne.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005886:	429a      	cmp	r2, r3
 8005888:	d11a      	bne.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005898:	4293      	cmp	r3, r2
 800589a:	d111      	bne.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	3b01      	subs	r3, #1
 80058aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d107      	bne.n	80058c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40023800 	.word	0x40023800

080058d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0cc      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058e8:	4b68      	ldr	r3, [pc, #416]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d90c      	bls.n	8005910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fe:	4b63      	ldr	r3, [pc, #396]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d001      	beq.n	8005910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0b8      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d020      	beq.n	800595e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005928:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a58      	ldr	r2, [pc, #352]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005940:	4b53      	ldr	r3, [pc, #332]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4a52      	ldr	r2, [pc, #328]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800594a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800594c:	4b50      	ldr	r3, [pc, #320]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	494d      	ldr	r1, [pc, #308]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	4313      	orrs	r3, r2
 800595c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d044      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d107      	bne.n	8005982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005972:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d119      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e07f      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d003      	beq.n	8005992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800598e:	2b03      	cmp	r3, #3
 8005990:	d107      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005992:	4b3f      	ldr	r3, [pc, #252]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e06f      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a2:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e067      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b2:	4b37      	ldr	r3, [pc, #220]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f023 0203 	bic.w	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	4934      	ldr	r1, [pc, #208]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c4:	f7fe fbfa 	bl	80041bc <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	e00a      	b.n	80059e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059cc:	f7fe fbf6 	bl	80041bc <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e04f      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 020c 	and.w	r2, r3, #12
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1eb      	bne.n	80059cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059f4:	4b25      	ldr	r3, [pc, #148]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d20c      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a02:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e032      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a28:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4916      	ldr	r1, [pc, #88]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a46:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	490e      	ldr	r1, [pc, #56]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a5a:	f000 f821 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	490a      	ldr	r1, [pc, #40]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	5ccb      	ldrb	r3, [r1, r3]
 8005a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a72:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fe fb5a 	bl	8004134 <HAL_InitTick>

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023c00 	.word	0x40023c00
 8005a90:	40023800 	.word	0x40023800
 8005a94:	08008cb8 	.word	0x08008cb8
 8005a98:	200000ac 	.word	0x200000ac
 8005a9c:	200000b0 	.word	0x200000b0

08005aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa4:	b094      	sub	sp, #80	; 0x50
 8005aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8005aac:	2300      	movs	r3, #0
 8005aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab8:	4b79      	ldr	r3, [pc, #484]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 030c 	and.w	r3, r3, #12
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	f200 80e1 	bhi.w	8005c8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d003      	beq.n	8005ada <HAL_RCC_GetSysClockFreq+0x3a>
 8005ad2:	e0db      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ad4:	4b73      	ldr	r3, [pc, #460]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ad6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ad8:	e0db      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ada:	4b73      	ldr	r3, [pc, #460]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ade:	e0d8      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ae0:	4b6f      	ldr	r3, [pc, #444]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aea:	4b6d      	ldr	r3, [pc, #436]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d063      	beq.n	8005bbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005af6:	4b6a      	ldr	r3, [pc, #424]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	099b      	lsrs	r3, r3, #6
 8005afc:	2200      	movs	r2, #0
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b08:	633b      	str	r3, [r7, #48]	; 0x30
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b12:	4622      	mov	r2, r4
 8005b14:	462b      	mov	r3, r5
 8005b16:	f04f 0000 	mov.w	r0, #0
 8005b1a:	f04f 0100 	mov.w	r1, #0
 8005b1e:	0159      	lsls	r1, r3, #5
 8005b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b24:	0150      	lsls	r0, r2, #5
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	1a51      	subs	r1, r2, r1
 8005b2e:	6139      	str	r1, [r7, #16]
 8005b30:	4629      	mov	r1, r5
 8005b32:	eb63 0301 	sbc.w	r3, r3, r1
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b44:	4659      	mov	r1, fp
 8005b46:	018b      	lsls	r3, r1, #6
 8005b48:	4651      	mov	r1, sl
 8005b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b4e:	4651      	mov	r1, sl
 8005b50:	018a      	lsls	r2, r1, #6
 8005b52:	4651      	mov	r1, sl
 8005b54:	ebb2 0801 	subs.w	r8, r2, r1
 8005b58:	4659      	mov	r1, fp
 8005b5a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b72:	4690      	mov	r8, r2
 8005b74:	4699      	mov	r9, r3
 8005b76:	4623      	mov	r3, r4
 8005b78:	eb18 0303 	adds.w	r3, r8, r3
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	462b      	mov	r3, r5
 8005b80:	eb49 0303 	adc.w	r3, r9, r3
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b92:	4629      	mov	r1, r5
 8005b94:	024b      	lsls	r3, r1, #9
 8005b96:	4621      	mov	r1, r4
 8005b98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	024a      	lsls	r2, r1, #9
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bb0:	f7fa fd16 	bl	80005e0 <__aeabi_uldivmod>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4613      	mov	r3, r2
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bbc:	e058      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bbe:	4b38      	ldr	r3, [pc, #224]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	099b      	lsrs	r3, r3, #6
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	4611      	mov	r1, r2
 8005bca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bce:	623b      	str	r3, [r7, #32]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	f04f 0000 	mov.w	r0, #0
 8005be0:	f04f 0100 	mov.w	r1, #0
 8005be4:	0159      	lsls	r1, r3, #5
 8005be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bea:	0150      	lsls	r0, r2, #5
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c10:	ebb2 040a 	subs.w	r4, r2, sl
 8005c14:	eb63 050b 	sbc.w	r5, r3, fp
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	00eb      	lsls	r3, r5, #3
 8005c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c26:	00e2      	lsls	r2, r4, #3
 8005c28:	4614      	mov	r4, r2
 8005c2a:	461d      	mov	r5, r3
 8005c2c:	4643      	mov	r3, r8
 8005c2e:	18e3      	adds	r3, r4, r3
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	464b      	mov	r3, r9
 8005c34:	eb45 0303 	adc.w	r3, r5, r3
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c46:	4629      	mov	r1, r5
 8005c48:	028b      	lsls	r3, r1, #10
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c50:	4621      	mov	r1, r4
 8005c52:	028a      	lsls	r2, r1, #10
 8005c54:	4610      	mov	r0, r2
 8005c56:	4619      	mov	r1, r3
 8005c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	61fa      	str	r2, [r7, #28]
 8005c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c64:	f7fa fcbc 	bl	80005e0 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c8a:	e002      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3750      	adds	r7, #80	; 0x50
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	00f42400 	.word	0x00f42400
 8005ca8:	007a1200 	.word	0x007a1200

08005cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	200000ac 	.word	0x200000ac

08005cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cc8:	f7ff fff0 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	0a9b      	lsrs	r3, r3, #10
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	4903      	ldr	r1, [pc, #12]	; (8005ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cda:	5ccb      	ldrb	r3, [r1, r3]
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	08008cc8 	.word	0x08008cc8

08005cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cf0:	f7ff ffdc 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	0b5b      	lsrs	r3, r3, #13
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	4903      	ldr	r1, [pc, #12]	; (8005d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d02:	5ccb      	ldrb	r3, [r1, r3]
 8005d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	08008cc8 	.word	0x08008cc8

08005d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e07b      	b.n	8005e1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d108      	bne.n	8005d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d36:	d009      	beq.n	8005d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	61da      	str	r2, [r3, #28]
 8005d3e:	e005      	b.n	8005d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fd fdac 	bl	80038c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd0:	ea42 0103 	orr.w	r1, r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	0c1b      	lsrs	r3, r3, #16
 8005dea:	f003 0104 	and.w	r1, r3, #4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	f003 0210 	and.w	r2, r3, #16
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b088      	sub	sp, #32
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	603b      	str	r3, [r7, #0]
 8005e32:	4613      	mov	r3, r2
 8005e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_SPI_Transmit+0x22>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e126      	b.n	8006096 <HAL_SPI_Transmit+0x270>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e50:	f7fe f9b4 	bl	80041bc <HAL_GetTick>
 8005e54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d002      	beq.n	8005e6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
 8005e68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e6a:	e10b      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_SPI_Transmit+0x52>
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e7c:	e102      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2203      	movs	r2, #3
 8005e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	88fa      	ldrh	r2, [r7, #6]
 8005e96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	88fa      	ldrh	r2, [r7, #6]
 8005e9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec4:	d10f      	bne.n	8005ee6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ee4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d007      	beq.n	8005f04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0c:	d14b      	bne.n	8005fa6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_SPI_Transmit+0xf6>
 8005f16:	8afb      	ldrh	r3, [r7, #22]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d13e      	bne.n	8005f9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	1c9a      	adds	r2, r3, #2
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f40:	e02b      	b.n	8005f9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d112      	bne.n	8005f76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	881a      	ldrh	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f74:	e011      	b.n	8005f9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f76:	f7fe f921 	bl	80041bc <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d803      	bhi.n	8005f8e <HAL_SPI_Transmit+0x168>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8c:	d102      	bne.n	8005f94 <HAL_SPI_Transmit+0x16e>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f98:	e074      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1ce      	bne.n	8005f42 <HAL_SPI_Transmit+0x11c>
 8005fa4:	e04c      	b.n	8006040 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Transmit+0x18e>
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d140      	bne.n	8006036 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fda:	e02c      	b.n	8006036 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d113      	bne.n	8006012 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	7812      	ldrb	r2, [r2, #0]
 8005ff6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006010:	e011      	b.n	8006036 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006012:	f7fe f8d3 	bl	80041bc <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d803      	bhi.n	800602a <HAL_SPI_Transmit+0x204>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d102      	bne.n	8006030 <HAL_SPI_Transmit+0x20a>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006034:	e026      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1cd      	bne.n	8005fdc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fb2b 	bl	80066a0 <SPI_EndRxTxTransaction>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e000      	b.n	8006084 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006082:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006094:	7ffb      	ldrb	r3, [r7, #31]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_SPI_Transmit_DMA+0x20>
 80060bc:	2302      	movs	r3, #2
 80060be:	e09b      	b.n	80061f8 <HAL_SPI_Transmit_DMA+0x158>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d002      	beq.n	80060da <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80060d4:	2302      	movs	r3, #2
 80060d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060d8:	e089      	b.n	80061ee <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_SPI_Transmit_DMA+0x46>
 80060e0:	88fb      	ldrh	r3, [r7, #6]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060ea:	e080      	b.n	80061ee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2203      	movs	r2, #3
 80060f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	88fa      	ldrh	r2, [r7, #6]
 800610a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006132:	d10f      	bne.n	8006154 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006142:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006152:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006158:	4a29      	ldr	r2, [pc, #164]	; (8006200 <HAL_SPI_Transmit_DMA+0x160>)
 800615a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006160:	4a28      	ldr	r2, [pc, #160]	; (8006204 <HAL_SPI_Transmit_DMA+0x164>)
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006168:	4a27      	ldr	r2, [pc, #156]	; (8006208 <HAL_SPI_Transmit_DMA+0x168>)
 800616a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006170:	2200      	movs	r2, #0
 8006172:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	4619      	mov	r1, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800618c:	f7fe fb02 	bl	8004794 <HAL_DMA_Start_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	f043 0210 	orr.w	r2, r3, #16
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80061ae:	e01e      	b.n	80061ee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d007      	beq.n	80061ce <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061cc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0220 	orr.w	r2, r2, #32
 80061dc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0202 	orr.w	r2, r2, #2
 80061ec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	0800650d 	.word	0x0800650d
 8006204:	08006465 	.word	0x08006465
 8006208:	08006529 	.word	0x08006529

0800620c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10f      	bne.n	8006250 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	099b      	lsrs	r3, r3, #6
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
    return;
 800624e:	e0d7      	b.n	8006400 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_SPI_IRQHandler+0x66>
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	09db      	lsrs	r3, r3, #7
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
    return;
 8006270:	e0c6      	b.n	8006400 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10c      	bne.n	8006298 <HAL_SPI_IRQHandler+0x8c>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	099b      	lsrs	r3, r3, #6
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	0a1b      	lsrs	r3, r3, #8
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80b4 	beq.w	8006400 <HAL_SPI_IRQHandler+0x1f4>
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80ad 	beq.w	8006400 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	099b      	lsrs	r3, r3, #6
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d023      	beq.n	80062fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d011      	beq.n	80062e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	f043 0204 	orr.w	r2, r3, #4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	e00b      	b.n	80062fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	693b      	ldr	r3, [r7, #16]
        return;
 80062f8:	e082      	b.n	8006400 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	f043 0201 	orr.w	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00c      	beq.n	8006356 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	f043 0208 	orr.w	r2, r3, #8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006348:	2300      	movs	r3, #0
 800634a:	60bb      	str	r3, [r7, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635a:	2b00      	cmp	r3, #0
 800635c:	d04f      	beq.n	80063fe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800636c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <HAL_SPI_IRQHandler+0x17e>
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d034      	beq.n	80063f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0203 	bic.w	r2, r2, #3
 8006398:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d011      	beq.n	80063c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a6:	4a18      	ldr	r2, [pc, #96]	; (8006408 <HAL_SPI_IRQHandler+0x1fc>)
 80063a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fa48 	bl	8004844 <HAL_DMA_Abort_IT>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d2:	4a0d      	ldr	r2, [pc, #52]	; (8006408 <HAL_SPI_IRQHandler+0x1fc>)
 80063d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fa32 	bl	8004844 <HAL_DMA_Abort_IT>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80063f2:	e003      	b.n	80063fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f81d 	bl	8006434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80063fa:	e000      	b.n	80063fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80063fc:	bf00      	nop
    return;
 80063fe:	bf00      	nop
  }
}
 8006400:	3720      	adds	r7, #32
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	08006569 	.word	0x08006569

0800640c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006456:	b2db      	uxtb	r3, r3
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006472:	f7fd fea3 	bl	80041bc <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006486:	d03b      	beq.n	8006500 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0220 	bic.w	r2, r2, #32
 8006496:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0202 	bic.w	r2, r2, #2
 80064a6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	2164      	movs	r1, #100	; 0x64
 80064ac:	6978      	ldr	r0, [r7, #20]
 80064ae:	f000 f8f7 	bl	80066a0 <SPI_EndRxTxTransaction>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2200      	movs	r2, #0
 80064e6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80064f8:	6978      	ldr	r0, [r7, #20]
 80064fa:	f7ff ff9b 	bl	8006434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80064fe:	e002      	b.n	8006506 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006500:	6978      	ldr	r0, [r7, #20]
 8006502:	f7ff ff83 	bl	800640c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7ff ff80 	bl	8006420 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0203 	bic.w	r2, r2, #3
 8006544:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	f043 0210 	orr.w	r2, r3, #16
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f7ff ff6a 	bl	8006434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006560:	bf00      	nop
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7ff ff56 	bl	8006434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065a0:	f7fd fe0c 	bl	80041bc <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	4413      	add	r3, r2
 80065ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065b0:	f7fd fe04 	bl	80041bc <HAL_GetTick>
 80065b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065b6:	4b39      	ldr	r3, [pc, #228]	; (800669c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	015b      	lsls	r3, r3, #5
 80065bc:	0d1b      	lsrs	r3, r3, #20
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	fb02 f303 	mul.w	r3, r2, r3
 80065c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065c6:	e054      	b.n	8006672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d050      	beq.n	8006672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065d0:	f7fd fdf4 	bl	80041bc <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d902      	bls.n	80065e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d13d      	bne.n	8006662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065fe:	d111      	bne.n	8006624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006608:	d004      	beq.n	8006614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006612:	d107      	bne.n	8006624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662c:	d10f      	bne.n	800664e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800664c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e017      	b.n	8006692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	3b01      	subs	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	429a      	cmp	r2, r3
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	429a      	cmp	r2, r3
 800668e:	d19b      	bne.n	80065c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3720      	adds	r7, #32
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	200000ac 	.word	0x200000ac

080066a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066ac:	4b1b      	ldr	r3, [pc, #108]	; (800671c <SPI_EndRxTxTransaction+0x7c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <SPI_EndRxTxTransaction+0x80>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	0d5b      	lsrs	r3, r3, #21
 80066b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ca:	d112      	bne.n	80066f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2200      	movs	r2, #0
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff ff5a 	bl	8006590 <SPI_WaitFlagStateUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d016      	beq.n	8006710 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	f043 0220 	orr.w	r2, r3, #32
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e00f      	b.n	8006712 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006708:	2b80      	cmp	r3, #128	; 0x80
 800670a:	d0f2      	beq.n	80066f2 <SPI_EndRxTxTransaction+0x52>
 800670c:	e000      	b.n	8006710 <SPI_EndRxTxTransaction+0x70>
        break;
 800670e:	bf00      	nop
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200000ac 	.word	0x200000ac
 8006720:	165e9f81 	.word	0x165e9f81

08006724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e041      	b.n	80067ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fd fae2 	bl	8003d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3304      	adds	r3, #4
 8006760:	4619      	mov	r1, r3
 8006762:	4610      	mov	r0, r2
 8006764:	f000 fc7c 	bl	8007060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d001      	beq.n	80067dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e046      	b.n	800686a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a23      	ldr	r2, [pc, #140]	; (8006878 <HAL_TIM_Base_Start+0xb4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d022      	beq.n	8006834 <HAL_TIM_Base_Start+0x70>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f6:	d01d      	beq.n	8006834 <HAL_TIM_Base_Start+0x70>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1f      	ldr	r2, [pc, #124]	; (800687c <HAL_TIM_Base_Start+0xb8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d018      	beq.n	8006834 <HAL_TIM_Base_Start+0x70>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1e      	ldr	r2, [pc, #120]	; (8006880 <HAL_TIM_Base_Start+0xbc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d013      	beq.n	8006834 <HAL_TIM_Base_Start+0x70>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1c      	ldr	r2, [pc, #112]	; (8006884 <HAL_TIM_Base_Start+0xc0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_TIM_Base_Start+0x70>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <HAL_TIM_Base_Start+0xc4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_TIM_Base_Start+0x70>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a19      	ldr	r2, [pc, #100]	; (800688c <HAL_TIM_Base_Start+0xc8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_TIM_Base_Start+0x70>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a18      	ldr	r2, [pc, #96]	; (8006890 <HAL_TIM_Base_Start+0xcc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d111      	bne.n	8006858 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b06      	cmp	r3, #6
 8006844:	d010      	beq.n	8006868 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006856:	e007      	b.n	8006868 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40010000 	.word	0x40010000
 800687c:	40000400 	.word	0x40000400
 8006880:	40000800 	.word	0x40000800
 8006884:	40000c00 	.word	0x40000c00
 8006888:	40010400 	.word	0x40010400
 800688c:	40014000 	.word	0x40014000
 8006890:	40001800 	.word	0x40001800

08006894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e041      	b.n	800692a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f839 	bl	8006932 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f000 fbc4 	bl	8007060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d109      	bne.n	800696c <HAL_TIM_PWM_Start+0x24>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	bf14      	ite	ne
 8006964:	2301      	movne	r3, #1
 8006966:	2300      	moveq	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	e022      	b.n	80069b2 <HAL_TIM_PWM_Start+0x6a>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b04      	cmp	r3, #4
 8006970:	d109      	bne.n	8006986 <HAL_TIM_PWM_Start+0x3e>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b01      	cmp	r3, #1
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	e015      	b.n	80069b2 <HAL_TIM_PWM_Start+0x6a>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b08      	cmp	r3, #8
 800698a:	d109      	bne.n	80069a0 <HAL_TIM_PWM_Start+0x58>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	bf14      	ite	ne
 8006998:	2301      	movne	r3, #1
 800699a:	2300      	moveq	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	e008      	b.n	80069b2 <HAL_TIM_PWM_Start+0x6a>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	bf14      	ite	ne
 80069ac:	2301      	movne	r3, #1
 80069ae:	2300      	moveq	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e07c      	b.n	8006ab4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <HAL_TIM_PWM_Start+0x82>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069c8:	e013      	b.n	80069f2 <HAL_TIM_PWM_Start+0xaa>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d104      	bne.n	80069da <HAL_TIM_PWM_Start+0x92>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069d8:	e00b      	b.n	80069f2 <HAL_TIM_PWM_Start+0xaa>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_Start+0xa2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069e8:	e003      	b.n	80069f2 <HAL_TIM_PWM_Start+0xaa>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2201      	movs	r2, #1
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fe1a 	bl	8007634 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a2d      	ldr	r2, [pc, #180]	; (8006abc <HAL_TIM_PWM_Start+0x174>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_TIM_PWM_Start+0xcc>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2c      	ldr	r2, [pc, #176]	; (8006ac0 <HAL_TIM_PWM_Start+0x178>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <HAL_TIM_PWM_Start+0xd0>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <HAL_TIM_PWM_Start+0xd2>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a22      	ldr	r2, [pc, #136]	; (8006abc <HAL_TIM_PWM_Start+0x174>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d022      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x136>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a40:	d01d      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x136>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1f      	ldr	r2, [pc, #124]	; (8006ac4 <HAL_TIM_PWM_Start+0x17c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x136>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <HAL_TIM_PWM_Start+0x180>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x136>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <HAL_TIM_PWM_Start+0x184>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x136>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <HAL_TIM_PWM_Start+0x178>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x136>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <HAL_TIM_PWM_Start+0x188>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x136>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <HAL_TIM_PWM_Start+0x18c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d111      	bne.n	8006aa2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b06      	cmp	r3, #6
 8006a8e:	d010      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa0:	e007      	b.n	8006ab2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0201 	orr.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40010400 	.word	0x40010400
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40000800 	.word	0x40000800
 8006acc:	40000c00 	.word	0x40000c00
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40001800 	.word	0x40001800

08006ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d122      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d11b      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0202 	mvn.w	r2, #2
 8006b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa81 	bl	8007022 <HAL_TIM_IC_CaptureCallback>
 8006b20:	e005      	b.n	8006b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa73 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa84 	bl	8007036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d122      	bne.n	8006b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d11b      	bne.n	8006b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0204 	mvn.w	r2, #4
 8006b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa57 	bl	8007022 <HAL_TIM_IC_CaptureCallback>
 8006b74:	e005      	b.n	8006b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fa49 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fa5a 	bl	8007036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d122      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d11b      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0208 	mvn.w	r2, #8
 8006bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa2d 	bl	8007022 <HAL_TIM_IC_CaptureCallback>
 8006bc8:	e005      	b.n	8006bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa1f 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fa30 	bl	8007036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d122      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d11b      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f06f 0210 	mvn.w	r2, #16
 8006c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2208      	movs	r2, #8
 8006c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa03 	bl	8007022 <HAL_TIM_IC_CaptureCallback>
 8006c1c:	e005      	b.n	8006c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f9f5 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fa06 	bl	8007036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d10e      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d107      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f06f 0201 	mvn.w	r2, #1
 8006c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f9cf 	bl	8006ffa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c66:	2b80      	cmp	r3, #128	; 0x80
 8006c68:	d10e      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c74:	2b80      	cmp	r3, #128	; 0x80
 8006c76:	d107      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fd82 	bl	800778c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d10e      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca0:	2b40      	cmp	r3, #64	; 0x40
 8006ca2:	d107      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f9cb 	bl	800704a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d107      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f06f 0220 	mvn.w	r2, #32
 8006cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fd4c 	bl	8007778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e0ae      	b.n	8006e64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b0c      	cmp	r3, #12
 8006d12:	f200 809f 	bhi.w	8006e54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d16:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d51 	.word	0x08006d51
 8006d20:	08006e55 	.word	0x08006e55
 8006d24:	08006e55 	.word	0x08006e55
 8006d28:	08006e55 	.word	0x08006e55
 8006d2c:	08006d91 	.word	0x08006d91
 8006d30:	08006e55 	.word	0x08006e55
 8006d34:	08006e55 	.word	0x08006e55
 8006d38:	08006e55 	.word	0x08006e55
 8006d3c:	08006dd3 	.word	0x08006dd3
 8006d40:	08006e55 	.word	0x08006e55
 8006d44:	08006e55 	.word	0x08006e55
 8006d48:	08006e55 	.word	0x08006e55
 8006d4c:	08006e13 	.word	0x08006e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fa22 	bl	80071a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0208 	orr.w	r2, r2, #8
 8006d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0204 	bic.w	r2, r2, #4
 8006d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6999      	ldr	r1, [r3, #24]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	619a      	str	r2, [r3, #24]
      break;
 8006d8e:	e064      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fa72 	bl	8007280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6999      	ldr	r1, [r3, #24]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	021a      	lsls	r2, r3, #8
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	619a      	str	r2, [r3, #24]
      break;
 8006dd0:	e043      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fac7 	bl	800736c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0208 	orr.w	r2, r2, #8
 8006dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69da      	ldr	r2, [r3, #28]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0204 	bic.w	r2, r2, #4
 8006dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69d9      	ldr	r1, [r3, #28]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	61da      	str	r2, [r3, #28]
      break;
 8006e10:	e023      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fb1b 	bl	8007454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69d9      	ldr	r1, [r3, #28]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	021a      	lsls	r2, r3, #8
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	61da      	str	r2, [r3, #28]
      break;
 8006e52:	e002      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	75fb      	strb	r3, [r7, #23]
      break;
 8006e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_TIM_ConfigClockSource+0x1c>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e0b4      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x186>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec0:	d03e      	beq.n	8006f40 <HAL_TIM_ConfigClockSource+0xd4>
 8006ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec6:	f200 8087 	bhi.w	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ece:	f000 8086 	beq.w	8006fde <HAL_TIM_ConfigClockSource+0x172>
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed6:	d87f      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed8:	2b70      	cmp	r3, #112	; 0x70
 8006eda:	d01a      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0xa6>
 8006edc:	2b70      	cmp	r3, #112	; 0x70
 8006ede:	d87b      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee0:	2b60      	cmp	r3, #96	; 0x60
 8006ee2:	d050      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0x11a>
 8006ee4:	2b60      	cmp	r3, #96	; 0x60
 8006ee6:	d877      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee8:	2b50      	cmp	r3, #80	; 0x50
 8006eea:	d03c      	beq.n	8006f66 <HAL_TIM_ConfigClockSource+0xfa>
 8006eec:	2b50      	cmp	r3, #80	; 0x50
 8006eee:	d873      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	d058      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	d86f      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef8:	2b30      	cmp	r3, #48	; 0x30
 8006efa:	d064      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006efc:	2b30      	cmp	r3, #48	; 0x30
 8006efe:	d86b      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d060      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d867      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d05c      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f0c:	2b10      	cmp	r3, #16
 8006f0e:	d05a      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f10:	e062      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6899      	ldr	r1, [r3, #8]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f000 fb67 	bl	80075f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	609a      	str	r2, [r3, #8]
      break;
 8006f3e:	e04f      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6818      	ldr	r0, [r3, #0]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	6899      	ldr	r1, [r3, #8]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f000 fb50 	bl	80075f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f62:	609a      	str	r2, [r3, #8]
      break;
 8006f64:	e03c      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6859      	ldr	r1, [r3, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	461a      	mov	r2, r3
 8006f74:	f000 fac4 	bl	8007500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2150      	movs	r1, #80	; 0x50
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fb1d 	bl	80075be <TIM_ITRx_SetConfig>
      break;
 8006f84:	e02c      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6859      	ldr	r1, [r3, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f000 fae3 	bl	800755e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2160      	movs	r1, #96	; 0x60
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fb0d 	bl	80075be <TIM_ITRx_SetConfig>
      break;
 8006fa4:	e01c      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 faa4 	bl	8007500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2140      	movs	r1, #64	; 0x40
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fafd 	bl	80075be <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e00c      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	f000 faf4 	bl	80075be <TIM_ITRx_SetConfig>
      break;
 8006fd6:	e003      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
      break;
 8006fdc:	e000      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007016:	bf00      	nop
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800703e:	bf00      	nop
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
	...

08007060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a40      	ldr	r2, [pc, #256]	; (8007174 <TIM_Base_SetConfig+0x114>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d013      	beq.n	80070a0 <TIM_Base_SetConfig+0x40>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707e:	d00f      	beq.n	80070a0 <TIM_Base_SetConfig+0x40>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a3d      	ldr	r2, [pc, #244]	; (8007178 <TIM_Base_SetConfig+0x118>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00b      	beq.n	80070a0 <TIM_Base_SetConfig+0x40>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a3c      	ldr	r2, [pc, #240]	; (800717c <TIM_Base_SetConfig+0x11c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d007      	beq.n	80070a0 <TIM_Base_SetConfig+0x40>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a3b      	ldr	r2, [pc, #236]	; (8007180 <TIM_Base_SetConfig+0x120>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d003      	beq.n	80070a0 <TIM_Base_SetConfig+0x40>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a3a      	ldr	r2, [pc, #232]	; (8007184 <TIM_Base_SetConfig+0x124>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d108      	bne.n	80070b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a2f      	ldr	r2, [pc, #188]	; (8007174 <TIM_Base_SetConfig+0x114>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d02b      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c0:	d027      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a2c      	ldr	r2, [pc, #176]	; (8007178 <TIM_Base_SetConfig+0x118>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d023      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a2b      	ldr	r2, [pc, #172]	; (800717c <TIM_Base_SetConfig+0x11c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d01f      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a2a      	ldr	r2, [pc, #168]	; (8007180 <TIM_Base_SetConfig+0x120>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d01b      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a29      	ldr	r2, [pc, #164]	; (8007184 <TIM_Base_SetConfig+0x124>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d017      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a28      	ldr	r2, [pc, #160]	; (8007188 <TIM_Base_SetConfig+0x128>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d013      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a27      	ldr	r2, [pc, #156]	; (800718c <TIM_Base_SetConfig+0x12c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00f      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a26      	ldr	r2, [pc, #152]	; (8007190 <TIM_Base_SetConfig+0x130>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00b      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a25      	ldr	r2, [pc, #148]	; (8007194 <TIM_Base_SetConfig+0x134>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d007      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a24      	ldr	r2, [pc, #144]	; (8007198 <TIM_Base_SetConfig+0x138>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d003      	beq.n	8007112 <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a23      	ldr	r2, [pc, #140]	; (800719c <TIM_Base_SetConfig+0x13c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d108      	bne.n	8007124 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a0a      	ldr	r2, [pc, #40]	; (8007174 <TIM_Base_SetConfig+0x114>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_Base_SetConfig+0xf8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a0c      	ldr	r2, [pc, #48]	; (8007184 <TIM_Base_SetConfig+0x124>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d103      	bne.n	8007160 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	615a      	str	r2, [r3, #20]
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40010000 	.word	0x40010000
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40010400 	.word	0x40010400
 8007188:	40014000 	.word	0x40014000
 800718c:	40014400 	.word	0x40014400
 8007190:	40014800 	.word	0x40014800
 8007194:	40001800 	.word	0x40001800
 8007198:	40001c00 	.word	0x40001c00
 800719c:	40002000 	.word	0x40002000

080071a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0303 	bic.w	r3, r3, #3
 80071d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f023 0302 	bic.w	r3, r3, #2
 80071e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a20      	ldr	r2, [pc, #128]	; (8007278 <TIM_OC1_SetConfig+0xd8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_OC1_SetConfig+0x64>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a1f      	ldr	r2, [pc, #124]	; (800727c <TIM_OC1_SetConfig+0xdc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d10c      	bne.n	800721e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f023 0308 	bic.w	r3, r3, #8
 800720a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f023 0304 	bic.w	r3, r3, #4
 800721c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a15      	ldr	r2, [pc, #84]	; (8007278 <TIM_OC1_SetConfig+0xd8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_OC1_SetConfig+0x8e>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a14      	ldr	r2, [pc, #80]	; (800727c <TIM_OC1_SetConfig+0xdc>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d111      	bne.n	8007252 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800723c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	621a      	str	r2, [r3, #32]
}
 800726c:	bf00      	nop
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	40010000 	.word	0x40010000
 800727c:	40010400 	.word	0x40010400

08007280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f023 0210 	bic.w	r2, r3, #16
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f023 0320 	bic.w	r3, r3, #32
 80072ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a22      	ldr	r2, [pc, #136]	; (8007364 <TIM_OC2_SetConfig+0xe4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_OC2_SetConfig+0x68>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a21      	ldr	r2, [pc, #132]	; (8007368 <TIM_OC2_SetConfig+0xe8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d10d      	bne.n	8007304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a17      	ldr	r2, [pc, #92]	; (8007364 <TIM_OC2_SetConfig+0xe4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d003      	beq.n	8007314 <TIM_OC2_SetConfig+0x94>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a16      	ldr	r2, [pc, #88]	; (8007368 <TIM_OC2_SetConfig+0xe8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d113      	bne.n	800733c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800731a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40010000 	.word	0x40010000
 8007368:	40010400 	.word	0x40010400

0800736c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0303 	bic.w	r3, r3, #3
 80073a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	021b      	lsls	r3, r3, #8
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a21      	ldr	r2, [pc, #132]	; (800744c <TIM_OC3_SetConfig+0xe0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d003      	beq.n	80073d2 <TIM_OC3_SetConfig+0x66>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a20      	ldr	r2, [pc, #128]	; (8007450 <TIM_OC3_SetConfig+0xe4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d10d      	bne.n	80073ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	021b      	lsls	r3, r3, #8
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a16      	ldr	r2, [pc, #88]	; (800744c <TIM_OC3_SetConfig+0xe0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d003      	beq.n	80073fe <TIM_OC3_SetConfig+0x92>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a15      	ldr	r2, [pc, #84]	; (8007450 <TIM_OC3_SetConfig+0xe4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d113      	bne.n	8007426 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800740c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	621a      	str	r2, [r3, #32]
}
 8007440:	bf00      	nop
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	40010000 	.word	0x40010000
 8007450:	40010400 	.word	0x40010400

08007454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800749e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	031b      	lsls	r3, r3, #12
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a12      	ldr	r2, [pc, #72]	; (80074f8 <TIM_OC4_SetConfig+0xa4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_OC4_SetConfig+0x68>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a11      	ldr	r2, [pc, #68]	; (80074fc <TIM_OC4_SetConfig+0xa8>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d109      	bne.n	80074d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	019b      	lsls	r3, r3, #6
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40010400 	.word	0x40010400

08007500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f023 0201 	bic.w	r2, r3, #1
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800752a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f023 030a 	bic.w	r3, r3, #10
 800753c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800755e:	b480      	push	{r7}
 8007560:	b087      	sub	sp, #28
 8007562:	af00      	add	r7, sp, #0
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	f023 0210 	bic.w	r2, r3, #16
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	031b      	lsls	r3, r3, #12
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800759a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075be:	b480      	push	{r7}
 80075c0:	b085      	sub	sp, #20
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	f043 0307 	orr.w	r3, r3, #7
 80075e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	609a      	str	r2, [r3, #8]
}
 80075e8:	bf00      	nop
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800760e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	021a      	lsls	r2, r3, #8
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	431a      	orrs	r2, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4313      	orrs	r3, r2
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	609a      	str	r2, [r3, #8]
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f003 031f 	and.w	r3, r3, #31
 8007646:	2201      	movs	r2, #1
 8007648:	fa02 f303 	lsl.w	r3, r2, r3
 800764c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a1a      	ldr	r2, [r3, #32]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	43db      	mvns	r3, r3
 8007656:	401a      	ands	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a1a      	ldr	r2, [r3, #32]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 031f 	and.w	r3, r3, #31
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	fa01 f303 	lsl.w	r3, r1, r3
 800766c:	431a      	orrs	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	621a      	str	r2, [r3, #32]
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007694:	2302      	movs	r3, #2
 8007696:	e05a      	b.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a21      	ldr	r2, [pc, #132]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d022      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e4:	d01d      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1d      	ldr	r2, [pc, #116]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d018      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1b      	ldr	r2, [pc, #108]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1a      	ldr	r2, [pc, #104]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a18      	ldr	r2, [pc, #96]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a17      	ldr	r2, [pc, #92]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a15      	ldr	r2, [pc, #84]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d10c      	bne.n	800773c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4313      	orrs	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40010000 	.word	0x40010000
 8007760:	40000400 	.word	0x40000400
 8007764:	40000800 	.word	0x40000800
 8007768:	40000c00 	.word	0x40000c00
 800776c:	40010400 	.word	0x40010400
 8007770:	40014000 	.word	0x40014000
 8007774:	40001800 	.word	0x40001800

08007778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e03f      	b.n	8007832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fc fbec 	bl	8003fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2224      	movs	r2, #36	; 0x24
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f829 	bl	800783c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695a      	ldr	r2, [r3, #20]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800783c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007840:	b0c0      	sub	sp, #256	; 0x100
 8007842:	af00      	add	r7, sp, #0
 8007844:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007858:	68d9      	ldr	r1, [r3, #12]
 800785a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	ea40 0301 	orr.w	r3, r0, r1
 8007864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	431a      	orrs	r2, r3
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	431a      	orrs	r2, r3
 800787c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007894:	f021 010c 	bic.w	r1, r1, #12
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078a2:	430b      	orrs	r3, r1
 80078a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b6:	6999      	ldr	r1, [r3, #24]
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	ea40 0301 	orr.w	r3, r0, r1
 80078c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4b8f      	ldr	r3, [pc, #572]	; (8007b08 <UART_SetConfig+0x2cc>)
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d005      	beq.n	80078dc <UART_SetConfig+0xa0>
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4b8d      	ldr	r3, [pc, #564]	; (8007b0c <UART_SetConfig+0x2d0>)
 80078d8:	429a      	cmp	r2, r3
 80078da:	d104      	bne.n	80078e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078dc:	f7fe fa06 	bl	8005cec <HAL_RCC_GetPCLK2Freq>
 80078e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078e4:	e003      	b.n	80078ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078e6:	f7fe f9ed 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 80078ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f8:	f040 810c 	bne.w	8007b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007900:	2200      	movs	r2, #0
 8007902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007906:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800790a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800790e:	4622      	mov	r2, r4
 8007910:	462b      	mov	r3, r5
 8007912:	1891      	adds	r1, r2, r2
 8007914:	65b9      	str	r1, [r7, #88]	; 0x58
 8007916:	415b      	adcs	r3, r3
 8007918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800791a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800791e:	4621      	mov	r1, r4
 8007920:	eb12 0801 	adds.w	r8, r2, r1
 8007924:	4629      	mov	r1, r5
 8007926:	eb43 0901 	adc.w	r9, r3, r1
 800792a:	f04f 0200 	mov.w	r2, #0
 800792e:	f04f 0300 	mov.w	r3, #0
 8007932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800793a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800793e:	4690      	mov	r8, r2
 8007940:	4699      	mov	r9, r3
 8007942:	4623      	mov	r3, r4
 8007944:	eb18 0303 	adds.w	r3, r8, r3
 8007948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800794c:	462b      	mov	r3, r5
 800794e:	eb49 0303 	adc.w	r3, r9, r3
 8007952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007962:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800796a:	460b      	mov	r3, r1
 800796c:	18db      	adds	r3, r3, r3
 800796e:	653b      	str	r3, [r7, #80]	; 0x50
 8007970:	4613      	mov	r3, r2
 8007972:	eb42 0303 	adc.w	r3, r2, r3
 8007976:	657b      	str	r3, [r7, #84]	; 0x54
 8007978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800797c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007980:	f7f8 fe2e 	bl	80005e0 <__aeabi_uldivmod>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4b61      	ldr	r3, [pc, #388]	; (8007b10 <UART_SetConfig+0x2d4>)
 800798a:	fba3 2302 	umull	r2, r3, r3, r2
 800798e:	095b      	lsrs	r3, r3, #5
 8007990:	011c      	lsls	r4, r3, #4
 8007992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007996:	2200      	movs	r2, #0
 8007998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800799c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80079a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	1891      	adds	r1, r2, r2
 80079aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80079ac:	415b      	adcs	r3, r3
 80079ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079b4:	4641      	mov	r1, r8
 80079b6:	eb12 0a01 	adds.w	sl, r2, r1
 80079ba:	4649      	mov	r1, r9
 80079bc:	eb43 0b01 	adc.w	fp, r3, r1
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079d4:	4692      	mov	sl, r2
 80079d6:	469b      	mov	fp, r3
 80079d8:	4643      	mov	r3, r8
 80079da:	eb1a 0303 	adds.w	r3, sl, r3
 80079de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079e2:	464b      	mov	r3, r9
 80079e4:	eb4b 0303 	adc.w	r3, fp, r3
 80079e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80079fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a00:	460b      	mov	r3, r1
 8007a02:	18db      	adds	r3, r3, r3
 8007a04:	643b      	str	r3, [r7, #64]	; 0x40
 8007a06:	4613      	mov	r3, r2
 8007a08:	eb42 0303 	adc.w	r3, r2, r3
 8007a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a16:	f7f8 fde3 	bl	80005e0 <__aeabi_uldivmod>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4b3b      	ldr	r3, [pc, #236]	; (8007b10 <UART_SetConfig+0x2d4>)
 8007a22:	fba3 2301 	umull	r2, r3, r3, r1
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	2264      	movs	r2, #100	; 0x64
 8007a2a:	fb02 f303 	mul.w	r3, r2, r3
 8007a2e:	1acb      	subs	r3, r1, r3
 8007a30:	00db      	lsls	r3, r3, #3
 8007a32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a36:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <UART_SetConfig+0x2d4>)
 8007a38:	fba3 2302 	umull	r2, r3, r3, r2
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a44:	441c      	add	r4, r3
 8007a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a58:	4642      	mov	r2, r8
 8007a5a:	464b      	mov	r3, r9
 8007a5c:	1891      	adds	r1, r2, r2
 8007a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a60:	415b      	adcs	r3, r3
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a68:	4641      	mov	r1, r8
 8007a6a:	1851      	adds	r1, r2, r1
 8007a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8007a6e:	4649      	mov	r1, r9
 8007a70:	414b      	adcs	r3, r1
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a80:	4659      	mov	r1, fp
 8007a82:	00cb      	lsls	r3, r1, #3
 8007a84:	4651      	mov	r1, sl
 8007a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a8a:	4651      	mov	r1, sl
 8007a8c:	00ca      	lsls	r2, r1, #3
 8007a8e:	4610      	mov	r0, r2
 8007a90:	4619      	mov	r1, r3
 8007a92:	4603      	mov	r3, r0
 8007a94:	4642      	mov	r2, r8
 8007a96:	189b      	adds	r3, r3, r2
 8007a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a9c:	464b      	mov	r3, r9
 8007a9e:	460a      	mov	r2, r1
 8007aa0:	eb42 0303 	adc.w	r3, r2, r3
 8007aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007abc:	460b      	mov	r3, r1
 8007abe:	18db      	adds	r3, r3, r3
 8007ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	eb42 0303 	adc.w	r3, r2, r3
 8007ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ad2:	f7f8 fd85 	bl	80005e0 <__aeabi_uldivmod>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <UART_SetConfig+0x2d4>)
 8007adc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	2164      	movs	r1, #100	; 0x64
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	3332      	adds	r3, #50	; 0x32
 8007aee:	4a08      	ldr	r2, [pc, #32]	; (8007b10 <UART_SetConfig+0x2d4>)
 8007af0:	fba2 2303 	umull	r2, r3, r2, r3
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	f003 0207 	and.w	r2, r3, #7
 8007afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4422      	add	r2, r4
 8007b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b04:	e105      	b.n	8007d12 <UART_SetConfig+0x4d6>
 8007b06:	bf00      	nop
 8007b08:	40011000 	.word	0x40011000
 8007b0c:	40011400 	.word	0x40011400
 8007b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b26:	4642      	mov	r2, r8
 8007b28:	464b      	mov	r3, r9
 8007b2a:	1891      	adds	r1, r2, r2
 8007b2c:	6239      	str	r1, [r7, #32]
 8007b2e:	415b      	adcs	r3, r3
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
 8007b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b36:	4641      	mov	r1, r8
 8007b38:	1854      	adds	r4, r2, r1
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	eb43 0501 	adc.w	r5, r3, r1
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	00eb      	lsls	r3, r5, #3
 8007b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b4e:	00e2      	lsls	r2, r4, #3
 8007b50:	4614      	mov	r4, r2
 8007b52:	461d      	mov	r5, r3
 8007b54:	4643      	mov	r3, r8
 8007b56:	18e3      	adds	r3, r4, r3
 8007b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b5c:	464b      	mov	r3, r9
 8007b5e:	eb45 0303 	adc.w	r3, r5, r3
 8007b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b82:	4629      	mov	r1, r5
 8007b84:	008b      	lsls	r3, r1, #2
 8007b86:	4621      	mov	r1, r4
 8007b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	008a      	lsls	r2, r1, #2
 8007b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b94:	f7f8 fd24 	bl	80005e0 <__aeabi_uldivmod>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4b60      	ldr	r3, [pc, #384]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	011c      	lsls	r4, r3, #4
 8007ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007bb8:	4642      	mov	r2, r8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	1891      	adds	r1, r2, r2
 8007bbe:	61b9      	str	r1, [r7, #24]
 8007bc0:	415b      	adcs	r3, r3
 8007bc2:	61fb      	str	r3, [r7, #28]
 8007bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bc8:	4641      	mov	r1, r8
 8007bca:	1851      	adds	r1, r2, r1
 8007bcc:	6139      	str	r1, [r7, #16]
 8007bce:	4649      	mov	r1, r9
 8007bd0:	414b      	adcs	r3, r1
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007be0:	4659      	mov	r1, fp
 8007be2:	00cb      	lsls	r3, r1, #3
 8007be4:	4651      	mov	r1, sl
 8007be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bea:	4651      	mov	r1, sl
 8007bec:	00ca      	lsls	r2, r1, #3
 8007bee:	4610      	mov	r0, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	189b      	adds	r3, r3, r2
 8007bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bfc:	464b      	mov	r3, r9
 8007bfe:	460a      	mov	r2, r1
 8007c00:	eb42 0303 	adc.w	r3, r2, r3
 8007c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c20:	4649      	mov	r1, r9
 8007c22:	008b      	lsls	r3, r1, #2
 8007c24:	4641      	mov	r1, r8
 8007c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c2a:	4641      	mov	r1, r8
 8007c2c:	008a      	lsls	r2, r1, #2
 8007c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c32:	f7f8 fcd5 	bl	80005e0 <__aeabi_uldivmod>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4b39      	ldr	r3, [pc, #228]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	2164      	movs	r1, #100	; 0x64
 8007c44:	fb01 f303 	mul.w	r3, r1, r3
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	3332      	adds	r3, #50	; 0x32
 8007c4e:	4a34      	ldr	r2, [pc, #208]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c5a:	441c      	add	r4, r3
 8007c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c60:	2200      	movs	r2, #0
 8007c62:	673b      	str	r3, [r7, #112]	; 0x70
 8007c64:	677a      	str	r2, [r7, #116]	; 0x74
 8007c66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c6a:	4642      	mov	r2, r8
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	1891      	adds	r1, r2, r2
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	415b      	adcs	r3, r3
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c7a:	4641      	mov	r1, r8
 8007c7c:	1851      	adds	r1, r2, r1
 8007c7e:	6039      	str	r1, [r7, #0]
 8007c80:	4649      	mov	r1, r9
 8007c82:	414b      	adcs	r3, r1
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	f04f 0300 	mov.w	r3, #0
 8007c8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c92:	4659      	mov	r1, fp
 8007c94:	00cb      	lsls	r3, r1, #3
 8007c96:	4651      	mov	r1, sl
 8007c98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c9c:	4651      	mov	r1, sl
 8007c9e:	00ca      	lsls	r2, r1, #3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	189b      	adds	r3, r3, r2
 8007caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cac:	464b      	mov	r3, r9
 8007cae:	460a      	mov	r2, r1
 8007cb0:	eb42 0303 	adc.w	r3, r2, r3
 8007cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8007cc0:	667a      	str	r2, [r7, #100]	; 0x64
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007cce:	4649      	mov	r1, r9
 8007cd0:	008b      	lsls	r3, r1, #2
 8007cd2:	4641      	mov	r1, r8
 8007cd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cd8:	4641      	mov	r1, r8
 8007cda:	008a      	lsls	r2, r1, #2
 8007cdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ce0:	f7f8 fc7e 	bl	80005e0 <__aeabi_uldivmod>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007cea:	fba3 1302 	umull	r1, r3, r3, r2
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	2164      	movs	r1, #100	; 0x64
 8007cf2:	fb01 f303 	mul.w	r3, r1, r3
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	3332      	adds	r3, #50	; 0x32
 8007cfc:	4a08      	ldr	r2, [pc, #32]	; (8007d20 <UART_SetConfig+0x4e4>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	f003 020f 	and.w	r2, r3, #15
 8007d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4422      	add	r2, r4
 8007d10:	609a      	str	r2, [r3, #8]
}
 8007d12:	bf00      	nop
 8007d14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d1e:	bf00      	nop
 8007d20:	51eb851f 	.word	0x51eb851f

08007d24 <__libc_init_array>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4d0d      	ldr	r5, [pc, #52]	; (8007d5c <__libc_init_array+0x38>)
 8007d28:	4c0d      	ldr	r4, [pc, #52]	; (8007d60 <__libc_init_array+0x3c>)
 8007d2a:	1b64      	subs	r4, r4, r5
 8007d2c:	10a4      	asrs	r4, r4, #2
 8007d2e:	2600      	movs	r6, #0
 8007d30:	42a6      	cmp	r6, r4
 8007d32:	d109      	bne.n	8007d48 <__libc_init_array+0x24>
 8007d34:	4d0b      	ldr	r5, [pc, #44]	; (8007d64 <__libc_init_array+0x40>)
 8007d36:	4c0c      	ldr	r4, [pc, #48]	; (8007d68 <__libc_init_array+0x44>)
 8007d38:	f000 f820 	bl	8007d7c <_init>
 8007d3c:	1b64      	subs	r4, r4, r5
 8007d3e:	10a4      	asrs	r4, r4, #2
 8007d40:	2600      	movs	r6, #0
 8007d42:	42a6      	cmp	r6, r4
 8007d44:	d105      	bne.n	8007d52 <__libc_init_array+0x2e>
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4c:	4798      	blx	r3
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7ee      	b.n	8007d30 <__libc_init_array+0xc>
 8007d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d56:	4798      	blx	r3
 8007d58:	3601      	adds	r6, #1
 8007d5a:	e7f2      	b.n	8007d42 <__libc_init_array+0x1e>
 8007d5c:	08008ce0 	.word	0x08008ce0
 8007d60:	08008ce0 	.word	0x08008ce0
 8007d64:	08008ce0 	.word	0x08008ce0
 8007d68:	08008ce4 	.word	0x08008ce4

08007d6c <memset>:
 8007d6c:	4402      	add	r2, r0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d100      	bne.n	8007d76 <memset+0xa>
 8007d74:	4770      	bx	lr
 8007d76:	f803 1b01 	strb.w	r1, [r3], #1
 8007d7a:	e7f9      	b.n	8007d70 <memset+0x4>

08007d7c <_init>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	bf00      	nop
 8007d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d82:	bc08      	pop	{r3}
 8007d84:	469e      	mov	lr, r3
 8007d86:	4770      	bx	lr

08007d88 <_fini>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr
