
TR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ecc  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a08  08007a08  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a10  08007a10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00005854  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005864  20005864  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f56  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ef1  00000000  00000000  00034f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00037e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00039030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002191c  00000000  00000000  0003a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015759  00000000  00000000  0005b9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8049  00000000  00000000  00071125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013916e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a60  00000000  00000000  001391c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b24 	.word	0x08006b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006b24 	.word	0x08006b24

080001c8 <__aeabi_d2f>:
 80001c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80001cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80001d0:	bf24      	itt	cs
 80001d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80001d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80001da:	d90d      	bls.n	80001f8 <__aeabi_d2f+0x30>
 80001dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80001e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80001e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80001e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80001ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80001f0:	bf08      	it	eq
 80001f2:	f020 0001 	biceq.w	r0, r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80001fc:	d121      	bne.n	8000242 <__aeabi_d2f+0x7a>
 80001fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000202:	bfbc      	itt	lt
 8000204:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000208:	4770      	bxlt	lr
 800020a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000212:	f1c2 0218 	rsb	r2, r2, #24
 8000216:	f1c2 0c20 	rsb	ip, r2, #32
 800021a:	fa10 f30c 	lsls.w	r3, r0, ip
 800021e:	fa20 f002 	lsr.w	r0, r0, r2
 8000222:	bf18      	it	ne
 8000224:	f040 0001 	orrne.w	r0, r0, #1
 8000228:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800022c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000230:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000234:	ea40 000c 	orr.w	r0, r0, ip
 8000238:	fa23 f302 	lsr.w	r3, r3, r2
 800023c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000240:	e7cc      	b.n	80001dc <__aeabi_d2f+0x14>
 8000242:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000246:	d107      	bne.n	8000258 <__aeabi_d2f+0x90>
 8000248:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800024c:	bf1e      	ittt	ne
 800024e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000252:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000256:	4770      	bxne	lr
 8000258:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800025c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b974 	b.w	8000568 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9d08      	ldr	r5, [sp, #32]
 800029e:	4604      	mov	r4, r0
 80002a0:	468e      	mov	lr, r1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d14d      	bne.n	8000342 <__udivmoddi4+0xaa>
 80002a6:	428a      	cmp	r2, r1
 80002a8:	4694      	mov	ip, r2
 80002aa:	d969      	bls.n	8000380 <__udivmoddi4+0xe8>
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	b152      	cbz	r2, 80002c8 <__udivmoddi4+0x30>
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	f1c2 0120 	rsb	r1, r2, #32
 80002ba:	fa20 f101 	lsr.w	r1, r0, r1
 80002be:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c2:	ea41 0e03 	orr.w	lr, r1, r3
 80002c6:	4094      	lsls	r4, r2
 80002c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002cc:	0c21      	lsrs	r1, r4, #16
 80002ce:	fbbe f6f8 	udiv	r6, lr, r8
 80002d2:	fa1f f78c 	uxth.w	r7, ip
 80002d6:	fb08 e316 	mls	r3, r8, r6, lr
 80002da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002de:	fb06 f107 	mul.w	r1, r6, r7
 80002e2:	4299      	cmp	r1, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x64>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ee:	f080 811f 	bcs.w	8000530 <__udivmoddi4+0x298>
 80002f2:	4299      	cmp	r1, r3
 80002f4:	f240 811c 	bls.w	8000530 <__udivmoddi4+0x298>
 80002f8:	3e02      	subs	r6, #2
 80002fa:	4463      	add	r3, ip
 80002fc:	1a5b      	subs	r3, r3, r1
 80002fe:	b2a4      	uxth	r4, r4
 8000300:	fbb3 f0f8 	udiv	r0, r3, r8
 8000304:	fb08 3310 	mls	r3, r8, r0, r3
 8000308:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800030c:	fb00 f707 	mul.w	r7, r0, r7
 8000310:	42a7      	cmp	r7, r4
 8000312:	d90a      	bls.n	800032a <__udivmoddi4+0x92>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 33ff 	add.w	r3, r0, #4294967295
 800031c:	f080 810a 	bcs.w	8000534 <__udivmoddi4+0x29c>
 8000320:	42a7      	cmp	r7, r4
 8000322:	f240 8107 	bls.w	8000534 <__udivmoddi4+0x29c>
 8000326:	4464      	add	r4, ip
 8000328:	3802      	subs	r0, #2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	1be4      	subs	r4, r4, r7
 8000330:	2600      	movs	r6, #0
 8000332:	b11d      	cbz	r5, 800033c <__udivmoddi4+0xa4>
 8000334:	40d4      	lsrs	r4, r2
 8000336:	2300      	movs	r3, #0
 8000338:	e9c5 4300 	strd	r4, r3, [r5]
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0xc2>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80ef 	beq.w	800052a <__udivmoddi4+0x292>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x160>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xd4>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80f9 	bhi.w	800055e <__udivmoddi4+0x2c6>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0303 	sbc.w	r3, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	469e      	mov	lr, r3
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e0      	beq.n	800033c <__udivmoddi4+0xa4>
 800037a:	e9c5 4e00 	strd	r4, lr, [r5]
 800037e:	e7dd      	b.n	800033c <__udivmoddi4+0xa4>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xec>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	2a00      	cmp	r2, #0
 800038a:	f040 8092 	bne.w	80004b2 <__udivmoddi4+0x21a>
 800038e:	eba1 010c 	sub.w	r1, r1, ip
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2601      	movs	r6, #1
 800039c:	0c20      	lsrs	r0, r4, #16
 800039e:	fbb1 f3f7 	udiv	r3, r1, r7
 80003a2:	fb07 1113 	mls	r1, r7, r3, r1
 80003a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003aa:	fb0e f003 	mul.w	r0, lr, r3
 80003ae:	4288      	cmp	r0, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x12c>
 80003b2:	eb1c 0101 	adds.w	r1, ip, r1
 80003b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x12a>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2c0>
 80003c2:	4643      	mov	r3, r8
 80003c4:	1a09      	subs	r1, r1, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003cc:	fb07 1110 	mls	r1, r7, r0, r1
 80003d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x156>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x154>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2ca>
 80003ec:	4608      	mov	r0, r1
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f6:	e79c      	b.n	8000332 <__udivmoddi4+0x9a>
 80003f8:	f1c6 0720 	rsb	r7, r6, #32
 80003fc:	40b3      	lsls	r3, r6
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa20 f407 	lsr.w	r4, r0, r7
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	431c      	orrs	r4, r3
 8000410:	40f9      	lsrs	r1, r7
 8000412:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000416:	fa00 f306 	lsl.w	r3, r0, r6
 800041a:	fbb1 f8f9 	udiv	r8, r1, r9
 800041e:	0c20      	lsrs	r0, r4, #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fb09 1118 	mls	r1, r9, r8, r1
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	fb08 f00e 	mul.w	r0, r8, lr
 8000430:	4288      	cmp	r0, r1
 8000432:	fa02 f206 	lsl.w	r2, r2, r6
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b8>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2bc>
 8000444:	4288      	cmp	r0, r1
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2bc>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4461      	add	r1, ip
 8000450:	1a09      	subs	r1, r1, r0
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb1 f0f9 	udiv	r0, r1, r9
 8000458:	fb09 1110 	mls	r1, r9, r0, r1
 800045c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	458e      	cmp	lr, r1
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1e2>
 8000468:	eb1c 0101 	adds.w	r1, ip, r1
 800046c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2b4>
 8000472:	458e      	cmp	lr, r1
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2b4>
 8000476:	3802      	subs	r0, #2
 8000478:	4461      	add	r1, ip
 800047a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047e:	fba0 9402 	umull	r9, r4, r0, r2
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	42a1      	cmp	r1, r4
 8000488:	46c8      	mov	r8, r9
 800048a:	46a6      	mov	lr, r4
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x2a4>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x2a0>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x212>
 8000492:	ebb3 0208 	subs.w	r2, r3, r8
 8000496:	eb61 010e 	sbc.w	r1, r1, lr
 800049a:	fa01 f707 	lsl.w	r7, r1, r7
 800049e:	fa22 f306 	lsr.w	r3, r2, r6
 80004a2:	40f1      	lsrs	r1, r6
 80004a4:	431f      	orrs	r7, r3
 80004a6:	e9c5 7100 	strd	r7, r1, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	40d8      	lsrs	r0, r3
 80004b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004bc:	fa21 f303 	lsr.w	r3, r1, r3
 80004c0:	4091      	lsls	r1, r2
 80004c2:	4301      	orrs	r1, r0
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d0:	fb07 3610 	mls	r6, r7, r0, r3
 80004d4:	0c0b      	lsrs	r3, r1, #16
 80004d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004da:	fb00 f60e 	mul.w	r6, r0, lr
 80004de:	429e      	cmp	r6, r3
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x260>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b8>
 80004f0:	429e      	cmp	r6, r3
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b8>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	1b9b      	subs	r3, r3, r6
 80004fa:	b289      	uxth	r1, r1
 80004fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000500:	fb07 3316 	mls	r3, r7, r6, r3
 8000504:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000508:	fb06 f30e 	mul.w	r3, r6, lr
 800050c:	428b      	cmp	r3, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x28a>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f106 38ff 	add.w	r8, r6, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2b0>
 800051a:	428b      	cmp	r3, r1
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2b0>
 800051e:	3e02      	subs	r6, #2
 8000520:	4461      	add	r1, ip
 8000522:	1ac9      	subs	r1, r1, r3
 8000524:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0x104>
 800052a:	462e      	mov	r6, r5
 800052c:	4628      	mov	r0, r5
 800052e:	e705      	b.n	800033c <__udivmoddi4+0xa4>
 8000530:	4606      	mov	r6, r0
 8000532:	e6e3      	b.n	80002fc <__udivmoddi4+0x64>
 8000534:	4618      	mov	r0, r3
 8000536:	e6f8      	b.n	800032a <__udivmoddi4+0x92>
 8000538:	454b      	cmp	r3, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f8>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000544:	3801      	subs	r0, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f8>
 8000548:	4646      	mov	r6, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x28a>
 800054c:	4620      	mov	r0, r4
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1e2>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x260>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b8>
 8000558:	3b02      	subs	r3, #2
 800055a:	4461      	add	r1, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x12c>
 800055e:	4630      	mov	r0, r6
 8000560:	e709      	b.n	8000376 <__udivmoddi4+0xde>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x156>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000572:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <MX_CAN1_Init+0x68>)
 8000574:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000578:	2203      	movs	r2, #3
 800057a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_CAN1_Init+0x64>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_CAN1_Init+0x64>)
 800058a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800058e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000592:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000596:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_CAN1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005be:	f002 f9b7 	bl	8002930 <HAL_CAN_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005c8:	f001 fde6 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	40006400 	.word	0x40006400

080005d8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_CAN2_Init+0x64>)
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <MX_CAN2_Init+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_CAN2_Init+0x64>)
 80005e4:	2203      	movs	r2, #3
 80005e6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_CAN2_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_CAN2_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_CAN2_Init+0x64>)
 80005f6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80005fa:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_CAN2_Init+0x64>)
 80005fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000602:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_CAN2_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_CAN2_Init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_CAN2_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_CAN2_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_CAN2_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_CAN2_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_CAN2_Init+0x64>)
 800062a:	f002 f981 	bl	8002930 <HAL_CAN_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000634:	f001 fdb0 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000054 	.word	0x20000054
 8000640:	40006800 	.word	0x40006800

08000644 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a43      	ldr	r2, [pc, #268]	; (8000770 <HAL_CAN_MspInit+0x12c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d136      	bne.n	80006d4 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000666:	4b43      	ldr	r3, [pc, #268]	; (8000774 <HAL_CAN_MspInit+0x130>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a41      	ldr	r2, [pc, #260]	; (8000774 <HAL_CAN_MspInit+0x130>)
 800066e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000670:	4b40      	ldr	r3, [pc, #256]	; (8000774 <HAL_CAN_MspInit+0x130>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d10d      	bne.n	8000694 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <HAL_CAN_MspInit+0x134>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a3d      	ldr	r2, [pc, #244]	; (8000778 <HAL_CAN_MspInit+0x134>)
 8000682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <HAL_CAN_MspInit+0x134>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	4b37      	ldr	r3, [pc, #220]	; (8000778 <HAL_CAN_MspInit+0x134>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	4a36      	ldr	r2, [pc, #216]	; (8000778 <HAL_CAN_MspInit+0x134>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6313      	str	r3, [r2, #48]	; 0x30
 80006a4:	4b34      	ldr	r3, [pc, #208]	; (8000778 <HAL_CAN_MspInit+0x134>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006c2:	2309      	movs	r3, #9
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	482b      	ldr	r0, [pc, #172]	; (800077c <HAL_CAN_MspInit+0x138>)
 80006ce:	f003 f889 	bl	80037e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80006d2:	e048      	b.n	8000766 <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a29      	ldr	r2, [pc, #164]	; (8000780 <HAL_CAN_MspInit+0x13c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d143      	bne.n	8000766 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <HAL_CAN_MspInit+0x134>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a24      	ldr	r2, [pc, #144]	; (8000778 <HAL_CAN_MspInit+0x134>)
 80006e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <HAL_CAN_MspInit+0x134>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <HAL_CAN_MspInit+0x130>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <HAL_CAN_MspInit+0x130>)
 8000702:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_CAN_MspInit+0x130>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d10d      	bne.n	8000728 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_CAN_MspInit+0x134>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <HAL_CAN_MspInit+0x134>)
 8000716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_CAN_MspInit+0x134>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_CAN_MspInit+0x134>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <HAL_CAN_MspInit+0x134>)
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	6313      	str	r3, [r2, #48]	; 0x30
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_CAN_MspInit+0x134>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	f003 0302 	and.w	r3, r3, #2
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000744:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000756:	2309      	movs	r3, #9
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <HAL_CAN_MspInit+0x140>)
 8000762:	f003 f83f 	bl	80037e4 <HAL_GPIO_Init>
}
 8000766:	bf00      	nop
 8000768:	3730      	adds	r7, #48	; 0x30
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40006400 	.word	0x40006400
 8000774:	2000007c 	.word	0x2000007c
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000
 8000780:	40006800 	.word	0x40006800
 8000784:	40020400 	.word	0x40020400

08000788 <can_init>:
	} else if (motor4 < -16384) {
		motor4 = -16384;
	}
	can_transmit(hcan, FIRST_GROUP_ID, motor1, motor2, motor3, motor4);
}
void can_init() {
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterBank = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan1, &CAN_FilterConfigStructure);
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <can_init+0x4c>)
 80007b8:	f002 f9b6 	bl	8002b28 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <can_init+0x4c>)
 80007be:	f002 fa93 	bl	8002ce8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007c2:	2102      	movs	r1, #2
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <can_init+0x4c>)
 80007c6:	f002 fad3 	bl	8002d70 <HAL_CAN_ActivateNotification>

//	HAL_CAN_ConfigFilter(&hcan2, &CAN_FilterConfigStructure);
//	HAL_CAN_Start(&hcan2);
//	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000002c 	.word	0x2000002c

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_DMA_Init+0x3c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <MX_DMA_Init+0x3c>)
 80007e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_DMA_Init+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	203b      	movs	r0, #59	; 0x3b
 8000800:	f002 fbb7 	bl	8002f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000804:	203b      	movs	r0, #59	; 0x3b
 8000806:	f002 fbd0 	bl	8002faa <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b6c      	ldr	r3, [pc, #432]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a6b      	ldr	r2, [pc, #428]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b69      	ldr	r3, [pc, #420]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b65      	ldr	r3, [pc, #404]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a64      	ldr	r2, [pc, #400]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b5e      	ldr	r3, [pc, #376]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a5d      	ldr	r2, [pc, #372]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b5b      	ldr	r3, [pc, #364]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b57      	ldr	r3, [pc, #348]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a56      	ldr	r2, [pc, #344]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b54      	ldr	r3, [pc, #336]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b50      	ldr	r3, [pc, #320]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a4f      	ldr	r2, [pc, #316]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b4d      	ldr	r3, [pc, #308]	; (80009e4 <MX_GPIO_Init+0x1cc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f248 0150 	movw	r1, #32848	; 0x8050
 80008c0:	4849      	ldr	r0, [pc, #292]	; (80009e8 <MX_GPIO_Init+0x1d0>)
 80008c2:	f003 f92b 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2130      	movs	r1, #48	; 0x30
 80008ca:	4848      	ldr	r0, [pc, #288]	; (80009ec <MX_GPIO_Init+0x1d4>)
 80008cc:	f003 f926 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 80008d0:	2200      	movs	r2, #0
 80008d2:	f248 01f3 	movw	r1, #33011	; 0x80f3
 80008d6:	4846      	ldr	r0, [pc, #280]	; (80009f0 <MX_GPIO_Init+0x1d8>)
 80008d8:	f003 f920 	bl	8003b1c <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAM_D7_Pin|CAM_D0_Pin|CAM_D1_Pin|CAM_D2_Pin
 80008dc:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 80008e0:	617b      	str	r3, [r7, #20]
                          |CAM_D3_Pin|CAM_D4_Pin|CAM_D5_Pin|CAM_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	483e      	ldr	r0, [pc, #248]	; (80009ec <MX_GPIO_Init+0x1d4>)
 80008f2:	f002 ff77 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_HREF_Pin|CAM_RRST_Pin;
 80008f6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4837      	ldr	r0, [pc, #220]	; (80009e8 <MX_GPIO_Init+0x1d0>)
 800090c:	f002 ff6a 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin;
 8000910:	f248 0350 	movw	r3, #32848	; 0x8050
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	482f      	ldr	r0, [pc, #188]	; (80009e8 <MX_GPIO_Init+0x1d0>)
 800092a:	f002 ff5b 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 800092e:	2330      	movs	r3, #48	; 0x30
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4829      	ldr	r0, [pc, #164]	; (80009ec <MX_GPIO_Init+0x1d4>)
 8000946:	f002 ff4d 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 800094a:	f248 03f3 	movw	r3, #33011	; 0x80f3
 800094e:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4823      	ldr	r0, [pc, #140]	; (80009f0 <MX_GPIO_Init+0x1d8>)
 8000964:	f002 ff3e 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8000968:	2304      	movs	r3, #4
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	481d      	ldr	r0, [pc, #116]	; (80009f0 <MX_GPIO_Init+0x1d8>)
 800097c:	f002 ff32 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 8000980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4816      	ldr	r0, [pc, #88]	; (80009f0 <MX_GPIO_Init+0x1d8>)
 8000998:	f002 ff24 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 800099c:	2304      	movs	r3, #4
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_GPIO_Init+0x1dc>)
 80009b0:	f002 ff18 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80009b4:	2308      	movs	r3, #8
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480a      	ldr	r0, [pc, #40]	; (80009f0 <MX_GPIO_Init+0x1d8>)
 80009c8:	f002 ff0c 	bl	80037e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2028      	movs	r0, #40	; 0x28
 80009d2:	f002 face 	bl	8002f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d6:	2028      	movs	r0, #40	; 0x28
 80009d8:	f002 fae7 	bl	8002faa <HAL_NVIC_EnableIRQ>

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020400 	.word	0x40020400
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <tft_char_is_changed>:
/* Macro */
#define TFT_XY(x, y) ((y)*char_max_x + (x))  // 2D to 1D index

// Useful function to improve performance
static inline bool tft_char_is_changed(const TFTBuffer buf, uint8_t x,
        uint8_t y) {
 80009f8:	b490      	push	{r4, r7}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
 8000a04:	4613      	mov	r3, r2
 8000a06:	70bb      	strb	r3, [r7, #2]
    const uint16_t idx = TFT_XY(x, y);
 8000a08:	78bb      	ldrb	r3, [r7, #2]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <tft_char_is_changed+0x110>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	fb12 f303 	smulbb	r3, r2, r3
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4413      	add	r3, r2
 8000a1e:	81fb      	strh	r3, [r7, #14]
    return ((buf->text_buf[buf->curr_screen][idx]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	89fa      	ldrh	r2, [r7, #14]
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4403      	add	r3, r0
 8000a30:	015b      	lsls	r3, r3, #5
 8000a32:	440b      	add	r3, r1
 8000a34:	4413      	add	r3, r2
 8000a36:	3301      	adds	r3, #1
 8000a38:	781a      	ldrb	r2, [r3, #0]
            != buf->text_buf[!buf->curr_screen][idx])
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bf0c      	ite	eq
 8000a42:	2301      	moveq	r3, #1
 8000a44:	2300      	movne	r3, #0
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	461c      	mov	r4, r3
 8000a4a:	89f9      	ldrh	r1, [r7, #14]
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	4623      	mov	r3, r4
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4423      	add	r3, r4
 8000a54:	015b      	lsls	r3, r3, #5
 8000a56:	4403      	add	r3, r0
 8000a58:	440b      	add	r3, r1
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	781b      	ldrb	r3, [r3, #0]
            || (buf->text_color_buf[buf->curr_screen][idx]
                    != buf->text_color_buf[!buf->curr_screen][idx])
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d147      	bne.n	8000af2 <tft_char_is_changed+0xfa>
            || (buf->text_color_buf[buf->curr_screen][idx]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	89f9      	ldrh	r1, [r7, #14]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4403      	add	r3, r0
 8000a72:	015b      	lsls	r3, r3, #5
 8000a74:	440b      	add	r3, r1
 8000a76:	33a0      	adds	r3, #160	; 0xa0
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	885a      	ldrh	r2, [r3, #2]
                    != buf->text_color_buf[!buf->curr_screen][idx])
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bf0c      	ite	eq
 8000a86:	2301      	moveq	r3, #1
 8000a88:	2300      	movne	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461c      	mov	r4, r3
 8000a8e:	89f8      	ldrh	r0, [r7, #14]
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	4623      	mov	r3, r4
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4423      	add	r3, r4
 8000a98:	015b      	lsls	r3, r3, #5
 8000a9a:	4403      	add	r3, r0
 8000a9c:	33a0      	adds	r3, #160	; 0xa0
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	440b      	add	r3, r1
 8000aa2:	885b      	ldrh	r3, [r3, #2]
            || (buf->text_color_buf[buf->curr_screen][idx]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d124      	bne.n	8000af2 <tft_char_is_changed+0xfa>
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	89f9      	ldrh	r1, [r7, #14]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4403      	add	r3, r0
 8000ab8:	015b      	lsls	r3, r3, #5
 8000aba:	440b      	add	r3, r1
 8000abc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	885a      	ldrh	r2, [r3, #2]
                    != buf->bg_color_buf[!buf->curr_screen][idx]));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	bf0c      	ite	eq
 8000ace:	2301      	moveq	r3, #1
 8000ad0:	2300      	movne	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461c      	mov	r4, r3
 8000ad6:	89f8      	ldrh	r0, [r7, #14]
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	4623      	mov	r3, r4
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4423      	add	r3, r4
 8000ae0:	015b      	lsls	r3, r3, #5
 8000ae2:	4403      	add	r3, r0
 8000ae4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	440b      	add	r3, r1
 8000aec:	885b      	ldrh	r3, [r3, #2]
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d001      	beq.n	8000af6 <tft_char_is_changed+0xfe>
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <tft_char_is_changed+0x100>
 8000af6:	2300      	movs	r3, #0
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	b2db      	uxtb	r3, r3
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc90      	pop	{r4, r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000089 	.word	0x20000089

08000b0c <itos>:
 * @param      data  The string to write to
 * @param[in]  i     The signed integer to convert
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* itos(char *data, int32_t i) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
    if (i < 0) {
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	da07      	bge.n	8000b2c <itos+0x20>
        i = -i;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	425b      	negs	r3, r3
 8000b20:	603b      	str	r3, [r7, #0]
        *data++ = '-';
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	222d      	movs	r2, #45	; 0x2d
 8000b2a:	701a      	strb	r2, [r3, #0]
    }
    char buf[14] = { 0 };
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	811a      	strh	r2, [r3, #8]
    char *ptr = &buf[1];
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	3301      	adds	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
    do {
        *ptr++ = '0' + (i % 10);
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <itos+0xa8>)
 8000b48:	fb83 1302 	smull	r1, r3, r3, r2
 8000b4c:	1099      	asrs	r1, r3, #2
 8000b4e:	17d3      	asrs	r3, r2, #31
 8000b50:	1ac9      	subs	r1, r1, r3
 8000b52:	460b      	mov	r3, r1
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	440b      	add	r3, r1
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	1ad1      	subs	r1, r2, r3
 8000b5c:	b2ca      	uxtb	r2, r1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	1c59      	adds	r1, r3, #1
 8000b62:	61f9      	str	r1, [r7, #28]
 8000b64:	3230      	adds	r2, #48	; 0x30
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <itos+0xa8>)
 8000b6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b72:	1092      	asrs	r2, r2, #2
 8000b74:	17db      	asrs	r3, r3, #31
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	603b      	str	r3, [r7, #0]
    } while (i);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1e1      	bne.n	8000b44 <itos+0x38>
    ptr--;
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
    while (*ptr) {
 8000b86:	e007      	b.n	8000b98 <itos+0x8c>
        *data++ = *ptr--;
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	1e53      	subs	r3, r2, #1
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	1c59      	adds	r1, r3, #1
 8000b92:	6079      	str	r1, [r7, #4]
 8000b94:	7812      	ldrb	r2, [r2, #0]
 8000b96:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1f3      	bne.n	8000b88 <itos+0x7c>
    }
    *data = '\0';
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
    return data;
 8000ba6:	687b      	ldr	r3, [r7, #4]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3724      	adds	r7, #36	; 0x24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	66666667 	.word	0x66666667

08000bb8 <utos0>:
 * @param[in]  i       The unsigned integer
 * @param[in]  digits  The number of digits
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* utos0(char *data, uint32_t i, uint32_t digits) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b08d      	sub	sp, #52	; 0x34
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
    char buf[20] = { 0 };
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
    char *ptr = &buf[1];
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	3301      	adds	r3, #1
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    digits--;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
    uint32_t n = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
        *ptr++ = '0' + (i % 10);
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <utos0+0xb8>)
 8000bec:	fba3 2301 	umull	r2, r3, r3, r1
 8000bf0:	08da      	lsrs	r2, r3, #3
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	1aca      	subs	r2, r1, r3
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c00:	1c59      	adds	r1, r3, #1
 8000c02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000c04:	3230      	adds	r2, #48	; 0x30
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <utos0+0xb8>)
 8000c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	60bb      	str	r3, [r7, #8]
        n++;
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	3301      	adds	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (i);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1e2      	bne.n	8000be8 <utos0+0x30>
    ptr--;
 8000c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c24:	3b01      	subs	r3, #1
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (n++ <= digits) {
 8000c28:	e004      	b.n	8000c34 <utos0+0x7c>
        *data++ = '0';
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	60fa      	str	r2, [r7, #12]
 8000c30:	2230      	movs	r2, #48	; 0x30
 8000c32:	701a      	strb	r2, [r3, #0]
    while (n++ <= digits) {
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	62ba      	str	r2, [r7, #40]	; 0x28
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d2f4      	bcs.n	8000c2a <utos0+0x72>
    }
    while (*ptr) {
 8000c40:	e007      	b.n	8000c52 <utos0+0x9a>
        *data++ = *ptr--;
 8000c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c44:	1e53      	subs	r3, r2, #1
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	1c59      	adds	r1, r3, #1
 8000c4c:	60f9      	str	r1, [r7, #12]
 8000c4e:	7812      	ldrb	r2, [r2, #0]
 8000c50:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8000c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f3      	bne.n	8000c42 <utos0+0x8a>
    }
    *data = '\0';
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
    return data;
 8000c60:	68fb      	ldr	r3, [r7, #12]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3734      	adds	r7, #52	; 0x34
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	cccccccd 	.word	0xcccccccd

08000c74 <ftos>:
 * @param[in]  i       The float
 * @param[in]  digits  The number of decimal places
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* ftos(char *data, float a, uint32_t dp) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c80:	6079      	str	r1, [r7, #4]
    int32_t i = a;
 8000c82:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 3a90 	vmov	r3, s15
 8000c8e:	61fb      	str	r3, [r7, #28]
    if (a < 0) {
 8000c90:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9c:	d515      	bpl.n	8000cca <ftos+0x56>
        *data++ = '-';
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	60fa      	str	r2, [r7, #12]
 8000ca4:	222d      	movs	r2, #45	; 0x2d
 8000ca6:	701a      	strb	r2, [r3, #0]
        i = -i;
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	425b      	negs	r3, r3
 8000cac:	61fb      	str	r3, [r7, #28]
        a = -a - i;
 8000cae:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cb2:	eeb1 7a67 	vneg.f32	s14, s15
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc4:	edc7 7a02 	vstr	s15, [r7, #8]
 8000cc8:	e00a      	b.n	8000ce0 <ftos+0x6c>
    } else {
        a = a - i;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cdc:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    data = itos(data, i);
 8000ce0:	69f9      	ldr	r1, [r7, #28]
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff ff12 	bl	8000b0c <itos>
 8000ce8:	60f8      	str	r0, [r7, #12]
    *data++ = '.';
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	60fa      	str	r2, [r7, #12]
 8000cf0:	222e      	movs	r2, #46	; 0x2e
 8000cf2:	701a      	strb	r2, [r3, #0]
    float d = a;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
    uint32_t __dp = dp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	617b      	str	r3, [r7, #20]
    while (dp--) {
 8000cfc:	e007      	b.n	8000d0e <ftos+0x9a>
        d *= 10;
 8000cfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0a:	edc7 7a06 	vstr	s15, [r7, #24]
    while (dp--) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f2      	bne.n	8000cfe <ftos+0x8a>
    }
    if (__dp != 0)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00e      	beq.n	8000d3c <ftos+0xc8>
        data = utos0(data, (uint32_t) (d + 0.5f), __dp);
 8000d1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	ee17 1a90 	vmov	r1, s15
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff ff3f 	bl	8000bb8 <utos0>
 8000d3a:	60f8      	str	r0, [r7, #12]
    return data;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <prints>:
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad) {
 8000d46:	b4f0      	push	{r4, r5, r6, r7}
 8000d48:	b08a      	sub	sp, #40	; 0x28
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	603b      	str	r3, [r7, #0]
    register int pc = 0, padchar = ' ';
 8000d54:	2400      	movs	r4, #0
 8000d56:	2320      	movs	r3, #32
 8000d58:	4619      	mov	r1, r3

    if (width > 0) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dd17      	ble.n	8000d90 <prints+0x4a>
        register int len = 0;
 8000d60:	2500      	movs	r5, #0
        register const char *ptr;
        for (ptr = string; *ptr; ++ptr)
 8000d62:	68be      	ldr	r6, [r7, #8]
 8000d64:	e001      	b.n	8000d6a <prints+0x24>
            ++len;
 8000d66:	3501      	adds	r5, #1
        for (ptr = string; *ptr; ++ptr)
 8000d68:	3601      	adds	r6, #1
 8000d6a:	7833      	ldrb	r3, [r6, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1fa      	bne.n	8000d66 <prints+0x20>
        if (len >= width)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	429d      	cmp	r5, r3
 8000d74:	db02      	blt.n	8000d7c <prints+0x36>
            width = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	e002      	b.n	8000d82 <prints+0x3c>
        else
            width -= len;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	1b5b      	subs	r3, r3, r5
 8000d80:	607b      	str	r3, [r7, #4]
        if (pad & PAD_ZERO)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <prints+0x4a>
            padchar = '0';
 8000d8c:	2330      	movs	r3, #48	; 0x30
 8000d8e:	4619      	mov	r1, r3
    }
    if (!(pad & PAD_RIGHT)) {
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d12c      	bne.n	8000df4 <prints+0xae>
        for (; width > 0; --width) {
 8000d9a:	e012      	b.n	8000dc2 <prints+0x7c>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000da0:	460b      	mov	r3, r1
 8000da2:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	bf00      	nop
            printchar(out, padchar);
            ++pc;
 8000dba:	3401      	adds	r4, #1
        for (; width > 0; --width) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dce9      	bgt.n	8000d9c <prints+0x56>
        }
    }
    for (; *string; ++string) {
 8000dc8:	e014      	b.n	8000df4 <prints+0xae>
        printchar(out, *string);
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	601a      	str	r2, [r3, #0]
}
 8000dea:	bf00      	nop
        ++pc;
 8000dec:	3401      	adds	r4, #1
    for (; *string; ++string) {
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e6      	bne.n	8000dca <prints+0x84>
    }
    for (; width > 0; --width) {
 8000dfc:	e012      	b.n	8000e24 <prints+0xde>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	460b      	mov	r3, r1
 8000e04:	613b      	str	r3, [r7, #16]
    **str = (char) c;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	601a      	str	r2, [r3, #0]
}
 8000e1a:	bf00      	nop
        printchar(out, padchar);
        ++pc;
 8000e1c:	3401      	adds	r4, #1
    for (; width > 0; --width) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dce9      	bgt.n	8000dfe <prints+0xb8>
    }

    return pc;
 8000e2a:	4623      	mov	r3, r4
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bcf0      	pop	{r4, r5, r6, r7}
 8000e34:	4770      	bx	lr

08000e36 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad,
        int letbase) {
 8000e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e3a:	b08b      	sub	sp, #44	; 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
    char print_buf[PRINT_BUF_LEN];
    register char *s;
    register int t, neg = 0, pc = 0;
 8000e46:	f04f 0900 	mov.w	r9, #0
 8000e4a:	2600      	movs	r6, #0
    register unsigned int u = (unsigned int) i;
 8000e4c:	68bd      	ldr	r5, [r7, #8]

    if (i == 0) {
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10c      	bne.n	8000e6e <printi+0x38>
        print_buf[0] = '0';
 8000e54:	2330      	movs	r3, #48	; 0x30
 8000e56:	753b      	strb	r3, [r7, #20]
        print_buf[1] = '\0';
 8000e58:	2300      	movs	r3, #0
 8000e5a:	757b      	strb	r3, [r7, #21]
        return prints(out, print_buf, width, pad);
 8000e5c:	f107 0114 	add.w	r1, r7, #20
 8000e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff ff6e 	bl	8000d46 <prints>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	e055      	b.n	8000f1a <printi+0xe4>
    }

    if (sg && b == 10 && i < 0) {
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00a      	beq.n	8000e8a <printi+0x54>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b0a      	cmp	r3, #10
 8000e78:	d107      	bne.n	8000e8a <printi+0x54>
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	da04      	bge.n	8000e8a <printi+0x54>
        neg = 1;
 8000e80:	f04f 0901 	mov.w	r9, #1
        u = (unsigned int) -i;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	425b      	negs	r3, r3
 8000e88:	461d      	mov	r5, r3
    }

    s = print_buf + PRINT_BUF_LEN - 1;
 8000e8a:	f107 0414 	add.w	r4, r7, #20
 8000e8e:	340b      	adds	r4, #11
    *s = '\0';
 8000e90:	2300      	movs	r3, #0
 8000e92:	7023      	strb	r3, [r4, #0]

    while (u) {
 8000e94:	e015      	b.n	8000ec2 <printi+0x8c>
        t = (unsigned int) u % b;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	fbb5 f2f3 	udiv	r2, r5, r3
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	1aeb      	subs	r3, r5, r3
 8000ea2:	4698      	mov	r8, r3
        if (t >= 10)
 8000ea4:	f1b8 0f09 	cmp.w	r8, #9
 8000ea8:	dd02      	ble.n	8000eb0 <printi+0x7a>
            t += letbase - '0' - 10;
 8000eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eac:	3b3a      	subs	r3, #58	; 0x3a
 8000eae:	4498      	add	r8, r3
        *--s = (char) (t + '0');
 8000eb0:	fa5f f388 	uxtb.w	r3, r8
 8000eb4:	3c01      	subs	r4, #1
 8000eb6:	3330      	adds	r3, #48	; 0x30
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	7023      	strb	r3, [r4, #0]
        u /= b;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	fbb5 f5f3 	udiv	r5, r5, r3
    while (u) {
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d1e7      	bne.n	8000e96 <printi+0x60>
    }

    if (neg) {
 8000ec6:	f1b9 0f00 	cmp.w	r9, #0
 8000eca:	d01e      	beq.n	8000f0a <printi+0xd4>
        if (width && (pad & PAD_ZERO)) {
 8000ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d018      	beq.n	8000f04 <printi+0xce>
 8000ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d013      	beq.n	8000f04 <printi+0xce>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee0:	232d      	movs	r3, #45	; 0x2d
 8000ee2:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6a3a      	ldr	r2, [r7, #32]
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
            printchar(out, '-');
            ++pc;
 8000efa:	3601      	adds	r6, #1
            --width;
 8000efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000efe:	3b01      	subs	r3, #1
 8000f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f02:	e002      	b.n	8000f0a <printi+0xd4>
        } else {
            *--s = '-';
 8000f04:	3c01      	subs	r4, #1
 8000f06:	232d      	movs	r3, #45	; 0x2d
 8000f08:	7023      	strb	r3, [r4, #0]
        }
    }

    return pc + prints(out, s, width, pad);
 8000f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f0e:	4621      	mov	r1, r4
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff ff18 	bl	8000d46 <prints>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4433      	add	r3, r6
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	372c      	adds	r7, #44	; 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f24 <printf_>:

static int printf_(char **out, float f, int width, int dp, int pad) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b090      	sub	sp, #64	; 0x40
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6178      	str	r0, [r7, #20]
 8000f2c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f30:	60f9      	str	r1, [r7, #12]
 8000f32:	60ba      	str	r2, [r7, #8]
 8000f34:	607b      	str	r3, [r7, #4]
    char buf[40] = { 0 };
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	2224      	movs	r2, #36	; 0x24
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f005 fde6 	bl	8006b14 <memset>
    ftos(buf, f, dp);
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	f107 0318 	add.w	r3, r7, #24
 8000f4e:	4611      	mov	r1, r2
 8000f50:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fe8d 	bl	8000c74 <ftos>
    return prints(out, buf, width, pad);
 8000f5a:	f107 0118 	add.w	r1, r7, #24
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	f7ff feef 	bl	8000d46 <prints>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3740      	adds	r7, #64	; 0x40
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <print>:
 * @param out pointer to Output string
 * @param format Format string
 * @param args Arguments
 * @return length of string
 */
static int print(char **out, const char *format, va_list args) {
 8000f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f78:	b08c      	sub	sp, #48	; 0x30
 8000f7a:	af04      	add	r7, sp, #16
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
    register int width, pad, dp;
    register int pc = 0;
 8000f82:	2400      	movs	r4, #0
    char scr[2];

    for (; *format != 0; ++format) {
 8000f84:	e109      	b.n	800119a <print+0x226>
        if (*format == '%') {
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b25      	cmp	r3, #37	; 0x25
 8000f8c:	f040 80ed 	bne.w	800116a <print+0x1f6>
            ++format;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
            width = pad = dp = 0;
 8000f96:	f04f 0800 	mov.w	r8, #0
 8000f9a:	4646      	mov	r6, r8
 8000f9c:	4635      	mov	r5, r6
            if (*format == '\0')
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80ff 	beq.w	80011a6 <print+0x232>
                break;
            if (*format == '%')
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b25      	cmp	r3, #37	; 0x25
 8000fae:	f000 80de 	beq.w	800116e <print+0x1fa>
                goto out;
            if (*format == '-') {
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b2d      	cmp	r3, #45	; 0x2d
 8000fb8:	d109      	bne.n	8000fce <print+0x5a>
                ++format;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
                pad = PAD_RIGHT;
 8000fc0:	2601      	movs	r6, #1
            }
            while (*format == '0') {
 8000fc2:	e004      	b.n	8000fce <print+0x5a>
                ++format;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
                pad |= PAD_ZERO;
 8000fca:	f046 0602 	orr.w	r6, r6, #2
            while (*format == '0') {
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b30      	cmp	r3, #48	; 0x30
 8000fd4:	d0f6      	beq.n	8000fc4 <print+0x50>
            }
            for (; *format >= '0' && *format <= '9'; ++format) {
 8000fd6:	e00b      	b.n	8000ff0 <print+0x7c>
                width *= 10;
 8000fd8:	462b      	mov	r3, r5
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	442b      	add	r3, r5
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	461d      	mov	r5, r3
                width += *format - '0';
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3b30      	subs	r3, #48	; 0x30
 8000fe8:	441d      	add	r5, r3
            for (; *format >= '0' && *format <= '9'; ++format) {
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3301      	adds	r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ff6:	d903      	bls.n	8001000 <print+0x8c>
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b39      	cmp	r3, #57	; 0x39
 8000ffe:	d9eb      	bls.n	8000fd8 <print+0x64>
            }
            if (*format == '.') {
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b2e      	cmp	r3, #46	; 0x2e
 8001006:	d117      	bne.n	8001038 <print+0xc4>
                ++format;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3301      	adds	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
                for (; *format >= '0' && *format <= '9'; ++format) {
 800100e:	e00b      	b.n	8001028 <print+0xb4>
                    dp *= 10;
 8001010:	4643      	mov	r3, r8
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4443      	add	r3, r8
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4698      	mov	r8, r3
                    dp += *format - '0';
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3b30      	subs	r3, #48	; 0x30
 8001020:	4498      	add	r8, r3
                for (; *format >= '0' && *format <= '9'; ++format) {
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	3301      	adds	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b2f      	cmp	r3, #47	; 0x2f
 800102e:	d903      	bls.n	8001038 <print+0xc4>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b39      	cmp	r3, #57	; 0x39
 8001036:	d9eb      	bls.n	8001010 <print+0x9c>
                }
            }
            if (*format == 's') {
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b73      	cmp	r3, #115	; 0x73
 800103e:	d112      	bne.n	8001066 <print+0xf2>
                register char *s = (char*) va_arg(args, int);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4698      	mov	r8, r3
                pc += prints(out, s ? s : "(null)", width, pad);
 800104a:	f1b8 0f00 	cmp.w	r8, #0
 800104e:	d001      	beq.n	8001054 <print+0xe0>
 8001050:	4641      	mov	r1, r8
 8001052:	e000      	b.n	8001056 <print+0xe2>
 8001054:	4957      	ldr	r1, [pc, #348]	; (80011b4 <print+0x240>)
 8001056:	4633      	mov	r3, r6
 8001058:	462a      	mov	r2, r5
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fe73 	bl	8000d46 <prints>
 8001060:	4603      	mov	r3, r0
 8001062:	441c      	add	r4, r3
                continue;
 8001064:	e096      	b.n	8001194 <print+0x220>
            }
            if (*format == 'd') {
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d10f      	bne.n	800108e <print+0x11a>
                pc += printi(out, va_arg(args, int), 10, 1, width, pad, 'a');
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	1d1a      	adds	r2, r3, #4
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	6819      	ldr	r1, [r3, #0]
 8001076:	2361      	movs	r3, #97	; 0x61
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	9601      	str	r6, [sp, #4]
 800107c:	9500      	str	r5, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	220a      	movs	r2, #10
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f7ff fed7 	bl	8000e36 <printi>
 8001088:	4603      	mov	r3, r0
 800108a:	441c      	add	r4, r3
                continue;
 800108c:	e082      	b.n	8001194 <print+0x220>
            }
            if (*format == 'x') {
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b78      	cmp	r3, #120	; 0x78
 8001094:	d10f      	bne.n	80010b6 <print+0x142>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'a');
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1d1a      	adds	r2, r3, #4
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	6819      	ldr	r1, [r3, #0]
 800109e:	2361      	movs	r3, #97	; 0x61
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	9601      	str	r6, [sp, #4]
 80010a4:	9500      	str	r5, [sp, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	2210      	movs	r2, #16
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f7ff fec3 	bl	8000e36 <printi>
 80010b0:	4603      	mov	r3, r0
 80010b2:	441c      	add	r4, r3
                continue;
 80010b4:	e06e      	b.n	8001194 <print+0x220>
            }
            if (*format == 'X') {
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b58      	cmp	r3, #88	; 0x58
 80010bc:	d10f      	bne.n	80010de <print+0x16a>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'A');
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	1d1a      	adds	r2, r3, #4
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	6819      	ldr	r1, [r3, #0]
 80010c6:	2341      	movs	r3, #65	; 0x41
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	9601      	str	r6, [sp, #4]
 80010cc:	9500      	str	r5, [sp, #0]
 80010ce:	2300      	movs	r3, #0
 80010d0:	2210      	movs	r2, #16
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff feaf 	bl	8000e36 <printi>
 80010d8:	4603      	mov	r3, r0
 80010da:	441c      	add	r4, r3
                continue;
 80010dc:	e05a      	b.n	8001194 <print+0x220>
            }
            if (*format == 'u') {
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b75      	cmp	r3, #117	; 0x75
 80010e4:	d10f      	bne.n	8001106 <print+0x192>
                pc += printi(out, va_arg(args, int), 10, 0, width, pad, 'a');
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	1d1a      	adds	r2, r3, #4
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	6819      	ldr	r1, [r3, #0]
 80010ee:	2361      	movs	r3, #97	; 0x61
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	9601      	str	r6, [sp, #4]
 80010f4:	9500      	str	r5, [sp, #0]
 80010f6:	2300      	movs	r3, #0
 80010f8:	220a      	movs	r2, #10
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff fe9b 	bl	8000e36 <printi>
 8001100:	4603      	mov	r3, r0
 8001102:	441c      	add	r4, r3
                continue;
 8001104:	e046      	b.n	8001194 <print+0x220>
            }
            if (*format == 'c') {
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b63      	cmp	r3, #99	; 0x63
 800110c:	d111      	bne.n	8001132 <print+0x1be>
                /* char are converted to int then pushed on the stack */
                scr[0] = (char) va_arg(args, int);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	753b      	strb	r3, [r7, #20]
                scr[1] = '\0';
 800111a:	2300      	movs	r3, #0
 800111c:	757b      	strb	r3, [r7, #21]
                pc += prints(out, scr, width, pad);
 800111e:	f107 0114 	add.w	r1, r7, #20
 8001122:	4633      	mov	r3, r6
 8001124:	462a      	mov	r2, r5
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff fe0d 	bl	8000d46 <prints>
 800112c:	4603      	mov	r3, r0
 800112e:	441c      	add	r4, r3
                continue;
 8001130:	e030      	b.n	8001194 <print+0x220>
            }
            if (*format == 'f') {
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b66      	cmp	r3, #102	; 0x66
 8001138:	d12c      	bne.n	8001194 <print+0x220>
                pc += printf_(out, va_arg(args, double), width, dp, pad);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3307      	adds	r3, #7
 800113e:	f023 0307 	bic.w	r3, r3, #7
 8001142:	f103 0208 	add.w	r2, r3, #8
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff f83a 	bl	80001c8 <__aeabi_d2f>
 8001154:	4633      	mov	r3, r6
 8001156:	4642      	mov	r2, r8
 8001158:	4629      	mov	r1, r5
 800115a:	ee00 0a10 	vmov	s0, r0
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff fee0 	bl	8000f24 <printf_>
 8001164:	4603      	mov	r3, r0
 8001166:	441c      	add	r4, r3
                continue;
 8001168:	e014      	b.n	8001194 <print+0x220>
            }
        } else {
            out: printchar(out, *format);
 800116a:	bf00      	nop
 800116c:	e000      	b.n	8001170 <print+0x1fc>
                goto out;
 800116e:	bf00      	nop
            out: printchar(out, *format);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
            ++pc;
 8001192:	3401      	adds	r4, #1
    for (; *format != 0; ++format) {
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3301      	adds	r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f47f aef1 	bne.w	8000f86 <print+0x12>
 80011a4:	e000      	b.n	80011a8 <print+0x234>
                break;
 80011a6:	bf00      	nop
        }
    }
    va_end(args);
    return pc;
 80011a8:	4623      	mov	r3, r4
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b4:	08006b3c 	.word	0x08006b3c

080011b8 <write_command>:
uint8_t buf_ptr = 0;
static uint8_t tft_dma_bufs[2][TFT_DMA_BUF_SIZE];
#define curr_tft_dma_buf tft_dma_bufs[buf_ptr]

/* TFT SPI communication - with MCU */
static inline void write_command(uint8_t command) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 80011c2:	bf00      	nop
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <write_command+0x40>)
 80011c6:	f003 fd19 	bl	8004bfc <HAL_SPI_GetState>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d1f9      	bne.n	80011c4 <write_command+0xc>
        // wait for the spi to be ready
        ;

    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET); // Data-Command Pin 0-Command 1-Data
 80011d0:	2200      	movs	r2, #0
 80011d2:	2110      	movs	r1, #16
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <write_command+0x44>)
 80011d6:	f002 fca1 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) &command, 1, 1);
 80011da:	1df9      	adds	r1, r7, #7
 80011dc:	2301      	movs	r3, #1
 80011de:	2201      	movs	r2, #1
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <write_command+0x40>)
 80011e2:	f003 f9fa 	bl	80045da <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2110      	movs	r1, #16
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <write_command+0x44>)
 80011ec:	f002 fc96 	bl	8003b1c <HAL_GPIO_WritePin>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200056d8 	.word	0x200056d8
 80011fc:	40020800 	.word	0x40020800

08001200 <write_data>:
static inline void write_data(uint8_t *data, uint16_t size) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) data, size, 1);
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	2301      	movs	r3, #1
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <write_data+0x20>)
 8001214:	f003 f9e1 	bl	80045da <HAL_SPI_Transmit>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200056d8 	.word	0x200056d8

08001224 <write_many>:
static inline void write_many(uint8_t command, uint8_t *data, uint16_t size) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffbe 	bl	80011b8 <write_command>
    write_data(data, size);
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	4619      	mov	r1, r3
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f7ff ffdd 	bl	8001200 <write_data>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <write_many_dma>:
static inline void write_many_dma(uint8_t command, uint8_t *data, uint16_t size) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffa8 	bl	80011b8 <write_command>
    HAL_SPI_Transmit_DMA(&TFT_SPI, (uint8_t*) data, size);
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	461a      	mov	r2, r3
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <write_many_dma+0x2c>)
 8001270:	f003 faf0 	bl	8004854 <HAL_SPI_Transmit_DMA>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200056d8 	.word	0x200056d8

08001280 <write_byte>:
static inline void write_byte(uint8_t command, uint8_t data) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	460a      	mov	r2, r1
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
    write_command(command);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff90 	bl	80011b8 <write_command>
    write_data(&data, 1);
 8001298:	1dbb      	adds	r3, r7, #6
 800129a:	2101      	movs	r1, #1
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffaf 	bl	8001200 <write_data>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <write_2hword>:
static inline void write_2hword(uint8_t command, uint16_t a, uint16_t b) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	460b      	mov	r3, r1
 80012b6:	80bb      	strh	r3, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	807b      	strh	r3, [r7, #2]
    write_command(command);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff7a 	bl	80011b8 <write_command>
    uint8_t buf[4] = { a >> 8, a & 0xFF, b >> 8, b & 0xFF };
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	733b      	strb	r3, [r7, #12]
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	737b      	strb	r3, [r7, #13]
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73bb      	strb	r3, [r7, #14]
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	73fb      	strb	r3, [r7, #15]
    write_data(buf, 4);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2104      	movs	r1, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff88 	bl	8001200 <write_data>
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <tft_clear>:

/**
 * @brief Clear the whole text buffer
 *
 */
static inline void tft_clear(void) {
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	e023      	b.n	800134c <tft_clear+0x54>
        for (uint8_t x = 0; x < char_max_x; x++) {
 8001304:	2300      	movs	r3, #0
 8001306:	71bb      	strb	r3, [r7, #6]
 8001308:	e018      	b.n	800133c <tft_clear+0x44>
            curr_text_buf[TFT_XY(x, y)] = ' ';
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <tft_clear+0x6c>)
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <tft_clear+0x6c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4a13      	ldr	r2, [pc, #76]	; (8001368 <tft_clear+0x70>)
 800131a:	7812      	ldrb	r2, [r2, #0]
 800131c:	fb03 f202 	mul.w	r2, r3, r2
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	441a      	add	r2, r3
 8001324:	4603      	mov	r3, r0
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4403      	add	r3, r0
 800132a:	015b      	lsls	r3, r3, #5
 800132c:	440b      	add	r3, r1
 800132e:	4413      	add	r3, r2
 8001330:	3301      	adds	r3, #1
 8001332:	2220      	movs	r2, #32
 8001334:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < char_max_x; x++) {
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	3301      	adds	r3, #1
 800133a:	71bb      	strb	r3, [r7, #6]
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <tft_clear+0x70>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	79ba      	ldrb	r2, [r7, #6]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3e1      	bcc.n	800130a <tft_clear+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	3301      	adds	r3, #1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <tft_clear+0x74>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	79fa      	ldrb	r2, [r7, #7]
 8001352:	429a      	cmp	r2, r3
 8001354:	d3d6      	bcc.n	8001304 <tft_clear+0xc>
        }
    }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000000 	.word	0x20000000
 8001368:	20000089 	.word	0x20000089
 800136c:	2000008a 	.word	0x2000008a

08001370 <tft_clear_full>:

/**
 * @brief Clear the whole text buffer and color buffers
 *
 */
static inline void tft_clear_full(void) {
 8001370:	b490      	push	{r4, r7}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e050      	b.n	800141e <tft_clear_full+0xae>
        for (uint8_t x = 0; x < char_max_x; x++) {
 800137c:	2300      	movs	r3, #0
 800137e:	71bb      	strb	r3, [r7, #6]
 8001380:	e045      	b.n	800140e <tft_clear_full+0x9e>
            uint16_t idx = TFT_XY(x, y);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <tft_clear_full+0xc4>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	fb12 f303 	smulbb	r3, r2, r3
 8001390:	b29a      	uxth	r2, r3
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	b29b      	uxth	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	80bb      	strh	r3, [r7, #4]
            curr_text_buf[idx] = ' ';
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <tft_clear_full+0xc8>)
 800139c:	6819      	ldr	r1, [r3, #0]
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <tft_clear_full+0xc8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	88ba      	ldrh	r2, [r7, #4]
 80013a8:	4603      	mov	r3, r0
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4403      	add	r3, r0
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	440b      	add	r3, r1
 80013b2:	4413      	add	r3, r2
 80013b4:	3301      	adds	r3, #1
 80013b6:	2220      	movs	r2, #32
 80013b8:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[idx] = curr_text_color;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <tft_clear_full+0xc8>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <tft_clear_full+0xc8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	88b9      	ldrh	r1, [r7, #4]
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <tft_clear_full+0xcc>)
 80013ca:	881c      	ldrh	r4, [r3, #0]
 80013cc:	4603      	mov	r3, r0
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4403      	add	r3, r0
 80013d2:	015b      	lsls	r3, r3, #5
 80013d4:	440b      	add	r3, r1
 80013d6:	33a0      	adds	r3, #160	; 0xa0
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	4622      	mov	r2, r4
 80013de:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[idx] = curr_bg_color;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <tft_clear_full+0xc8>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <tft_clear_full+0xc8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	88b9      	ldrh	r1, [r7, #4]
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <tft_clear_full+0xd0>)
 80013f0:	881c      	ldrh	r4, [r3, #0]
 80013f2:	4603      	mov	r3, r0
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4403      	add	r3, r0
 80013f8:	015b      	lsls	r3, r3, #5
 80013fa:	440b      	add	r3, r1
 80013fc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	4622      	mov	r2, r4
 8001406:	805a      	strh	r2, [r3, #2]
        for (uint8_t x = 0; x < char_max_x; x++) {
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	3301      	adds	r3, #1
 800140c:	71bb      	strb	r3, [r7, #6]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <tft_clear_full+0xc4>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	79ba      	ldrb	r2, [r7, #6]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3b4      	bcc.n	8001382 <tft_clear_full+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	3301      	adds	r3, #1
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <tft_clear_full+0xd4>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	79fa      	ldrb	r2, [r7, #7]
 8001424:	429a      	cmp	r2, r3
 8001426:	d3a9      	bcc.n	800137c <tft_clear_full+0xc>
        }
    }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bc90      	pop	{r4, r7}
 8001432:	4770      	bx	lr
 8001434:	20000089 	.word	0x20000089
 8001438:	20000000 	.word	0x20000000
 800143c:	20000084 	.word	0x20000084
 8001440:	20000080 	.word	0x20000080
 8001444:	2000008a 	.word	0x2000008a

08001448 <tft_set_region>:

static inline void tft_set_region(uint16_t x, uint16_t y, uint16_t w,
        uint16_t h) {
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	4604      	mov	r4, r0
 8001450:	4608      	mov	r0, r1
 8001452:	4611      	mov	r1, r2
 8001454:	461a      	mov	r2, r3
 8001456:	4623      	mov	r3, r4
 8001458:	80fb      	strh	r3, [r7, #6]
 800145a:	4603      	mov	r3, r0
 800145c:	80bb      	strh	r3, [r7, #4]
 800145e:	460b      	mov	r3, r1
 8001460:	807b      	strh	r3, [r7, #2]
 8001462:	4613      	mov	r3, r2
 8001464:	803b      	strh	r3, [r7, #0]
    uint16_t startx = x;
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	81fb      	strh	r3, [r7, #14]
    uint16_t starty = y;
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	81bb      	strh	r3, [r7, #12]
    uint16_t endx = x + w;
 800146e:	88fa      	ldrh	r2, [r7, #6]
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	4413      	add	r3, r2
 8001474:	817b      	strh	r3, [r7, #10]
    uint16_t endy = y + h;
 8001476:	88ba      	ldrh	r2, [r7, #4]
 8001478:	883b      	ldrh	r3, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	813b      	strh	r3, [r7, #8]

#ifdef MODEL_ST7735
    startx += col_shift;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <tft_set_region+0x88>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b29a      	uxth	r2, r3
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	4413      	add	r3, r2
 8001488:	81fb      	strh	r3, [r7, #14]
    starty += row_shift;
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <tft_set_region+0x8c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b29a      	uxth	r2, r3
 8001490:	89bb      	ldrh	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	81bb      	strh	r3, [r7, #12]
    endx += col_shift;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <tft_set_region+0x88>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b29a      	uxth	r2, r3
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	4413      	add	r3, r2
 80014a0:	817b      	strh	r3, [r7, #10]
    endy += row_shift;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <tft_set_region+0x8c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	893b      	ldrh	r3, [r7, #8]
 80014aa:	4413      	add	r3, r2
 80014ac:	813b      	strh	r3, [r7, #8]
#endif

    write_2hword(0x2a, startx, endx);  // Column addr set
 80014ae:	897a      	ldrh	r2, [r7, #10]
 80014b0:	89fb      	ldrh	r3, [r7, #14]
 80014b2:	4619      	mov	r1, r3
 80014b4:	202a      	movs	r0, #42	; 0x2a
 80014b6:	f7ff fef8 	bl	80012aa <write_2hword>
    write_2hword(0x2b, starty, endy);  // Row addr set
 80014ba:	893a      	ldrh	r2, [r7, #8]
 80014bc:	89bb      	ldrh	r3, [r7, #12]
 80014be:	4619      	mov	r1, r3
 80014c0:	202b      	movs	r0, #43	; 0x2b
 80014c2:	f7ff fef2 	bl	80012aa <write_2hword>
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200006ce 	.word	0x200006ce
 80014d4:	200006cf 	.word	0x200006cf

080014d8 <tft_init>:
 * @param  text_color: default text color
 * @param  text_color_sp: default special text color
 * @param  highlight_color: default highlight color
 */
void tft_init(TFT_ORIENTATION orientation, uint16_t bg_color,
        uint16_t text_color, uint16_t text_color_sp, uint16_t highlight_color) {
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4604      	mov	r4, r0
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4623      	mov	r3, r4
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	4603      	mov	r3, r0
 80014ec:	80bb      	strh	r3, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	807b      	strh	r3, [r7, #2]
 80014f2:	4613      	mov	r3, r2
 80014f4:	803b      	strh	r3, [r7, #0]
    curr_screen = 0;
 80014f6:	4b6e      	ldr	r3, [pc, #440]	; (80016b0 <tft_init+0x1d8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
    tft_orientation = orientation;
 80014fe:	4a6d      	ldr	r2, [pc, #436]	; (80016b4 <tft_init+0x1dc>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	7013      	strb	r3, [r2, #0]

    char_max_x =
            (orientation % 2) ? CHAR_MAX_X_HORIZONTAL : CHAR_MAX_X_VERTICAL;
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	b2db      	uxtb	r3, r3
    char_max_x =
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <tft_init+0x3c>
 8001510:	2214      	movs	r2, #20
 8001512:	e000      	b.n	8001516 <tft_init+0x3e>
 8001514:	2210      	movs	r2, #16
 8001516:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <tft_init+0x1e0>)
 8001518:	701a      	strb	r2, [r3, #0]
    char_max_y =
            (orientation % 2) ? CHAR_MAX_Y_HORIZONTAL : CHAR_MAX_Y_VERTICAL;
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
    char_max_y =
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <tft_init+0x52>
 8001526:	2208      	movs	r2, #8
 8001528:	e000      	b.n	800152c <tft_init+0x54>
 800152a:	220a      	movs	r2, #10
 800152c:	4b63      	ldr	r3, [pc, #396]	; (80016bc <tft_init+0x1e4>)
 800152e:	701a      	strb	r2, [r3, #0]

    TFT_SPI_INIT();
 8001530:	f000 fe38 	bl	80021a4 <MX_SPI1_Init>

    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2140      	movs	r1, #64	; 0x40
 8001538:	4861      	ldr	r0, [pc, #388]	; (80016c0 <tft_init+0x1e8>)
 800153a:	f002 faef 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800153e:	2064      	movs	r0, #100	; 0x64
 8001540:	f001 f9d2 	bl	80028e8 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	485d      	ldr	r0, [pc, #372]	; (80016c0 <tft_init+0x1e8>)
 800154a:	f002 fae7 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800154e:	2064      	movs	r0, #100	; 0x64
 8001550:	f001 f9ca 	bl	80028e8 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2140      	movs	r1, #64	; 0x40
 8001558:	4859      	ldr	r0, [pc, #356]	; (80016c0 <tft_init+0x1e8>)
 800155a:	f002 fadf 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800155e:	2064      	movs	r0, #100	; 0x64
 8001560:	f001 f9c2 	bl	80028e8 <HAL_Delay>

    HAL_GPIO_WritePin(TFT_BL_GPIO_Port, TFT_BL_Pin, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	2101      	movs	r1, #1
 8001568:	4856      	ldr	r0, [pc, #344]	; (80016c4 <tft_init+0x1ec>)
 800156a:	f002 fad7 	bl	8003b1c <HAL_GPIO_WritePin>

#if defined(TFT_CS_Pin) && !defined(MODEL_ST7735)
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
#endif

    uint32_t i = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 8001572:	e058      	b.n	8001626 <tft_init+0x14e>
        if (tft_init_code[i] == TFT_ORIENTATION_CMD) {
 8001574:	4a54      	ldr	r2, [pc, #336]	; (80016c8 <tft_init+0x1f0>)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b36      	cmp	r3, #54	; 0x36
 800157e:	d110      	bne.n	80015a2 <tft_init+0xca>
            write_byte(tft_init_code[i],
 8001580:	4a51      	ldr	r2, [pc, #324]	; (80016c8 <tft_init+0x1f0>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <tft_init+0x1dc>)
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	4611      	mov	r1, r2
 800158e:	4a4f      	ldr	r2, [pc, #316]	; (80016cc <tft_init+0x1f4>)
 8001590:	5c52      	ldrb	r2, [r2, r1]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe73 	bl	8001280 <write_byte>
                    tft_orientation_init_code[tft_orientation]);
            i++;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3301      	adds	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e041      	b.n	8001626 <tft_init+0x14e>
        } else if (tft_init_code[i] == TFT_DELAY_MARKER) {
 80015a2:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <tft_init+0x1f0>)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d10a      	bne.n	80015c4 <tft_init+0xec>
            i += 3;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3303      	adds	r3, #3
 80015b2:	60fb      	str	r3, [r7, #12]
            HAL_Delay(tft_init_code[i]);
 80015b4:	4a44      	ldr	r2, [pc, #272]	; (80016c8 <tft_init+0x1f0>)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 f993 	bl	80028e8 <HAL_Delay>
 80015c2:	e030      	b.n	8001626 <tft_init+0x14e>
        } else if (tft_init_code[i + 1] == TFT_EOL_MARKER) {
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a3f      	ldr	r2, [pc, #252]	; (80016c8 <tft_init+0x1f0>)
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	2b43      	cmp	r3, #67	; 0x43
 80015ce:	d10a      	bne.n	80015e6 <tft_init+0x10e>
            write_command(tft_init_code[i]);
 80015d0:	4a3d      	ldr	r2, [pc, #244]	; (80016c8 <tft_init+0x1f0>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fded 	bl	80011b8 <write_command>
            i++;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e01f      	b.n	8001626 <tft_init+0x14e>
        } else {
            int len;
            for (len = 0; tft_init_code[i + len + 1] != TFT_EOL_MARKER; len++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	e002      	b.n	80015f2 <tft_init+0x11a>
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	3301      	adds	r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <tft_init+0x1f0>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	2b43      	cmp	r3, #67	; 0x43
 8001600:	d1f4      	bne.n	80015ec <tft_init+0x114>
            }
            write_many(tft_init_code[i], (uint8_t*) &tft_init_code[i + 1], len);
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <tft_init+0x1f0>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	7818      	ldrb	r0, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	4a2e      	ldr	r2, [pc, #184]	; (80016c8 <tft_init+0x1f0>)
 8001610:	4413      	add	r3, r2
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	b292      	uxth	r2, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fe04 	bl	8001224 <write_many>
            i += len + 1;
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <tft_init+0x1f0>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b42      	cmp	r3, #66	; 0x42
 8001636:	d19d      	bne.n	8001574 <tft_init+0x9c>
        }
    }

#ifdef MODEL_ST7735
    switch (tft_orientation) {
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <tft_init+0x1dc>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d01a      	beq.n	8001676 <tft_init+0x19e>
 8001640:	2b03      	cmp	r3, #3
 8001642:	dc03      	bgt.n	800164c <tft_init+0x174>
 8001644:	2b01      	cmp	r3, #1
 8001646:	d008      	beq.n	800165a <tft_init+0x182>
 8001648:	2b02      	cmp	r3, #2
 800164a:	d00d      	beq.n	8001668 <tft_init+0x190>
    default:
    case 0:
        col_shift = 2;
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <tft_init+0x1f8>)
 800164e:	2202      	movs	r2, #2
 8001650:	701a      	strb	r2, [r3, #0]
        row_shift = 1;
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <tft_init+0x1fc>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
        break;
 8001658:	e014      	b.n	8001684 <tft_init+0x1ac>
    case 1:
        col_shift = 1;
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <tft_init+0x1f8>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <tft_init+0x1fc>)
 8001662:	2202      	movs	r2, #2
 8001664:	701a      	strb	r2, [r3, #0]
        break;
 8001666:	e00d      	b.n	8001684 <tft_init+0x1ac>
    case 2:
        col_shift = 2;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <tft_init+0x1f8>)
 800166a:	2202      	movs	r2, #2
 800166c:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <tft_init+0x1fc>)
 8001670:	2202      	movs	r2, #2
 8001672:	701a      	strb	r2, [r3, #0]
        break;
 8001674:	e006      	b.n	8001684 <tft_init+0x1ac>
    case 3:
        col_shift = 1;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <tft_init+0x1f8>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <tft_init+0x1fc>)
 800167e:	2202      	movs	r2, #2
 8001680:	701a      	strb	r2, [r3, #0]
        break;
 8001682:	bf00      	nop
    }
#endif

    tft_set_bg_color(bg_color);
 8001684:	88bb      	ldrh	r3, [r7, #4]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f826 	bl	80016d8 <tft_set_bg_color>
    tft_set_text_color(text_color);
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f842 	bl	8001718 <tft_set_text_color>
    tft_set_special_color(text_color_sp);
 8001694:	883b      	ldrh	r3, [r7, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f84e 	bl	8001738 <tft_set_special_color>
    tft_set_highlight_color(highlight_color);
 800169c:	8c3b      	ldrh	r3, [r7, #32]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f82a 	bl	80016f8 <tft_set_highlight_color>

    tft_force_clear();
 80016a4:	f000 f858 	bl	8001758 <tft_force_clear>
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000088 	.word	0x20000088
 80016b8:	20000089 	.word	0x20000089
 80016bc:	2000008a 	.word	0x2000008a
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	08007970 	.word	0x08007970
 80016cc:	080079e4 	.word	0x080079e4
 80016d0:	200006ce 	.word	0x200006ce
 80016d4:	200006cf 	.word	0x200006cf

080016d8 <tft_set_bg_color>:
/**
 * @brief Set current background color
 *
 * @param bg_color (BLACK, BLUE, RED, ...)
 */
void tft_set_bg_color(uint16_t bg_color) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
    curr_bg_color = bg_color;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <tft_set_bg_color+0x1c>)
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	8013      	strh	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	20000080 	.word	0x20000080

080016f8 <tft_set_highlight_color>:
/**
 * @brief Set current highlight color
 *
 * @param highlight_color (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_highlight_color(uint16_t highlight_color) {
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
    curr_highlight_color = highlight_color;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <tft_set_highlight_color+0x1c>)
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	8013      	strh	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	20000082 	.word	0x20000082

08001718 <tft_set_text_color>:
/**
 * @brief Set current text color
 *
 * @param text_color (WHITE, SKYBLUE, GREEN, ...)
 */
void tft_set_text_color(uint16_t text_color) {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
    curr_text_color = text_color;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <tft_set_text_color+0x1c>)
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	8013      	strh	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	20000084 	.word	0x20000084

08001738 <tft_set_special_color>:
/**
 * @brief Set current special text color
 *
 * @param text_color_sp (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_special_color(uint16_t text_color_sp) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	80fb      	strh	r3, [r7, #6]
    curr_text_color_sp = text_color_sp;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <tft_set_special_color+0x1c>)
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	8013      	strh	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	20000086 	.word	0x20000086

08001758 <tft_force_clear>:

/**
 * @brief  Clear every pixels on the screen
 */
void tft_force_clear(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af02      	add	r7, sp, #8
    tft_clear_full();
 800175e:	f7ff fe07 	bl	8001370 <tft_clear_full>
    tft_update(0);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 fb22 	bl	8001dac <tft_update>
    tft_clear_full();
 8001768:	f7ff fe02 	bl	8001370 <tft_clear_full>
    if (tft_orientation % 2)
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <tft_force_clear+0x50>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <tft_force_clear+0x36>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_HEIGHT, MAX_WIDTH);
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <tft_force_clear+0x54>)
 800177c:	8818      	ldrh	r0, [r3, #0]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	23a0      	movs	r3, #160	; 0xa0
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	f000 fa5a 	bl	8001c40 <tft_print_rectangle>
    else
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
}
 800178c:	e008      	b.n	80017a0 <tft_force_clear+0x48>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <tft_force_clear+0x54>)
 8001790:	8818      	ldrh	r0, [r3, #0]
 8001792:	23a0      	movs	r3, #160	; 0xa0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	f000 fa50 	bl	8001c40 <tft_print_rectangle>
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000088 	.word	0x20000088
 80017ac:	20000080 	.word	0x20000080

080017b0 <tft_print_colored>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fp pointer to the character(s)
 */
void tft_print_colored(uint8_t x, uint8_t y, const char *fp,
        uint16_t text_color, uint16_t bg_color) {
 80017b0:	b490      	push	{r4, r7}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	603a      	str	r2, [r7, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	460b      	mov	r3, r1
 80017c0:	71bb      	strb	r3, [r7, #6]
 80017c2:	4613      	mov	r3, r2
 80017c4:	80bb      	strh	r3, [r7, #4]
    uint8_t i = x;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	73fb      	strb	r3, [r7, #15]
    uint8_t j = y;
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	73bb      	strb	r3, [r7, #14]
    uint8_t is_special = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	737b      	strb	r3, [r7, #13]
    uint8_t is_highlighted = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	733b      	strb	r3, [r7, #12]
    uint8_t is_underlined = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	72fb      	strb	r3, [r7, #11]

    while (*fp && i < char_max_x && j < char_max_y) {
 80017da:	e14a      	b.n	8001a72 <tft_print_colored+0x2c2>
        switch (*fp) {
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b7d      	cmp	r3, #125	; 0x7d
 80017e2:	f300 80e0 	bgt.w	80019a6 <tft_print_colored+0x1f6>
 80017e6:	2b5b      	cmp	r3, #91	; 0x5b
 80017e8:	da04      	bge.n	80017f4 <tft_print_colored+0x44>
 80017ea:	2b0a      	cmp	r3, #10
 80017ec:	d050      	beq.n	8001890 <tft_print_colored+0xe0>
 80017ee:	2b0d      	cmp	r3, #13
 80017f0:	d051      	beq.n	8001896 <tft_print_colored+0xe6>
 80017f2:	e0d8      	b.n	80019a6 <tft_print_colored+0x1f6>
 80017f4:	3b5b      	subs	r3, #91	; 0x5b
 80017f6:	2b22      	cmp	r3, #34	; 0x22
 80017f8:	f200 80d5 	bhi.w	80019a6 <tft_print_colored+0x1f6>
 80017fc:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <tft_print_colored+0x54>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	08001973 	.word	0x08001973
 8001808:	080019a7 	.word	0x080019a7
 800180c:	08001973 	.word	0x08001973
 8001810:	080019a7 	.word	0x080019a7
 8001814:	080019a7 	.word	0x080019a7
 8001818:	0800189d 	.word	0x0800189d
 800181c:	080019a7 	.word	0x080019a7
 8001820:	080019a7 	.word	0x080019a7
 8001824:	080019a7 	.word	0x080019a7
 8001828:	080019a7 	.word	0x080019a7
 800182c:	080019a7 	.word	0x080019a7
 8001830:	080019a7 	.word	0x080019a7
 8001834:	080019a7 	.word	0x080019a7
 8001838:	080019a7 	.word	0x080019a7
 800183c:	080019a7 	.word	0x080019a7
 8001840:	080019a7 	.word	0x080019a7
 8001844:	080019a7 	.word	0x080019a7
 8001848:	080019a7 	.word	0x080019a7
 800184c:	080019a7 	.word	0x080019a7
 8001850:	080019a7 	.word	0x080019a7
 8001854:	080019a7 	.word	0x080019a7
 8001858:	080019a7 	.word	0x080019a7
 800185c:	080019a7 	.word	0x080019a7
 8001860:	080019a7 	.word	0x080019a7
 8001864:	080019a7 	.word	0x080019a7
 8001868:	080019a7 	.word	0x080019a7
 800186c:	080019a7 	.word	0x080019a7
 8001870:	080019a7 	.word	0x080019a7
 8001874:	080019a7 	.word	0x080019a7
 8001878:	080019a7 	.word	0x080019a7
 800187c:	080019a7 	.word	0x080019a7
 8001880:	080019a7 	.word	0x080019a7
 8001884:	08001985 	.word	0x08001985
 8001888:	08001997 	.word	0x08001997
 800188c:	08001985 	.word	0x08001985
        case '\n':
            j++;  // fall through
 8001890:	7bbb      	ldrb	r3, [r7, #14]
 8001892:	3301      	adds	r3, #1
 8001894:	73bb      	strb	r3, [r7, #14]
        case '\r':
            i = x;
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	73fb      	strb	r3, [r7, #15]
            break;
 800189a:	e0e7      	b.n	8001a6c <tft_print_colored+0x2bc>
        case '`': // escape character
            if (*(fp + 1) != '\0') {
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80e1 	beq.w	8001a6a <tft_print_colored+0x2ba>
                fp++;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	603b      	str	r3, [r7, #0]
                curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	7afa      	ldrb	r2, [r7, #11]
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d002      	beq.n	80018c0 <tft_print_colored+0x110>
 80018ba:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80018be:	e000      	b.n	80018c2 <tft_print_colored+0x112>
 80018c0:	2200      	movs	r2, #0
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b25c      	sxtb	r4, r3
 80018c6:	4b75      	ldr	r3, [pc, #468]	; (8001a9c <tft_print_colored+0x2ec>)
 80018c8:	6819      	ldr	r1, [r3, #0]
 80018ca:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <tft_print_colored+0x2ec>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	7bbb      	ldrb	r3, [r7, #14]
 80018d4:	4a72      	ldr	r2, [pc, #456]	; (8001aa0 <tft_print_colored+0x2f0>)
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	fb03 f202 	mul.w	r2, r3, r2
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	441a      	add	r2, r3
 80018e0:	b2e4      	uxtb	r4, r4
 80018e2:	4603      	mov	r3, r0
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4403      	add	r3, r0
 80018e8:	015b      	lsls	r3, r3, #5
 80018ea:	440b      	add	r3, r1
 80018ec:	4413      	add	r3, r2
 80018ee:	3301      	adds	r3, #1
 80018f0:	4622      	mov	r2, r4
 80018f2:	701a      	strb	r2, [r3, #0]
                curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 80018f4:	7b7b      	ldrb	r3, [r7, #13]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <tft_print_colored+0x150>
 80018fa:	4b6a      	ldr	r3, [pc, #424]	; (8001aa4 <tft_print_colored+0x2f4>)
 80018fc:	881a      	ldrh	r2, [r3, #0]
 80018fe:	e000      	b.n	8001902 <tft_print_colored+0x152>
 8001900:	88ba      	ldrh	r2, [r7, #4]
 8001902:	4b66      	ldr	r3, [pc, #408]	; (8001a9c <tft_print_colored+0x2ec>)
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <tft_print_colored+0x2ec>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461c      	mov	r4, r3
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	4863      	ldr	r0, [pc, #396]	; (8001aa0 <tft_print_colored+0x2f0>)
 8001912:	7800      	ldrb	r0, [r0, #0]
 8001914:	fb03 f000 	mul.w	r0, r3, r0
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	4418      	add	r0, r3
 800191c:	4623      	mov	r3, r4
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4423      	add	r3, r4
 8001922:	015b      	lsls	r3, r3, #5
 8001924:	4403      	add	r3, r0
 8001926:	33a0      	adds	r3, #160	; 0xa0
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	440b      	add	r3, r1
 800192c:	805a      	strh	r2, [r3, #2]
                curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 800192e:	7b3b      	ldrb	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <tft_print_colored+0x18a>
 8001934:	4b5c      	ldr	r3, [pc, #368]	; (8001aa8 <tft_print_colored+0x2f8>)
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	e000      	b.n	800193c <tft_print_colored+0x18c>
 800193a:	8b3a      	ldrh	r2, [r7, #24]
 800193c:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <tft_print_colored+0x2ec>)
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <tft_print_colored+0x2ec>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461c      	mov	r4, r3
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	4855      	ldr	r0, [pc, #340]	; (8001aa0 <tft_print_colored+0x2f0>)
 800194c:	7800      	ldrb	r0, [r0, #0]
 800194e:	fb03 f000 	mul.w	r0, r3, r0
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	4418      	add	r0, r3
 8001956:	4623      	mov	r3, r4
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4423      	add	r3, r4
 800195c:	015b      	lsls	r3, r3, #5
 800195e:	4403      	add	r3, r0
 8001960:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	440b      	add	r3, r1
 8001968:	805a      	strh	r2, [r3, #2]
                i++;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	3301      	adds	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001970:	e07b      	b.n	8001a6a <tft_print_colored+0x2ba>
        case '[':
        case ']':
            is_special = (*fp == '[');
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b5b      	cmp	r3, #91	; 0x5b
 8001978:	bf0c      	ite	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	2300      	movne	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	737b      	strb	r3, [r7, #13]
            break;
 8001982:	e073      	b.n	8001a6c <tft_print_colored+0x2bc>
        case '{':
        case '}':
            is_highlighted = (*fp == '{');
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b7b      	cmp	r3, #123	; 0x7b
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	733b      	strb	r3, [r7, #12]
            break;
 8001994:	e06a      	b.n	8001a6c <tft_print_colored+0x2bc>
        case '|':
            is_underlined = !is_underlined;
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	72fb      	strb	r3, [r7, #11]
            break;
 80019a4:	e062      	b.n	8001a6c <tft_print_colored+0x2bc>
        default:
            curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	7afa      	ldrb	r2, [r7, #11]
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	d002      	beq.n	80019b8 <tft_print_colored+0x208>
 80019b2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80019b6:	e000      	b.n	80019ba <tft_print_colored+0x20a>
 80019b8:	2200      	movs	r2, #0
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b25c      	sxtb	r4, r3
 80019be:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <tft_print_colored+0x2ec>)
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <tft_print_colored+0x2ec>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	7bbb      	ldrb	r3, [r7, #14]
 80019cc:	4a34      	ldr	r2, [pc, #208]	; (8001aa0 <tft_print_colored+0x2f0>)
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	fb03 f202 	mul.w	r2, r3, r2
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	441a      	add	r2, r3
 80019d8:	b2e4      	uxtb	r4, r4
 80019da:	4603      	mov	r3, r0
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4403      	add	r3, r0
 80019e0:	015b      	lsls	r3, r3, #5
 80019e2:	440b      	add	r3, r1
 80019e4:	4413      	add	r3, r2
 80019e6:	3301      	adds	r3, #1
 80019e8:	4622      	mov	r2, r4
 80019ea:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 80019ec:	7b7b      	ldrb	r3, [r7, #13]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <tft_print_colored+0x248>
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <tft_print_colored+0x2f4>)
 80019f4:	881a      	ldrh	r2, [r3, #0]
 80019f6:	e000      	b.n	80019fa <tft_print_colored+0x24a>
 80019f8:	88ba      	ldrh	r2, [r7, #4]
 80019fa:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <tft_print_colored+0x2ec>)
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <tft_print_colored+0x2ec>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461c      	mov	r4, r3
 8001a06:	7bbb      	ldrb	r3, [r7, #14]
 8001a08:	4825      	ldr	r0, [pc, #148]	; (8001aa0 <tft_print_colored+0x2f0>)
 8001a0a:	7800      	ldrb	r0, [r0, #0]
 8001a0c:	fb03 f000 	mul.w	r0, r3, r0
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	4418      	add	r0, r3
 8001a14:	4623      	mov	r3, r4
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4423      	add	r3, r4
 8001a1a:	015b      	lsls	r3, r3, #5
 8001a1c:	4403      	add	r3, r0
 8001a1e:	33a0      	adds	r3, #160	; 0xa0
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	440b      	add	r3, r1
 8001a24:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 8001a26:	7b3b      	ldrb	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <tft_print_colored+0x282>
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <tft_print_colored+0x2f8>)
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	e000      	b.n	8001a34 <tft_print_colored+0x284>
 8001a32:	8b3a      	ldrh	r2, [r7, #24]
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <tft_print_colored+0x2ec>)
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <tft_print_colored+0x2ec>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461c      	mov	r4, r3
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	4817      	ldr	r0, [pc, #92]	; (8001aa0 <tft_print_colored+0x2f0>)
 8001a44:	7800      	ldrb	r0, [r0, #0]
 8001a46:	fb03 f000 	mul.w	r0, r3, r0
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	4418      	add	r0, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4423      	add	r3, r4
 8001a54:	015b      	lsls	r3, r3, #5
 8001a56:	4403      	add	r3, r0
 8001a58:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	440b      	add	r3, r1
 8001a60:	805a      	strh	r2, [r3, #2]
            i++;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	3301      	adds	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
            break;
 8001a68:	e000      	b.n	8001a6c <tft_print_colored+0x2bc>
            break;
 8001a6a:	bf00      	nop
        }
        fp++;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	603b      	str	r3, [r7, #0]
    while (*fp && i < char_max_x && j < char_max_y) {
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00a      	beq.n	8001a90 <tft_print_colored+0x2e0>
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <tft_print_colored+0x2f0>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d205      	bcs.n	8001a90 <tft_print_colored+0x2e0>
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <tft_print_colored+0x2fc>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	7bba      	ldrb	r2, [r7, #14]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	f4ff aea6 	bcc.w	80017dc <tft_print_colored+0x2c>
    }
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc90      	pop	{r4, r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000089 	.word	0x20000089
 8001aa4:	20000086 	.word	0x20000086
 8001aa8:	20000082 	.word	0x20000082
 8001aac:	2000008a 	.word	0x2000008a

08001ab0 <tft_printc>:
 *
 * @param x x-coordinate
 * @param y y-coordinate
 * @param fp pointer to character
 */
void tft_printc(uint8_t x, uint8_t y, const char *fp) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	603a      	str	r2, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	460b      	mov	r3, r1
 8001abe:	71bb      	strb	r3, [r7, #6]
    tft_print_colored(x, y, fp, curr_text_color, curr_bg_color);
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <tft_printc+0x30>)
 8001ac2:	881a      	ldrh	r2, [r3, #0]
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <tft_printc+0x34>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	79b9      	ldrb	r1, [r7, #6]
 8001aca:	79f8      	ldrb	r0, [r7, #7]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	f7ff fe6d 	bl	80017b0 <tft_print_colored>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000084 	.word	0x20000084
 8001ae4:	20000080 	.word	0x20000080

08001ae8 <tft_prints>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fmt string to be printed with format
 * @param __VA_ARGS__ variables to replace spaceholders
 */
void tft_prints(uint8_t x, uint8_t y, const char *fmt, ...) {
 8001ae8:	b40c      	push	{r2, r3}
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b08e      	sub	sp, #56	; 0x38
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	460a      	mov	r2, r1
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71bb      	strb	r3, [r7, #6]
    char buf[CHAR_MAX_X * 2] = { 0 }, *fp = buf;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f005 f804 	bl	8006b14 <memset>
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	60fb      	str	r3, [r7, #12]

    va_list args;
    va_start(args, fmt);
 8001b12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b16:	60bb      	str	r3, [r7, #8]
    print(&fp, fmt, args);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fa27 	bl	8000f74 <print>

    tft_printc(x, y, buf);
 8001b26:	f107 0210 	add.w	r2, r7, #16
 8001b2a:	79b9      	ldrb	r1, [r7, #6]
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffbe 	bl	8001ab0 <tft_printc>
}
 8001b34:	bf00      	nop
 8001b36:	3738      	adds	r7, #56	; 0x38
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b3e:	b002      	add	sp, #8
 8001b40:	4770      	bx	lr
	...

08001b44 <tft_print_rectangle_dma>:
#endif
    }
}

void tft_print_rectangle_dma(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	4603      	mov	r3, r0
 8001b52:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t l = (i > TFT_DMA_BUF_PIXELS) ? TFT_DMA_BUF_PIXELS : i; // safety guard
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001b64:	bf28      	it	cs
 8001b66:	f44f 53a0 	movcs.w	r3, #5120	; 0x1400
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    tft_buffer_pixels(curr_tft_dma_buf, color, l);
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <tft_print_rectangle_dma+0xf0>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	02db      	lsls	r3, r3, #11
 8001b7a:	4a2f      	ldr	r2, [pc, #188]	; (8001c38 <tft_print_rectangle_dma+0xf4>)
 8001b7c:	441a      	add	r2, r3
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	627a      	str	r2, [r7, #36]	; 0x24
 8001b82:	89fa      	ldrh	r2, [r7, #14]
 8001b84:	847a      	strh	r2, [r7, #34]	; 0x22
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b90:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8001b92:	8afb      	ldrh	r3, [r7, #22]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	8afa      	ldrh	r2, [r7, #22]
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]
}
 8001ba8:	bf00      	nop
    while (len--) {
 8001baa:	e009      	b.n	8001bc0 <tft_print_rectangle_dma+0x7c>
        *out++ = buf[0];
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	627a      	str	r2, [r7, #36]	; 0x24
 8001bb2:	7d3a      	ldrb	r2, [r7, #20]
 8001bb4:	701a      	strb	r2, [r3, #0]
        *out++ = buf[1];
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	627a      	str	r2, [r7, #36]	; 0x24
 8001bbc:	7d7a      	ldrb	r2, [r7, #21]
 8001bbe:	701a      	strb	r2, [r3, #0]
    while (len--) {
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	1e5a      	subs	r2, r3, #1
 8001bc4:	61fa      	str	r2, [r7, #28]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <tft_print_rectangle_dma+0x68>
}
 8001bca:	bf00      	nop
    tft_set_region(x, y, w - 1, h - 1);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	b298      	uxth	r0, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	b299      	uxth	r1, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f7ff fc30 	bl	8001448 <tft_set_region>
    write_command(0x2c);
 8001be8:	202c      	movs	r0, #44	; 0x2c
 8001bea:	f7ff fae5 	bl	80011b8 <write_command>
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8001bee:	bf00      	nop
 8001bf0:	4812      	ldr	r0, [pc, #72]	; (8001c3c <tft_print_rectangle_dma+0xf8>)
 8001bf2:	f003 f803 	bl	8004bfc <HAL_SPI_GetState>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d1f9      	bne.n	8001bf0 <tft_print_rectangle_dma+0xac>
        ;
    write_many_dma(0x2c, curr_tft_dma_buf, l * PIXEL_BYTES);
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <tft_print_rectangle_dma+0xf0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	02db      	lsls	r3, r3, #11
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <tft_print_rectangle_dma+0xf4>)
 8001c0c:	1899      	adds	r1, r3, r2
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	202c      	movs	r0, #44	; 0x2c
 8001c1a:	f7ff fb19 	bl	8001250 <write_many_dma>
    buf_ptr ^= 0x1;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <tft_print_rectangle_dma+0xf0>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	f083 0301 	eor.w	r3, r3, #1
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <tft_print_rectangle_dma+0xf0>)
 8001c2a:	701a      	strb	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	; 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200006d0 	.word	0x200006d0
 8001c38:	200006d4 	.word	0x200006d4
 8001c3c:	200056d8 	.word	0x200056d8

08001c40 <tft_print_rectangle>:
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_rectangle(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b08d      	sub	sp, #52	; 0x34
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    if (i <= (64)) {
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d82f      	bhi.n	8001cc0 <tft_print_rectangle+0x80>
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	89fb      	ldrh	r3, [r7, #14]
 8001c68:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8001c6a:	8afb      	ldrh	r3, [r7, #22]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	8afa      	ldrh	r2, [r7, #22]
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	701a      	strb	r2, [r3, #0]
}
 8001c80:	bf00      	nop
        uint8_t buf[PIXEL_BYTES];
        tft_buffer_pixel(buf, color);

        tft_set_region(x, y, w - 1, h - 1);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	b298      	uxth	r0, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	b299      	uxth	r1, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f7ff fbd5 	bl	8001448 <tft_set_region>
        write_command(0x2c);
 8001c9e:	202c      	movs	r0, #44	; 0x2c
 8001ca0:	f7ff fa8a 	bl	80011b8 <write_command>
        for (; i != 0; i--) {
 8001ca4:	e008      	b.n	8001cb8 <tft_print_rectangle+0x78>
            write_data(buf, PIXEL_BYTES);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	2102      	movs	r1, #2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff faa7 	bl	8001200 <write_data>
        for (; i != 0; i--) {
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f3      	bne.n	8001ca6 <tft_print_rectangle+0x66>
        if (h % buf_max_h > 0) {
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
                    h % buf_max_h);
        }
    }
}
 8001cbe:	e040      	b.n	8001d42 <tft_print_rectangle+0x102>
        uint16_t buf_max_h = TFT_DMA_BUF_PIXELS / w;
 8001cc0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	83fb      	strh	r3, [r7, #30]
        uint16_t num_section = h / buf_max_h;
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	83bb      	strh	r3, [r7, #28]
        for (int k = 0; k < num_section; ++k) {
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	e010      	b.n	8001cfe <tft_print_rectangle+0xbe>
            tft_print_rectangle_dma(color, x, y + k * buf_max_h, w, buf_max_h);
 8001cdc:	8bfb      	ldrh	r3, [r7, #30]
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	441a      	add	r2, r3
 8001cea:	8bfb      	ldrh	r3, [r7, #30]
 8001cec:	89f8      	ldrh	r0, [r7, #14]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	f7ff ff26 	bl	8001b44 <tft_print_rectangle_dma>
        for (int k = 0; k < num_section; ++k) {
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	623b      	str	r3, [r7, #32]
 8001cfe:	8bbb      	ldrh	r3, [r7, #28]
 8001d00:	6a3a      	ldr	r2, [r7, #32]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	dbea      	blt.n	8001cdc <tft_print_rectangle+0x9c>
        if (h % buf_max_h > 0) {
 8001d06:	8bfa      	ldrh	r2, [r7, #30]
 8001d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d0e:	fb01 f202 	mul.w	r2, r1, r2
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d014      	beq.n	8001d42 <tft_print_rectangle+0x102>
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
 8001d18:	8bbb      	ldrh	r3, [r7, #28]
 8001d1a:	8bfa      	ldrh	r2, [r7, #30]
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	18d4      	adds	r4, r2, r3
 8001d26:	8bfa      	ldrh	r2, [r7, #30]
 8001d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d2e:	fb01 f202 	mul.w	r2, r1, r2
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	89f8      	ldrh	r0, [r7, #14]
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	f7ff ff01 	bl	8001b44 <tft_print_rectangle_dma>
}
 8001d42:	bf00      	nop
 8001d44:	372c      	adds	r7, #44	; 0x2c
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
	...

08001d4c <tft_print_image>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_image(void *buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8001d5a:	bf00      	nop
 8001d5c:	4812      	ldr	r0, [pc, #72]	; (8001da8 <tft_print_image+0x5c>)
 8001d5e:	f002 ff4d 	bl	8004bfc <HAL_SPI_GetState>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d1f9      	bne.n	8001d5c <tft_print_image+0x10>
        ;  // wait for the SPI to be ready

    tft_set_region(x, y, w - 1, h - 1);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	b298      	uxth	r0, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	b299      	uxth	r1, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f7ff fb62 	bl	8001448 <tft_set_region>

    write_many_dma(0x2c, buf, w * h * PIXEL_BYTES);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	fb12 f303 	smulbb	r3, r2, r3
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	202c      	movs	r0, #44	; 0x2c
 8001d9c:	f7ff fa58 	bl	8001250 <write_many_dma>
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200056d8 	.word	0x200056d8

08001dac <tft_update>:
 * @brief Update the screen in certain period
 *
 * @param period time in ms
 * @return state
 */
uint8_t tft_update(uint32_t period) {
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b08d      	sub	sp, #52	; 0x34
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	6078      	str	r0, [r7, #4]
    static uint32_t last_update = 0;
    if ((HAL_GetTick() - last_update) < period)
 8001db4:	f000 fd8c 	bl	80028d0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4ba0      	ldr	r3, [pc, #640]	; (800203c <tft_update+0x290>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d901      	bls.n	8001dca <tft_update+0x1e>
        return 2;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e133      	b.n	8002032 <tft_update+0x286>
    last_update = HAL_GetTick();
 8001dca:	f000 fd81 	bl	80028d0 <HAL_GetTick>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a9a      	ldr	r2, [pc, #616]	; (800203c <tft_update+0x290>)
 8001dd2:	6013      	str	r3, [r2, #0]

    for (uint8_t j = 0; j < char_max_y; j++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dda:	e115      	b.n	8002008 <tft_update+0x25c>
        for (uint8_t i = 0; i < char_max_x; i++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001de2:	e105      	b.n	8001ff0 <tft_update+0x244>
            if (tft_char_is_changed(tft_screens, i, j)) {
 8001de4:	4b96      	ldr	r3, [pc, #600]	; (8002040 <tft_update+0x294>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001dec:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fe01 	bl	80009f8 <tft_char_is_changed>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80f4 	beq.w	8001fe6 <tft_update+0x23a>
                uint8_t adj_cnt = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8001e04:	e004      	b.n	8001e10 <tft_update+0x64>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
                    adj_cnt++;  // Search for diff char
 8001e06:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8001e10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001e14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a8a      	ldr	r2, [pc, #552]	; (8002044 <tft_update+0x298>)
 8001e1c:	7812      	ldrb	r2, [r2, #0]
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	da13      	bge.n	8001e4a <tft_update+0x9e>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
 8001e22:	4b87      	ldr	r3, [pc, #540]	; (8002040 <tft_update+0x294>)
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001e2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e2e:	4413      	add	r3, r2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe fdde 	bl	80009f8 <tft_char_is_changed>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <tft_update+0x9e>
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
 8001e42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e46:	2b27      	cmp	r3, #39	; 0x27
 8001e48:	d9dd      	bls.n	8001e06 <tft_update+0x5a>

                uint16_t px = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	847b      	strh	r3, [r7, #34]	; 0x22
                uint16_t y = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 8001e52:	e09a      	b.n	8001f8a <tft_update+0x1de>
                    uint8_t char_cnt = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 8001e58:	e08e      	b.n	8001f78 <tft_update+0x1cc>
                        const uint8_t char_ptr = (CHAR_PTR(
 8001e5a:	4b79      	ldr	r3, [pc, #484]	; (8002040 <tft_update+0x294>)
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	4b78      	ldr	r3, [pc, #480]	; (8002040 <tft_update+0x294>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461c      	mov	r4, r3
 8001e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6a:	4a76      	ldr	r2, [pc, #472]	; (8002044 <tft_update+0x298>)
 8001e6c:	7812      	ldrb	r2, [r2, #0]
 8001e6e:	fb03 f202 	mul.w	r2, r3, r2
 8001e72:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	4403      	add	r3, r0
 8001e7a:	441a      	add	r2, r3
 8001e7c:	4623      	mov	r3, r4
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4423      	add	r3, r4
 8001e82:	015b      	lsls	r3, r3, #5
 8001e84:	440b      	add	r3, r1
 8001e86:	4413      	add	r3, r2
 8001e88:	3301      	adds	r3, #1
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3b20      	subs	r3, #32
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	461a      	mov	r2, r3
                                curr_text_buf[TFT_XY(i + char_cnt, j)]))[y];
 8001e92:	8c3b      	ldrh	r3, [r7, #32]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a6c      	ldr	r2, [pc, #432]	; (8002048 <tft_update+0x29c>)
 8001e98:	4413      	add	r3, r2
                        const uint8_t char_ptr = (CHAR_PTR(
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	777b      	strb	r3, [r7, #29]
                        uint16_t fg = curr_text_color_buf[TFT_XY(i + char_cnt, j)];
 8001e9e:	4b68      	ldr	r3, [pc, #416]	; (8002040 <tft_update+0x294>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b67      	ldr	r3, [pc, #412]	; (8002040 <tft_update+0x294>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461c      	mov	r4, r3
 8001eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <tft_update+0x298>)
 8001eb0:	7809      	ldrb	r1, [r1, #0]
 8001eb2:	fb03 f101 	mul.w	r1, r3, r1
 8001eb6:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001eba:	7ffb      	ldrb	r3, [r7, #31]
 8001ebc:	4403      	add	r3, r0
 8001ebe:	4419      	add	r1, r3
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4423      	add	r3, r4
 8001ec6:	015b      	lsls	r3, r3, #5
 8001ec8:	440b      	add	r3, r1
 8001eca:	33a0      	adds	r3, #160	; 0xa0
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	837b      	strh	r3, [r7, #26]
                        uint16_t bg = curr_bg_color_buf[TFT_XY(i + char_cnt, j)];
 8001ed4:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <tft_update+0x294>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <tft_update+0x294>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461c      	mov	r4, r3
 8001ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ee4:	4957      	ldr	r1, [pc, #348]	; (8002044 <tft_update+0x298>)
 8001ee6:	7809      	ldrb	r1, [r1, #0]
 8001ee8:	fb03 f101 	mul.w	r1, r3, r1
 8001eec:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001ef0:	7ffb      	ldrb	r3, [r7, #31]
 8001ef2:	4403      	add	r3, r0
 8001ef4:	4419      	add	r1, r3
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4423      	add	r3, r4
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	440b      	add	r3, r1
 8001f00:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	833b      	strh	r3, [r7, #24]
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	77bb      	strb	r3, [r7, #30]
 8001f10:	e02c      	b.n	8001f6c <tft_update+0x1c0>
                            uint16_t color =
                                    ((char_ptr >> (x - 1)) & 0x01) ? fg : bg;
 8001f12:	7f7a      	ldrb	r2, [r7, #29]
 8001f14:	7fbb      	ldrb	r3, [r7, #30]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	fa42 f303 	asr.w	r3, r2, r3
 8001f1c:	f003 0301 	and.w	r3, r3, #1
                            uint16_t color =
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <tft_update+0x17c>
 8001f24:	8b7b      	ldrh	r3, [r7, #26]
 8001f26:	e000      	b.n	8001f2a <tft_update+0x17e>
 8001f28:	8b3b      	ldrh	r3, [r7, #24]
 8001f2a:	82fb      	strh	r3, [r7, #22]
                            tft_buffer_pixel(&tft_dma_bufs[buf_ptr][px], color);
 8001f2c:	4b47      	ldr	r3, [pc, #284]	; (800204c <tft_update+0x2a0>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001f34:	460b      	mov	r3, r1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	02db      	lsls	r3, r3, #11
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a44      	ldr	r2, [pc, #272]	; (8002050 <tft_update+0x2a4>)
 8001f40:	4413      	add	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	8afb      	ldrh	r3, [r7, #22]
 8001f46:	81fb      	strh	r3, [r7, #14]
    out[0] = rgb565 >> 8;
 8001f48:	89fb      	ldrh	r3, [r7, #14]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	3301      	adds	r3, #1
 8001f58:	89fa      	ldrh	r2, [r7, #14]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]
}
 8001f5e:	bf00      	nop
                            px += PIXEL_BYTES;
 8001f60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f62:	3302      	adds	r3, #2
 8001f64:	847b      	strh	r3, [r7, #34]	; 0x22
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 8001f66:	7fbb      	ldrb	r3, [r7, #30]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	77bb      	strb	r3, [r7, #30]
 8001f6c:	7fbb      	ldrb	r3, [r7, #30]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1cf      	bne.n	8001f12 <tft_update+0x166>
                        }
                        char_cnt++;
 8001f72:	7ffb      	ldrb	r3, [r7, #31]
 8001f74:	3301      	adds	r3, #1
 8001f76:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 8001f78:	7ffa      	ldrb	r2, [r7, #31]
 8001f7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	f47f af6b 	bne.w	8001e5a <tft_update+0xae>
                    }
                    y++;
 8001f84:	8c3b      	ldrh	r3, [r7, #32]
 8001f86:	3301      	adds	r3, #1
 8001f88:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 8001f8a:	8c3b      	ldrh	r3, [r7, #32]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	f67f af61 	bls.w	8001e54 <tft_update+0xa8>
                }

                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <tft_update+0x2a0>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	02db      	lsls	r3, r3, #11
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <tft_update+0x2a4>)
 8001fa2:	1898      	adds	r0, r3, r2
 8001fa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4619      	mov	r1, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 8001fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fb0:	011b      	lsls	r3, r3, #4
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 8001fb2:	461a      	mov	r2, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 8001fb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fb8:	00db      	lsls	r3, r3, #3
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 8001fba:	461c      	mov	r4, r3
 8001fbc:	2310      	movs	r3, #16
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	4623      	mov	r3, r4
 8001fc2:	f7ff fec3 	bl	8001d4c <tft_print_image>
                        CHAR_HEIGHT);
                buf_ptr ^= 0x1;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <tft_update+0x2a0>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <tft_update+0x2a0>)
 8001fd2:	701a      	strb	r2, [r3, #0]
                i += adj_cnt - 1;
 8001fd4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fdc:	4413      	add	r3, r2
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t i = 0; i < char_max_x; i++) {
 8001fe6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fea:	3301      	adds	r3, #1
 8001fec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <tft_update+0x298>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f4ff aef3 	bcc.w	8001de4 <tft_update+0x38>
    for (uint8_t j = 0; j < char_max_y; j++) {
 8001ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002002:	3301      	adds	r3, #1
 8002004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <tft_update+0x2a8>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002010:	429a      	cmp	r2, r3
 8002012:	f4ff aee3 	bcc.w	8001ddc <tft_update+0x30>
            }
        }
    }

    // Swap pointers
    curr_screen = !curr_screen;
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <tft_update+0x294>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <tft_update+0x294>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	701a      	strb	r2, [r3, #0]

    tft_clear();
 800202c:	f7ff f964 	bl	80012f8 <tft_clear>

    return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	372c      	adds	r7, #44	; 0x2c
 8002036:	46bd      	mov	sp, r7
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	bf00      	nop
 800203c:	200056d4 	.word	0x200056d4
 8002040:	20000000 	.word	0x20000000
 8002044:	20000089 	.word	0x20000089
 8002048:	08006b70 	.word	0x08006b70
 800204c:	200006d0 	.word	0x200006d0
 8002050:	200006d4 	.word	0x200006d4
 8002054:	2000008a 	.word	0x2000008a

08002058 <main>:
	CAN_cmd_motor(4000,4000,4000,0, &hcan1);
}



int main(void) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */

	HAL_Init();
 800205e:	f000 fbd1 	bl	8002804 <HAL_Init>

    SystemClock_Config();
 8002062:	f000 f82f 	bl	80020c4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002066:	f7fe fbd7 	bl	8000818 <MX_GPIO_Init>
    MX_CAN1_Init();
 800206a:	f7fe fa7f 	bl	800056c <MX_CAN1_Init>
    MX_CAN2_Init();
 800206e:	f7fe fab3 	bl	80005d8 <MX_CAN2_Init>
    MX_USART1_UART_Init();
 8002072:	f000 fac5 	bl	8002600 <MX_USART1_UART_Init>
    MX_DMA_Init();
 8002076:	f7fe fbaf 	bl	80007d8 <MX_DMA_Init>
    MX_USART2_UART_Init();
 800207a:	f000 faeb 	bl	8002654 <MX_USART2_UART_Init>
    MX_TIM5_Init();
 800207e:	f000 f9e7 	bl	8002450 <MX_TIM5_Init>
    /* USER CODE BEGIN 2 */


    tft_init(PIN_ON_BOTTOM, BLACK, WHITE, YELLOW, DARK_GREEN);
 8002082:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800208c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002090:	2100      	movs	r1, #0
 8002092:	2002      	movs	r0, #2
 8002094:	f7ff fa20 	bl	80014d8 <tft_init>
    tft_force_clear();
 8002098:	f7ff fb5e 	bl	8001758 <tft_force_clear>

    can_init();
 800209c:	f7fe fb74 	bl	8000788 <can_init>

    tft_prints(0,0,"Hello Wolrd");
 80020a0:	4a06      	ldr	r2, [pc, #24]	; (80020bc <main+0x64>)
 80020a2:	2100      	movs	r1, #0
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fd1f 	bl	8001ae8 <tft_prints>
    tft_update(100);
 80020aa:	2064      	movs	r0, #100	; 0x64
 80020ac:	f7ff fe7e 	bl	8001dac <tft_update>
//    		tft_update(0);
//    	}

    	//tft_prints(0,0, data);
    	//basic_movement(data);
    	tft_prints(0,0,"Hello World");
 80020b0:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <main+0x68>)
 80020b2:	2100      	movs	r1, #0
 80020b4:	2000      	movs	r0, #0
 80020b6:	f7ff fd17 	bl	8001ae8 <tft_prints>
    while (1) {
 80020ba:	e7f9      	b.n	80020b0 <main+0x58>
 80020bc:	08006b58 	.word	0x08006b58
 80020c0:	08006b64 	.word	0x08006b64

080020c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b094      	sub	sp, #80	; 0x50
 80020c8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80020ca:	f107 0320 	add.w	r3, r7, #32
 80020ce:	2230      	movs	r2, #48	; 0x30
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fd1e 	bl	8006b14 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	4b28      	ldr	r3, [pc, #160]	; (8002190 <SystemClock_Config+0xcc>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <SystemClock_Config+0xcc>)
 80020f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <SystemClock_Config+0xcc>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002104:	2300      	movs	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <SystemClock_Config+0xd0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a21      	ldr	r2, [pc, #132]	; (8002194 <SystemClock_Config+0xd0>)
 800210e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <SystemClock_Config+0xd0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002120:	2301      	movs	r3, #1
 8002122:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212a:	2302      	movs	r3, #2
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800212e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8002134:	2304      	movs	r3, #4
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8002138:	23a8      	movs	r3, #168	; 0xa8
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800213c:	2302      	movs	r3, #2
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8002140:	2304      	movs	r3, #4
 8002142:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002144:	f107 0320 	add.w	r3, r7, #32
 8002148:	4618      	mov	r0, r3
 800214a:	f001 fd25 	bl	8003b98 <HAL_RCC_OscConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x94>
        Error_Handler();
 8002154:	f000 f820 	bl	8002198 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002158:	230f      	movs	r3, #15
 800215a:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215c:	2302      	movs	r3, #2
 800215e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002164:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002168:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800216a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2105      	movs	r1, #5
 8002176:	4618      	mov	r0, r3
 8002178:	f001 ff86 	bl	8004088 <HAL_RCC_ClockConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <SystemClock_Config+0xc2>
        Error_Handler();
 8002182:	f000 f809 	bl	8002198 <Error_Handler>
    }
}
 8002186:	bf00      	nop
 8002188:	3750      	adds	r7, #80	; 0x50
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000

08002198 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800219c:	b672      	cpsid	i
}
 800219e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80021a0:	e7fe      	b.n	80021a0 <Error_Handler+0x8>
	...

080021a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_SPI1_Init+0x64>)
 80021aa:	4a18      	ldr	r2, [pc, #96]	; (800220c <MX_SPI1_Init+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <MX_SPI1_Init+0x64>)
 80021b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MX_SPI1_Init+0x64>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MX_SPI1_Init+0x64>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_SPI1_Init+0x64>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_SPI1_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_SPI1_Init+0x64>)
 80021d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_SPI1_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <MX_SPI1_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_SPI1_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <MX_SPI1_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_SPI1_Init+0x64>)
 80021f0:	220a      	movs	r2, #10
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_SPI1_Init+0x64>)
 80021f6:	f002 f967 	bl	80044c8 <HAL_SPI_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002200:	f7ff ffca 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200056d8 	.word	0x200056d8
 800220c:	40013000 	.word	0x40013000

08002210 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a39      	ldr	r2, [pc, #228]	; (8002314 <HAL_SPI_MspInit+0x104>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d16b      	bne.n	800230a <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_SPI_MspInit+0x108>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a37      	ldr	r2, [pc, #220]	; (8002318 <HAL_SPI_MspInit+0x108>)
 800223c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <HAL_SPI_MspInit+0x108>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_SPI_MspInit+0x108>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a30      	ldr	r2, [pc, #192]	; (8002318 <HAL_SPI_MspInit+0x108>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_SPI_MspInit+0x108>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MOSI_Pin;
 800226a:	23a0      	movs	r3, #160	; 0xa0
 800226c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800227a:	2305      	movs	r3, #5
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4825      	ldr	r0, [pc, #148]	; (800231c <HAL_SPI_MspInit+0x10c>)
 8002286:	f001 faad 	bl	80037e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800228a:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_SPI_MspInit+0x110>)
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <HAL_SPI_MspInit+0x114>)
 800228e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <HAL_SPI_MspInit+0x110>)
 8002292:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002296:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_SPI_MspInit+0x110>)
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022c6:	2204      	movs	r2, #4
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022cc:	2203      	movs	r2, #3
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_INC16;
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022d2:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022da:	2200      	movs	r2, #0
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80022de:	4810      	ldr	r0, [pc, #64]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022e0:	f000 fe7e 	bl	8002fe0 <HAL_DMA_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80022ea:	f7ff ff55 	bl	8002198 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022f2:	649a      	str	r2, [r3, #72]	; 0x48
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_SPI_MspInit+0x110>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	2023      	movs	r0, #35	; 0x23
 8002300:	f000 fe37 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002304:	2023      	movs	r0, #35	; 0x23
 8002306:	f000 fe50 	bl	8002faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40013000 	.word	0x40013000
 8002318:	40023800 	.word	0x40023800
 800231c:	40020000 	.word	0x40020000
 8002320:	20005730 	.word	0x20005730
 8002324:	40026458 	.word	0x40026458

08002328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_MspInit+0x4c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <HAL_MspInit+0x4c>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_MspInit+0x4c>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_MspInit+0x4c>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_MspInit+0x4c>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_MspInit+0x4c>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x4>

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c4:	f000 fa70 	bl	80028a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <SPI1_IRQHandler+0x10>)
 80023d2:	f002 faf5 	bl	80049c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200056d8 	.word	0x200056d8

080023e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <USART1_IRQHandler+0x10>)
 80023e6:	f003 fcab 	bl	8005d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200057d8 	.word	0x200057d8

080023f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAM_VSYNC_Pin);
 80023f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023fc:	f001 fba8 	bl	8003b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}

08002404 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TIM5_IRQHandler+0x10>)
 800240a:	f002 fe0d 	bl	8005028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20005790 	.word	0x20005790

08002418 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <DMA2_Stream3_IRQHandler+0x10>)
 800241e:	f000 ff77 	bl	8003310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20005730 	.word	0x20005730

0800242c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <SystemInit+0x20>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <SystemInit+0x20>)
 8002438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800243c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	; 0x38
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002464:	f107 0320 	add.w	r3, r7, #32
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
 800247c:	615a      	str	r2, [r3, #20]
 800247e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <MX_TIM5_Init+0xe4>)
 8002482:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <MX_TIM5_Init+0xe8>)
 8002484:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <MX_TIM5_Init+0xe4>)
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <MX_TIM5_Init+0xe4>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <MX_TIM5_Init+0xe4>)
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <MX_TIM5_Init+0xe4>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <MX_TIM5_Init+0xe4>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024a4:	4823      	ldr	r0, [pc, #140]	; (8002534 <MX_TIM5_Init+0xe4>)
 80024a6:	f002 fd17 	bl	8004ed8 <HAL_TIM_Base_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80024b0:	f7ff fe72 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024be:	4619      	mov	r1, r3
 80024c0:	481c      	ldr	r0, [pc, #112]	; (8002534 <MX_TIM5_Init+0xe4>)
 80024c2:	f002 ff7b 	bl	80053bc <HAL_TIM_ConfigClockSource>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80024cc:	f7ff fe64 	bl	8002198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024d0:	4818      	ldr	r0, [pc, #96]	; (8002534 <MX_TIM5_Init+0xe4>)
 80024d2:	f002 fd50 	bl	8004f76 <HAL_TIM_PWM_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80024dc:	f7ff fe5c 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024e8:	f107 0320 	add.w	r3, r7, #32
 80024ec:	4619      	mov	r1, r3
 80024ee:	4811      	ldr	r0, [pc, #68]	; (8002534 <MX_TIM5_Init+0xe4>)
 80024f0:	f003 fb48 	bl	8005b84 <HAL_TIMEx_MasterConfigSynchronization>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80024fa:	f7ff fe4d 	bl	8002198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fe:	2360      	movs	r3, #96	; 0x60
 8002500:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	4807      	ldr	r0, [pc, #28]	; (8002534 <MX_TIM5_Init+0xe4>)
 8002516:	f002 fe8f 	bl	8005238 <HAL_TIM_PWM_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8002520:	f7ff fe3a 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <MX_TIM5_Init+0xe4>)
 8002526:	f000 f831 	bl	800258c <HAL_TIM_MspPostInit>

}
 800252a:	bf00      	nop
 800252c:	3738      	adds	r7, #56	; 0x38
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20005790 	.word	0x20005790
 8002538:	40000c00 	.word	0x40000c00

0800253c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <HAL_TIM_Base_MspInit+0x48>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d115      	bne.n	800257a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_TIM_Base_MspInit+0x4c>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <HAL_TIM_Base_MspInit+0x4c>)
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_TIM_Base_MspInit+0x4c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	2032      	movs	r0, #50	; 0x32
 8002570:	f000 fcff 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002574:	2032      	movs	r0, #50	; 0x32
 8002576:	f000 fd18 	bl	8002faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40000c00 	.word	0x40000c00
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_TIM_MspPostInit+0x68>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d11d      	bne.n	80025ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_TIM_MspPostInit+0x6c>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_TIM_MspPostInit+0x6c>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_TIM_MspPostInit+0x6c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 80025ca:	2301      	movs	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025da:	2302      	movs	r3, #2
 80025dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	4619      	mov	r1, r3
 80025e4:	4805      	ldr	r0, [pc, #20]	; (80025fc <HAL_TIM_MspPostInit+0x70>)
 80025e6:	f001 f8fd 	bl	80037e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40000c00 	.word	0x40000c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000

08002600 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <MX_USART1_UART_Init+0x50>)
 8002608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <MX_USART1_UART_Init+0x4c>)
 800260c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <MX_USART1_UART_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <MX_USART1_UART_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <MX_USART1_UART_Init+0x4c>)
 8002638:	f003 fb34 	bl	8005ca4 <HAL_UART_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002642:	f7ff fda9 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200057d8 	.word	0x200057d8
 8002650:	40011000 	.word	0x40011000

08002654 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_USART2_UART_Init+0x50>)
 800265c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_USART2_UART_Init+0x4c>)
 800268c:	f003 fb0a 	bl	8005ca4 <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002696:	f7ff fd7f 	bl	8002198 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000581c 	.word	0x2000581c
 80026a4:	40004400 	.word	0x40004400

080026a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <HAL_UART_MspInit+0xf8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d135      	bne.n	8002736 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4a34      	ldr	r2, [pc, #208]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 80026d4:	f043 0310 	orr.w	r3, r3, #16
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44
 80026da:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002702:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002710:	2303      	movs	r3, #3
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002714:	2307      	movs	r3, #7
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f107 031c 	add.w	r3, r7, #28
 800271c:	4619      	mov	r1, r3
 800271e:	4822      	ldr	r0, [pc, #136]	; (80027a8 <HAL_UART_MspInit+0x100>)
 8002720:	f001 f860 	bl	80037e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	2025      	movs	r0, #37	; 0x25
 800272a:	f000 fc22 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800272e:	2025      	movs	r0, #37	; 0x25
 8002730:	f000 fc3b 	bl	8002faa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002734:	e030      	b.n	8002798 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_UART_MspInit+0x104>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d12b      	bne.n	8002798 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 800274a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274e:	6413      	str	r3, [r2, #64]	; 0x40
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6313      	str	r3, [r2, #48]	; 0x30
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_UART_MspInit+0xfc>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002778:	230c      	movs	r3, #12
 800277a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002788:	2307      	movs	r3, #7
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	4619      	mov	r1, r3
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <HAL_UART_MspInit+0x100>)
 8002794:	f001 f826 	bl	80037e4 <HAL_GPIO_Init>
}
 8002798:	bf00      	nop
 800279a:	3730      	adds	r7, #48	; 0x30
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40004400 	.word	0x40004400

080027b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b4:	480d      	ldr	r0, [pc, #52]	; (80027ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027b6:	490e      	ldr	r1, [pc, #56]	; (80027f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027bc:	e002      	b.n	80027c4 <LoopCopyDataInit>

080027be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c2:	3304      	adds	r3, #4

080027c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c8:	d3f9      	bcc.n	80027be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027cc:	4c0b      	ldr	r4, [pc, #44]	; (80027fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d0:	e001      	b.n	80027d6 <LoopFillZerobss>

080027d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d4:	3204      	adds	r2, #4

080027d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d8:	d3fb      	bcc.n	80027d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027da:	f7ff fe27 	bl	800242c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027de:	f004 f975 	bl	8006acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e2:	f7ff fc39 	bl	8002058 <main>
  bx  lr    
 80027e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80027f4:	08007a18 	.word	0x08007a18
  ldr r2, =_sbss
 80027f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80027fc:	20005864 	.word	0x20005864

08002800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC_IRQHandler>
	...

08002804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <HAL_Init+0x40>)
 800280e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <HAL_Init+0x40>)
 800281a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_Init+0x40>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_Init+0x40>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282c:	2003      	movs	r0, #3
 800282e:	f000 fb95 	bl	8002f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002832:	200f      	movs	r0, #15
 8002834:	f000 f808 	bl	8002848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002838:	f7ff fd76 	bl	8002328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023c00 	.word	0x40023c00

08002848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_InitTick+0x54>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_InitTick+0x58>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fbad 	bl	8002fc6 <HAL_SYSTICK_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00e      	b.n	8002894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b0f      	cmp	r3, #15
 800287a:	d80a      	bhi.n	8002892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800287c:	2200      	movs	r2, #0
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f000 fb75 	bl	8002f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002888:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <HAL_InitTick+0x5c>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000004 	.word	0x20000004
 80028a0:	2000000c 	.word	0x2000000c
 80028a4:	20000008 	.word	0x20000008

080028a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_IncTick+0x20>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_IncTick+0x24>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	4a04      	ldr	r2, [pc, #16]	; (80028cc <HAL_IncTick+0x24>)
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	2000000c 	.word	0x2000000c
 80028cc:	20005860 	.word	0x20005860

080028d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return uwTick;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_GetTick+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20005860 	.word	0x20005860

080028e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff ffee 	bl	80028d0 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d005      	beq.n	800290e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_Delay+0x44>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800290e:	bf00      	nop
 8002910:	f7ff ffde 	bl	80028d0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	429a      	cmp	r2, r3
 800291e:	d8f7      	bhi.n	8002910 <HAL_Delay+0x28>
  {
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000000c 	.word	0x2000000c

08002930 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0ed      	b.n	8002b1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fd fe78 	bl	8000644 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002964:	f7ff ffb4 	bl	80028d0 <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800296a:	e012      	b.n	8002992 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800296c:	f7ff ffb0 	bl	80028d0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b0a      	cmp	r3, #10
 8002978:	d90b      	bls.n	8002992 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2205      	movs	r2, #5
 800298a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e0c5      	b.n	8002b1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0e5      	beq.n	800296c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0202 	bic.w	r2, r2, #2
 80029ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029b0:	f7ff ff8e 	bl	80028d0 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029b6:	e012      	b.n	80029de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029b8:	f7ff ff8a 	bl	80028d0 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b0a      	cmp	r3, #10
 80029c4:	d90b      	bls.n	80029de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2205      	movs	r2, #5
 80029d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e09f      	b.n	8002b1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e5      	bne.n	80029b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7e1b      	ldrb	r3, [r3, #24]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d108      	bne.n	8002a06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e007      	b.n	8002a16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7e5b      	ldrb	r3, [r3, #25]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e007      	b.n	8002a40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7e9b      	ldrb	r3, [r3, #26]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d108      	bne.n	8002a5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0220 	orr.w	r2, r2, #32
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e007      	b.n	8002a6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0220 	bic.w	r2, r2, #32
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7edb      	ldrb	r3, [r3, #27]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d108      	bne.n	8002a84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0210 	bic.w	r2, r2, #16
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e007      	b.n	8002a94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0210 	orr.w	r2, r2, #16
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7f1b      	ldrb	r3, [r3, #28]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d108      	bne.n	8002aae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0208 	orr.w	r2, r2, #8
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e007      	b.n	8002abe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0208 	bic.w	r2, r2, #8
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7f5b      	ldrb	r3, [r3, #29]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d108      	bne.n	8002ad8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0204 	orr.w	r2, r2, #4
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e007      	b.n	8002ae8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	ea42 0103 	orr.w	r1, r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	1e5a      	subs	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d003      	beq.n	8002b4e <HAL_CAN_ConfigFilter+0x26>
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	f040 80be 	bne.w	8002cca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002b50:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b68:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2201      	movs	r2, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d123      	bne.n	8002bf8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bd2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3248      	adds	r2, #72	; 0x48
 8002bd8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bee:	6979      	ldr	r1, [r7, #20]
 8002bf0:	3348      	adds	r3, #72	; 0x48
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d122      	bne.n	8002c46 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3248      	adds	r2, #72	; 0x48
 8002c26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c3c:	6979      	ldr	r1, [r7, #20]
 8002c3e:	3348      	adds	r3, #72	; 0x48
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	401a      	ands	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002c60:	e007      	b.n	8002c72 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	401a      	ands	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c8c:	e007      	b.n	8002c9e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cbc:	f023 0201 	bic.w	r2, r3, #1
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e006      	b.n	8002cd8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40006400 	.word	0x40006400

08002ce8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d12e      	bne.n	8002d5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d14:	f7ff fddc 	bl	80028d0 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d1a:	e012      	b.n	8002d42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d1c:	f7ff fdd8 	bl	80028d0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b0a      	cmp	r3, #10
 8002d28:	d90b      	bls.n	8002d42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2205      	movs	r2, #5
 8002d3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e012      	b.n	8002d68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e5      	bne.n	8002d1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e006      	b.n	8002d68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
  }
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d002      	beq.n	8002d8e <HAL_CAN_ActivateNotification+0x1e>
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d109      	bne.n	8002da2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6959      	ldr	r1, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e006      	b.n	8002db0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dee:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	60d3      	str	r3, [r2, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <__NVIC_GetPriorityGrouping+0x18>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	f003 0307 	and.w	r3, r3, #7
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	db0b      	blt.n	8002e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4907      	ldr	r1, [pc, #28]	; (8002e58 <__NVIC_EnableIRQ+0x38>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	2001      	movs	r0, #1
 8002e42:	fa00 f202 	lsl.w	r2, r0, r2
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	; (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	4313      	orrs	r3, r2
         );
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f28:	d301      	bcc.n	8002f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00f      	b.n	8002f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <SysTick_Config+0x40>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f36:	210f      	movs	r1, #15
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f7ff ff8e 	bl	8002e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <SysTick_Config+0x40>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <SysTick_Config+0x40>)
 8002f48:	2207      	movs	r2, #7
 8002f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	e000e010 	.word	0xe000e010

08002f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff29 	bl	8002dbc <__NVIC_SetPriorityGrouping>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f84:	f7ff ff3e 	bl	8002e04 <__NVIC_GetPriorityGrouping>
 8002f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f7ff ff8e 	bl	8002eb0 <NVIC_EncodePriority>
 8002f94:	4602      	mov	r2, r0
 8002f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff5d 	bl	8002e5c <__NVIC_SetPriority>
}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff31 	bl	8002e20 <__NVIC_EnableIRQ>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ffa2 	bl	8002f18 <SysTick_Config>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff fc70 	bl	80028d0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e099      	b.n	8003130 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301c:	e00f      	b.n	800303e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800301e:	f7ff fc57 	bl	80028d0 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b05      	cmp	r3, #5
 800302a:	d908      	bls.n	800303e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2203      	movs	r2, #3
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e078      	b.n	8003130 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e8      	bne.n	800301e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4b38      	ldr	r3, [pc, #224]	; (8003138 <HAL_DMA_Init+0x158>)
 8003058:	4013      	ands	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2b04      	cmp	r3, #4
 8003096:	d107      	bne.n	80030a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	4313      	orrs	r3, r2
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0307 	bic.w	r3, r3, #7
 80030be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d117      	bne.n	8003102 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00e      	beq.n	8003102 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fb01 	bl	80036ec <DMA_CheckFifoParam>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2240      	movs	r2, #64	; 0x40
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030fe:	2301      	movs	r3, #1
 8003100:	e016      	b.n	8003130 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fab8 	bl	8003680 <DMA_CalcBaseAndBitshift>
 8003110:	4603      	mov	r3, r0
 8003112:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	223f      	movs	r2, #63	; 0x3f
 800311a:	409a      	lsls	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	f010803f 	.word	0xf010803f

0800313c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_DMA_Start_IT+0x26>
 800315e:	2302      	movs	r3, #2
 8003160:	e040      	b.n	80031e4 <HAL_DMA_Start_IT+0xa8>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d12f      	bne.n	80031d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fa4a 	bl	8003624 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	223f      	movs	r2, #63	; 0x3f
 8003196:	409a      	lsls	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0216 	orr.w	r2, r2, #22
 80031aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0208 	orr.w	r2, r2, #8
 80031c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e005      	b.n	80031e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031de:	2302      	movs	r3, #2
 80031e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031fa:	f7ff fb69 	bl	80028d0 <HAL_GetTick>
 80031fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d008      	beq.n	800321e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2280      	movs	r2, #128	; 0x80
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e052      	b.n	80032c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0216 	bic.w	r2, r2, #22
 800322c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800323c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <HAL_DMA_Abort+0x62>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0208 	bic.w	r2, r2, #8
 800325c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326e:	e013      	b.n	8003298 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003270:	f7ff fb2e 	bl	80028d0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b05      	cmp	r3, #5
 800327c:	d90c      	bls.n	8003298 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2203      	movs	r2, #3
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e015      	b.n	80032c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e4      	bne.n	8003270 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	223f      	movs	r2, #63	; 0x3f
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d004      	beq.n	80032ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00c      	b.n	8003304 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2205      	movs	r2, #5
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800331c:	4b8e      	ldr	r3, [pc, #568]	; (8003558 <HAL_DMA_IRQHandler+0x248>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a8e      	ldr	r2, [pc, #568]	; (800355c <HAL_DMA_IRQHandler+0x24c>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0a9b      	lsrs	r3, r3, #10
 8003328:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	2208      	movs	r2, #8
 800333c:	409a      	lsls	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01a      	beq.n	800337c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0204 	bic.w	r2, r2, #4
 8003362:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	2208      	movs	r2, #8
 800336a:	409a      	lsls	r2, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d012      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	2201      	movs	r2, #1
 80033a0:	409a      	lsls	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0202 	orr.w	r2, r3, #2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	2204      	movs	r2, #4
 80033b8:	409a      	lsls	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d012      	beq.n	80033e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00b      	beq.n	80033e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	2204      	movs	r2, #4
 80033d6:	409a      	lsls	r2, r3
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f043 0204 	orr.w	r2, r3, #4
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	2210      	movs	r2, #16
 80033ee:	409a      	lsls	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d043      	beq.n	8003480 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d03c      	beq.n	8003480 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	2210      	movs	r2, #16
 800340c:	409a      	lsls	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d018      	beq.n	8003452 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d108      	bne.n	8003440 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d024      	beq.n	8003480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
 800343e:	e01f      	b.n	8003480 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
 8003450:	e016      	b.n	8003480 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0208 	bic.w	r2, r2, #8
 800346e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	2220      	movs	r2, #32
 8003486:	409a      	lsls	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 808f 	beq.w	80035b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8087 	beq.w	80035b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	2220      	movs	r2, #32
 80034a8:	409a      	lsls	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	d136      	bne.n	8003528 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0216 	bic.w	r2, r2, #22
 80034c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <HAL_DMA_IRQHandler+0x1da>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0208 	bic.w	r2, r2, #8
 80034f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	223f      	movs	r2, #63	; 0x3f
 8003500:	409a      	lsls	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351a:	2b00      	cmp	r3, #0
 800351c:	d07e      	beq.n	800361c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
        }
        return;
 8003526:	e079      	b.n	800361c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01d      	beq.n	8003572 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10d      	bne.n	8003560 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	2b00      	cmp	r3, #0
 800354a:	d031      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
 8003554:	e02c      	b.n	80035b0 <HAL_DMA_IRQHandler+0x2a0>
 8003556:	bf00      	nop
 8003558:	20000004 	.word	0x20000004
 800355c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d023      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
 8003570:	e01e      	b.n	80035b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10f      	bne.n	80035a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0210 	bic.w	r2, r2, #16
 800358e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d032      	beq.n	800361e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d022      	beq.n	800360a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2205      	movs	r2, #5
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3301      	adds	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d307      	bcc.n	80035f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f2      	bne.n	80035dc <HAL_DMA_IRQHandler+0x2cc>
 80035f6:	e000      	b.n	80035fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
 800361a:	e000      	b.n	800361e <HAL_DMA_IRQHandler+0x30e>
        return;
 800361c:	bf00      	nop
    }
  }
}
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003640:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d108      	bne.n	8003664 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003662:	e007      	b.n	8003674 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	3b10      	subs	r3, #16
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	091b      	lsrs	r3, r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800369a:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <DMA_CalcBaseAndBitshift+0x68>)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d909      	bls.n	80036c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	1d1a      	adds	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	659a      	str	r2, [r3, #88]	; 0x58
 80036c0:	e007      	b.n	80036d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	aaaaaaab 	.word	0xaaaaaaab
 80036e8:	08007a00 	.word	0x08007a00

080036ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11f      	bne.n	8003746 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d856      	bhi.n	80037ba <DMA_CheckFifoParam+0xce>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <DMA_CheckFifoParam+0x28>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003725 	.word	0x08003725
 8003718:	08003737 	.word	0x08003737
 800371c:	08003725 	.word	0x08003725
 8003720:	080037bb 	.word	0x080037bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d046      	beq.n	80037be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003734:	e043      	b.n	80037be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800373e:	d140      	bne.n	80037c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003744:	e03d      	b.n	80037c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374e:	d121      	bne.n	8003794 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d837      	bhi.n	80037c6 <DMA_CheckFifoParam+0xda>
 8003756:	a201      	add	r2, pc, #4	; (adr r2, 800375c <DMA_CheckFifoParam+0x70>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	0800376d 	.word	0x0800376d
 8003760:	08003773 	.word	0x08003773
 8003764:	0800376d 	.word	0x0800376d
 8003768:	08003785 	.word	0x08003785
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e030      	b.n	80037d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d025      	beq.n	80037ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003782:	e022      	b.n	80037ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800378c:	d11f      	bne.n	80037ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003792:	e01c      	b.n	80037ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d903      	bls.n	80037a2 <DMA_CheckFifoParam+0xb6>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d003      	beq.n	80037a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037a0:	e018      	b.n	80037d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      break;
 80037a6:	e015      	b.n	80037d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      break;
 80037b8:	e00b      	b.n	80037d2 <DMA_CheckFifoParam+0xe6>
      break;
 80037ba:	bf00      	nop
 80037bc:	e00a      	b.n	80037d4 <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
 80037c0:	e008      	b.n	80037d4 <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
 80037c4:	e006      	b.n	80037d4 <DMA_CheckFifoParam+0xe8>
      break;
 80037c6:	bf00      	nop
 80037c8:	e004      	b.n	80037d4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e002      	b.n	80037d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <DMA_CheckFifoParam+0xe8>
      break;
 80037d2:	bf00      	nop
    }
  } 
  
  return status; 
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop

080037e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	; 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	e16b      	b.n	8003ad8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003800:	2201      	movs	r2, #1
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	429a      	cmp	r2, r3
 800381a:	f040 815a 	bne.w	8003ad2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d005      	beq.n	8003836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003832:	2b02      	cmp	r3, #2
 8003834:	d130      	bne.n	8003898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2203      	movs	r2, #3
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800386c:	2201      	movs	r2, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 0201 	and.w	r2, r3, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d017      	beq.n	80038d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2203      	movs	r2, #3
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d123      	bne.n	8003928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	08da      	lsrs	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3208      	adds	r2, #8
 80038e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	08da      	lsrs	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3208      	adds	r2, #8
 8003922:	69b9      	ldr	r1, [r7, #24]
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0203 	and.w	r2, r3, #3
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80b4 	beq.w	8003ad2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	4b60      	ldr	r3, [pc, #384]	; (8003af0 <HAL_GPIO_Init+0x30c>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	4a5f      	ldr	r2, [pc, #380]	; (8003af0 <HAL_GPIO_Init+0x30c>)
 8003974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003978:	6453      	str	r3, [r2, #68]	; 0x44
 800397a:	4b5d      	ldr	r3, [pc, #372]	; (8003af0 <HAL_GPIO_Init+0x30c>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003986:	4a5b      	ldr	r2, [pc, #364]	; (8003af4 <HAL_GPIO_Init+0x310>)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3302      	adds	r3, #2
 800398e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	220f      	movs	r2, #15
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_GPIO_Init+0x314>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02b      	beq.n	8003a0a <HAL_GPIO_Init+0x226>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a51      	ldr	r2, [pc, #324]	; (8003afc <HAL_GPIO_Init+0x318>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d025      	beq.n	8003a06 <HAL_GPIO_Init+0x222>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a50      	ldr	r2, [pc, #320]	; (8003b00 <HAL_GPIO_Init+0x31c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01f      	beq.n	8003a02 <HAL_GPIO_Init+0x21e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a4f      	ldr	r2, [pc, #316]	; (8003b04 <HAL_GPIO_Init+0x320>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d019      	beq.n	80039fe <HAL_GPIO_Init+0x21a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a4e      	ldr	r2, [pc, #312]	; (8003b08 <HAL_GPIO_Init+0x324>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <HAL_GPIO_Init+0x216>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a4d      	ldr	r2, [pc, #308]	; (8003b0c <HAL_GPIO_Init+0x328>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00d      	beq.n	80039f6 <HAL_GPIO_Init+0x212>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4c      	ldr	r2, [pc, #304]	; (8003b10 <HAL_GPIO_Init+0x32c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <HAL_GPIO_Init+0x20e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	; (8003b14 <HAL_GPIO_Init+0x330>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_GPIO_Init+0x20a>
 80039ea:	2307      	movs	r3, #7
 80039ec:	e00e      	b.n	8003a0c <HAL_GPIO_Init+0x228>
 80039ee:	2308      	movs	r3, #8
 80039f0:	e00c      	b.n	8003a0c <HAL_GPIO_Init+0x228>
 80039f2:	2306      	movs	r3, #6
 80039f4:	e00a      	b.n	8003a0c <HAL_GPIO_Init+0x228>
 80039f6:	2305      	movs	r3, #5
 80039f8:	e008      	b.n	8003a0c <HAL_GPIO_Init+0x228>
 80039fa:	2304      	movs	r3, #4
 80039fc:	e006      	b.n	8003a0c <HAL_GPIO_Init+0x228>
 80039fe:	2303      	movs	r3, #3
 8003a00:	e004      	b.n	8003a0c <HAL_GPIO_Init+0x228>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e002      	b.n	8003a0c <HAL_GPIO_Init+0x228>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_GPIO_Init+0x228>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	f002 0203 	and.w	r2, r2, #3
 8003a12:	0092      	lsls	r2, r2, #2
 8003a14:	4093      	lsls	r3, r2
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a1c:	4935      	ldr	r1, [pc, #212]	; (8003af4 <HAL_GPIO_Init+0x310>)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	3302      	adds	r3, #2
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <HAL_GPIO_Init+0x334>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a4e:	4a32      	ldr	r2, [pc, #200]	; (8003b18 <HAL_GPIO_Init+0x334>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a54:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <HAL_GPIO_Init+0x334>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a78:	4a27      	ldr	r2, [pc, #156]	; (8003b18 <HAL_GPIO_Init+0x334>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <HAL_GPIO_Init+0x334>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa2:	4a1d      	ldr	r2, [pc, #116]	; (8003b18 <HAL_GPIO_Init+0x334>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <HAL_GPIO_Init+0x334>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003acc:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <HAL_GPIO_Init+0x334>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	f67f ae90 	bls.w	8003800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3724      	adds	r7, #36	; 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40013800 	.word	0x40013800
 8003af8:	40020000 	.word	0x40020000
 8003afc:	40020400 	.word	0x40020400
 8003b00:	40020800 	.word	0x40020800
 8003b04:	40020c00 	.word	0x40020c00
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40021400 	.word	0x40021400
 8003b10:	40021800 	.word	0x40021800
 8003b14:	40021c00 	.word	0x40021c00
 8003b18:	40013c00 	.word	0x40013c00

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b38:	e003      	b.n	8003b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	041a      	lsls	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	619a      	str	r2, [r3, #24]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f806 	bl	8003b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40013c00 	.word	0x40013c00

08003b80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e267      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d075      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb6:	4b88      	ldr	r3, [pc, #544]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d00c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4b85      	ldr	r3, [pc, #532]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d112      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bce:	4b82      	ldr	r3, [pc, #520]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bda:	d10b      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	4b7e      	ldr	r3, [pc, #504]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05b      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x108>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d157      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e242      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfc:	d106      	bne.n	8003c0c <HAL_RCC_OscConfig+0x74>
 8003bfe:	4b76      	ldr	r3, [pc, #472]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a75      	ldr	r2, [pc, #468]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x98>
 8003c16:	4b70      	ldr	r3, [pc, #448]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6f      	ldr	r2, [pc, #444]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b6d      	ldr	r3, [pc, #436]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6c      	ldr	r2, [pc, #432]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c30:	4b69      	ldr	r3, [pc, #420]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a68      	ldr	r2, [pc, #416]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b66      	ldr	r3, [pc, #408]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a65      	ldr	r2, [pc, #404]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fe3e 	bl	80028d0 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe fe3a 	bl	80028d0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e207      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xc0>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fe fe2a 	bl	80028d0 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe fe26 	bl	80028d0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1f3      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0xe8>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d063      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cae:	4b4a      	ldr	r3, [pc, #296]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d11c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc6:	4b44      	ldr	r3, [pc, #272]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d116      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1c7      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cea:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4937      	ldr	r1, [pc, #220]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	e03a      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d08:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <HAL_RCC_OscConfig+0x244>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fddf 	bl	80028d0 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fe fddb 	bl	80028d0 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e1a8      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4925      	ldr	r1, [pc, #148]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCC_OscConfig+0x244>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fdbe 	bl	80028d0 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fe fdba 	bl	80028d0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e187      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d036      	beq.n	8003df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <HAL_RCC_OscConfig+0x248>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe fd9e 	bl	80028d0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fe fd9a 	bl	80028d0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e167      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x200>
 8003db6:	e01b      	b.n	8003df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_RCC_OscConfig+0x248>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbe:	f7fe fd87 	bl	80028d0 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	e00e      	b.n	8003de4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc6:	f7fe fd83 	bl	80028d0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d907      	bls.n	8003de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e150      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	42470000 	.word	0x42470000
 8003de0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	4b88      	ldr	r3, [pc, #544]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ea      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8097 	beq.w	8003f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b81      	ldr	r3, [pc, #516]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	4b7d      	ldr	r3, [pc, #500]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a7c      	ldr	r2, [pc, #496]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b7a      	ldr	r3, [pc, #488]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b77      	ldr	r3, [pc, #476]	; (800400c <HAL_RCC_OscConfig+0x474>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d118      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3a:	4b74      	ldr	r3, [pc, #464]	; (800400c <HAL_RCC_OscConfig+0x474>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a73      	ldr	r2, [pc, #460]	; (800400c <HAL_RCC_OscConfig+0x474>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e46:	f7fe fd43 	bl	80028d0 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4e:	f7fe fd3f 	bl	80028d0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e10c      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e60:	4b6a      	ldr	r3, [pc, #424]	; (800400c <HAL_RCC_OscConfig+0x474>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x2ea>
 8003e74:	4b64      	ldr	r3, [pc, #400]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a63      	ldr	r2, [pc, #396]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e80:	e01c      	b.n	8003ebc <HAL_RCC_OscConfig+0x324>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x30c>
 8003e8a:	4b5f      	ldr	r3, [pc, #380]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	4a5e      	ldr	r2, [pc, #376]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70
 8003e96:	4b5c      	ldr	r3, [pc, #368]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	4a5b      	ldr	r2, [pc, #364]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0x324>
 8003ea4:	4b58      	ldr	r3, [pc, #352]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a57      	ldr	r2, [pc, #348]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	4b55      	ldr	r3, [pc, #340]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	4a54      	ldr	r2, [pc, #336]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	f023 0304 	bic.w	r3, r3, #4
 8003eba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d015      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fe fd04 	bl	80028d0 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7fe fd00 	bl	80028d0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0cb      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee2:	4b49      	ldr	r3, [pc, #292]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ee      	beq.n	8003ecc <HAL_RCC_OscConfig+0x334>
 8003eee:	e014      	b.n	8003f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7fe fcee 	bl	80028d0 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fe fcea 	bl	80028d0 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0b5      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0e:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1ee      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f20:	4b39      	ldr	r3, [pc, #228]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	4a38      	ldr	r2, [pc, #224]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80a1 	beq.w	8004078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f36:	4b34      	ldr	r3, [pc, #208]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d05c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d141      	bne.n	8003fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_RCC_OscConfig+0x478>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7fe fcbe 	bl	80028d0 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fe fcba 	bl	80028d0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e087      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	4b27      	ldr	r3, [pc, #156]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	019b      	lsls	r3, r3, #6
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	041b      	lsls	r3, r3, #16
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	061b      	lsls	r3, r3, #24
 8003f9a:	491b      	ldr	r1, [pc, #108]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <HAL_RCC_OscConfig+0x478>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe fc93 	bl	80028d0 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fae:	f7fe fc8f 	bl	80028d0 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e05c      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x416>
 8003fcc:	e054      	b.n	8004078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <HAL_RCC_OscConfig+0x478>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fc7c 	bl	80028d0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fe fc78 	bl	80028d0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e045      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x444>
 8003ffa:	e03d      	b.n	8004078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d107      	bne.n	8004014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e038      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
 8004008:	40023800 	.word	0x40023800
 800400c:	40007000 	.word	0x40007000
 8004010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <HAL_RCC_OscConfig+0x4ec>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d028      	beq.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d121      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d11a      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004044:	4013      	ands	r3, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800404a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404c:	4293      	cmp	r3, r2
 800404e:	d111      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	3b01      	subs	r3, #1
 800405e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d107      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800

08004088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0cc      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800409c:	4b68      	ldr	r3, [pc, #416]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d90c      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b65      	ldr	r3, [pc, #404]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b63      	ldr	r3, [pc, #396]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0b8      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040dc:	4b59      	ldr	r3, [pc, #356]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a58      	ldr	r2, [pc, #352]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f4:	4b53      	ldr	r3, [pc, #332]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a52      	ldr	r2, [pc, #328]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004100:	4b50      	ldr	r3, [pc, #320]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	494d      	ldr	r1, [pc, #308]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d044      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	4b47      	ldr	r3, [pc, #284]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d119      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e07f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d003      	beq.n	8004146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004142:	2b03      	cmp	r3, #3
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004146:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e06f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e067      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004166:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4934      	ldr	r1, [pc, #208]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004178:	f7fe fbaa 	bl	80028d0 <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7fe fba6 	bl	80028d0 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e04f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 020c 	and.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1eb      	bne.n	8004180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d20c      	bcs.n	80041d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b22      	ldr	r3, [pc, #136]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b20      	ldr	r3, [pc, #128]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e032      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4916      	ldr	r1, [pc, #88]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	490e      	ldr	r1, [pc, #56]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800420e:	f000 f821 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004212:	4602      	mov	r2, r0
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	490a      	ldr	r1, [pc, #40]	; (8004248 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	5ccb      	ldrb	r3, [r1, r3]
 8004222:	fa22 f303 	lsr.w	r3, r2, r3
 8004226:	4a09      	ldr	r2, [pc, #36]	; (800424c <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fb0a 	bl	8002848 <HAL_InitTick>

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023c00 	.word	0x40023c00
 8004244:	40023800 	.word	0x40023800
 8004248:	080079e8 	.word	0x080079e8
 800424c:	20000004 	.word	0x20000004
 8004250:	20000008 	.word	0x20000008

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004258:	b094      	sub	sp, #80	; 0x50
 800425a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	647b      	str	r3, [r7, #68]	; 0x44
 8004260:	2300      	movs	r3, #0
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	2300      	movs	r3, #0
 8004266:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426c:	4b79      	ldr	r3, [pc, #484]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d00d      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x40>
 8004278:	2b08      	cmp	r3, #8
 800427a:	f200 80e1 	bhi.w	8004440 <HAL_RCC_GetSysClockFreq+0x1ec>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x34>
 8004282:	2b04      	cmp	r3, #4
 8004284:	d003      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x3a>
 8004286:	e0db      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004288:	4b73      	ldr	r3, [pc, #460]	; (8004458 <HAL_RCC_GetSysClockFreq+0x204>)
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800428c:	e0db      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428e:	4b73      	ldr	r3, [pc, #460]	; (800445c <HAL_RCC_GetSysClockFreq+0x208>)
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004292:	e0d8      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429e:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d063      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042aa:	4b6a      	ldr	r3, [pc, #424]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	2200      	movs	r2, #0
 80042b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30
 80042be:	2300      	movs	r3, #0
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
 80042c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	f04f 0000 	mov.w	r0, #0
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	0159      	lsls	r1, r3, #5
 80042d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d8:	0150      	lsls	r0, r2, #5
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4621      	mov	r1, r4
 80042e0:	1a51      	subs	r1, r2, r1
 80042e2:	6139      	str	r1, [r7, #16]
 80042e4:	4629      	mov	r1, r5
 80042e6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f8:	4659      	mov	r1, fp
 80042fa:	018b      	lsls	r3, r1, #6
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004302:	4651      	mov	r1, sl
 8004304:	018a      	lsls	r2, r1, #6
 8004306:	4651      	mov	r1, sl
 8004308:	ebb2 0801 	subs.w	r8, r2, r1
 800430c:	4659      	mov	r1, fp
 800430e:	eb63 0901 	sbc.w	r9, r3, r1
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800431e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004326:	4690      	mov	r8, r2
 8004328:	4699      	mov	r9, r3
 800432a:	4623      	mov	r3, r4
 800432c:	eb18 0303 	adds.w	r3, r8, r3
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	462b      	mov	r3, r5
 8004334:	eb49 0303 	adc.w	r3, r9, r3
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004346:	4629      	mov	r1, r5
 8004348:	024b      	lsls	r3, r1, #9
 800434a:	4621      	mov	r1, r4
 800434c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004350:	4621      	mov	r1, r4
 8004352:	024a      	lsls	r2, r1, #9
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435a:	2200      	movs	r2, #0
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
 800435e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004360:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004364:	f7fb ff80 	bl	8000268 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004370:	e058      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	2200      	movs	r2, #0
 800437a:	4618      	mov	r0, r3
 800437c:	4611      	mov	r1, r2
 800437e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004382:	623b      	str	r3, [r7, #32]
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800438c:	4642      	mov	r2, r8
 800438e:	464b      	mov	r3, r9
 8004390:	f04f 0000 	mov.w	r0, #0
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	0159      	lsls	r1, r3, #5
 800439a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439e:	0150      	lsls	r0, r2, #5
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4641      	mov	r1, r8
 80043a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043aa:	4649      	mov	r1, r9
 80043ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043c4:	ebb2 040a 	subs.w	r4, r2, sl
 80043c8:	eb63 050b 	sbc.w	r5, r3, fp
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	00eb      	lsls	r3, r5, #3
 80043d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043da:	00e2      	lsls	r2, r4, #3
 80043dc:	4614      	mov	r4, r2
 80043de:	461d      	mov	r5, r3
 80043e0:	4643      	mov	r3, r8
 80043e2:	18e3      	adds	r3, r4, r3
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	464b      	mov	r3, r9
 80043e8:	eb45 0303 	adc.w	r3, r5, r3
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fa:	4629      	mov	r1, r5
 80043fc:	028b      	lsls	r3, r1, #10
 80043fe:	4621      	mov	r1, r4
 8004400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004404:	4621      	mov	r1, r4
 8004406:	028a      	lsls	r2, r1, #10
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440e:	2200      	movs	r2, #0
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	61fa      	str	r2, [r7, #28]
 8004414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004418:	f7fb ff26 	bl	8000268 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	3301      	adds	r3, #1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetSysClockFreq+0x204>)
 8004442:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004448:	4618      	mov	r0, r3
 800444a:	3750      	adds	r7, #80	; 0x50
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	00f42400 	.word	0x00f42400
 800445c:	007a1200 	.word	0x007a1200

08004460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_RCC_GetHCLKFreq+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000004 	.word	0x20000004

08004478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800447c:	f7ff fff0 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0a9b      	lsrs	r3, r3, #10
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4903      	ldr	r1, [pc, #12]	; (800449c <HAL_RCC_GetPCLK1Freq+0x24>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	080079f8 	.word	0x080079f8

080044a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044a4:	f7ff ffdc 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0b5b      	lsrs	r3, r3, #13
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	080079f8 	.word	0x080079f8

080044c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e07b      	b.n	80045d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ea:	d009      	beq.n	8004500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	61da      	str	r2, [r3, #28]
 80044f2:	e005      	b.n	8004500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd fe78 	bl	8002210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	ea42 0103 	orr.w	r1, r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0104 	and.w	r1, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f003 0210 	and.w	r2, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b088      	sub	sp, #32
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_SPI_Transmit+0x22>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e126      	b.n	800484a <HAL_SPI_Transmit+0x270>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004604:	f7fe f964 	bl	80028d0 <HAL_GetTick>
 8004608:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d002      	beq.n	8004620 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800461a:	2302      	movs	r3, #2
 800461c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800461e:	e10b      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_SPI_Transmit+0x52>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004630:	e102      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2203      	movs	r2, #3
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	88fa      	ldrh	r2, [r7, #6]
 8004650:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004678:	d10f      	bne.n	800469a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004698:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d007      	beq.n	80046b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c0:	d14b      	bne.n	800475a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_SPI_Transmit+0xf6>
 80046ca:	8afb      	ldrh	r3, [r7, #22]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d13e      	bne.n	800474e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046f4:	e02b      	b.n	800474e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d112      	bne.n	800472a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	881a      	ldrh	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	1c9a      	adds	r2, r3, #2
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	86da      	strh	r2, [r3, #54]	; 0x36
 8004728:	e011      	b.n	800474e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472a:	f7fe f8d1 	bl	80028d0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d803      	bhi.n	8004742 <HAL_SPI_Transmit+0x168>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d102      	bne.n	8004748 <HAL_SPI_Transmit+0x16e>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800474c:	e074      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ce      	bne.n	80046f6 <HAL_SPI_Transmit+0x11c>
 8004758:	e04c      	b.n	80047f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Transmit+0x18e>
 8004762:	8afb      	ldrh	r3, [r7, #22]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d140      	bne.n	80047ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	7812      	ldrb	r2, [r2, #0]
 8004774:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800478e:	e02c      	b.n	80047ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d113      	bne.n	80047c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80047c4:	e011      	b.n	80047ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c6:	f7fe f883 	bl	80028d0 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d803      	bhi.n	80047de <HAL_SPI_Transmit+0x204>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d102      	bne.n	80047e4 <HAL_SPI_Transmit+0x20a>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047e8:	e026      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1cd      	bne.n	8004790 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fb2b 	bl	8004e54 <SPI_EndRxTxTransaction>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e000      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004848:	7ffb      	ldrb	r3, [r7, #31]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_SPI_Transmit_DMA+0x20>
 8004870:	2302      	movs	r3, #2
 8004872:	e09b      	b.n	80049ac <HAL_SPI_Transmit_DMA+0x158>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d002      	beq.n	800488e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004888:	2302      	movs	r3, #2
 800488a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800488c:	e089      	b.n	80049a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_SPI_Transmit_DMA+0x46>
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800489e:	e080      	b.n	80049a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2203      	movs	r2, #3
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e6:	d10f      	bne.n	8004908 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004906:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490c:	4a29      	ldr	r2, [pc, #164]	; (80049b4 <HAL_SPI_Transmit_DMA+0x160>)
 800490e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004914:	4a28      	ldr	r2, [pc, #160]	; (80049b8 <HAL_SPI_Transmit_DMA+0x164>)
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491c:	4a27      	ldr	r2, [pc, #156]	; (80049bc <HAL_SPI_Transmit_DMA+0x168>)
 800491e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004924:	2200      	movs	r2, #0
 8004926:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	4619      	mov	r1, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004940:	f7fe fbfc 	bl	800313c <HAL_DMA_Start_IT>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	f043 0210 	orr.w	r2, r3, #16
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004962:	e01e      	b.n	80049a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d007      	beq.n	8004982 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004980:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0220 	orr.w	r2, r2, #32
 8004990:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0202 	orr.w	r2, r2, #2
 80049a0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	08004cc1 	.word	0x08004cc1
 80049b8:	08004c19 	.word	0x08004c19
 80049bc:	08004cdd 	.word	0x08004cdd

080049c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10f      	bne.n	8004a04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	099b      	lsrs	r3, r3, #6
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
    return;
 8004a02:	e0d7      	b.n	8004bb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_SPI_IRQHandler+0x66>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	09db      	lsrs	r3, r3, #7
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
    return;
 8004a24:	e0c6      	b.n	8004bb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10c      	bne.n	8004a4c <HAL_SPI_IRQHandler+0x8c>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	099b      	lsrs	r3, r3, #6
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80b4 	beq.w	8004bb4 <HAL_SPI_IRQHandler+0x1f4>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80ad 	beq.w	8004bb4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d023      	beq.n	8004aae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d011      	beq.n	8004a96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	f043 0204 	orr.w	r2, r3, #4
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	e00b      	b.n	8004aae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	693b      	ldr	r3, [r7, #16]
        return;
 8004aac:	e082      	b.n	8004bb4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d014      	beq.n	8004ae4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	f043 0201 	orr.w	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	0a1b      	lsrs	r3, r3, #8
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	f043 0208 	orr.w	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004afc:	2300      	movs	r3, #0
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d04f      	beq.n	8004bb2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <HAL_SPI_IRQHandler+0x17e>
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d034      	beq.n	8004ba8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0203 	bic.w	r2, r2, #3
 8004b4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d011      	beq.n	8004b7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_SPI_IRQHandler+0x1fc>)
 8004b5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fbb2 	bl	80032cc <HAL_DMA_Abort_IT>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d016      	beq.n	8004bb0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b86:	4a0d      	ldr	r2, [pc, #52]	; (8004bbc <HAL_SPI_IRQHandler+0x1fc>)
 8004b88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fb9c 	bl	80032cc <HAL_DMA_Abort_IT>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004ba6:	e003      	b.n	8004bb0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f81d 	bl	8004be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004bae:	e000      	b.n	8004bb2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004bb0:	bf00      	nop
    return;
 8004bb2:	bf00      	nop
  }
}
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	08004d1d 	.word	0x08004d1d

08004bc0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c0a:	b2db      	uxtb	r3, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c26:	f7fd fe53 	bl	80028d0 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3a:	d03b      	beq.n	8004cb4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0220 	bic.w	r2, r2, #32
 8004c4a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0202 	bic.w	r2, r2, #2
 8004c5a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	2164      	movs	r1, #100	; 0x64
 8004c60:	6978      	ldr	r0, [r7, #20]
 8004c62:	f000 f8f7 	bl	8004e54 <SPI_EndRxTxTransaction>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004cac:	6978      	ldr	r0, [r7, #20]
 8004cae:	f7ff ff9b 	bl	8004be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004cb2:	e002      	b.n	8004cba <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004cb4:	6978      	ldr	r0, [r7, #20]
 8004cb6:	f7ff ff83 	bl	8004bc0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff ff80 	bl	8004bd4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0203 	bic.w	r2, r2, #3
 8004cf8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	f043 0210 	orr.w	r2, r3, #16
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff ff6a 	bl	8004be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff ff56 	bl	8004be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	4613      	mov	r3, r2
 8004d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d54:	f7fd fdbc 	bl	80028d0 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	4413      	add	r3, r2
 8004d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d64:	f7fd fdb4 	bl	80028d0 <HAL_GetTick>
 8004d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d6a:	4b39      	ldr	r3, [pc, #228]	; (8004e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	015b      	lsls	r3, r3, #5
 8004d70:	0d1b      	lsrs	r3, r3, #20
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	fb02 f303 	mul.w	r3, r2, r3
 8004d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7a:	e054      	b.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d050      	beq.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d84:	f7fd fda4 	bl	80028d0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d902      	bls.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d13d      	bne.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004db2:	d111      	bne.n	8004dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	d004      	beq.n	8004dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc6:	d107      	bne.n	8004dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de0:	d10f      	bne.n	8004e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e017      	b.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	bf0c      	ite	eq
 8004e36:	2301      	moveq	r3, #1
 8004e38:	2300      	movne	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d19b      	bne.n	8004d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000004 	.word	0x20000004

08004e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e60:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <SPI_EndRxTxTransaction+0x7c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1b      	ldr	r2, [pc, #108]	; (8004ed4 <SPI_EndRxTxTransaction+0x80>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0d5b      	lsrs	r3, r3, #21
 8004e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e70:	fb02 f303 	mul.w	r3, r2, r3
 8004e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7e:	d112      	bne.n	8004ea6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2200      	movs	r2, #0
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff ff5a 	bl	8004d44 <SPI_WaitFlagStateUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	f043 0220 	orr.w	r2, r3, #32
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e00f      	b.n	8004ec6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d0f2      	beq.n	8004ea6 <SPI_EndRxTxTransaction+0x52>
 8004ec0:	e000      	b.n	8004ec4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ec2:	bf00      	nop
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000004 	.word	0x20000004
 8004ed4:	165e9f81 	.word	0x165e9f81

08004ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e041      	b.n	8004f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fd fb1c 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f000 fb4a 	bl	80055b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e041      	b.n	800500c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f839 	bl	8005014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 fafb 	bl	80055b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d122      	bne.n	8005084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0202 	mvn.w	r2, #2
 8005054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fa81 	bl	8005572 <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa73 	bl	800555e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fa84 	bl	8005586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b04      	cmp	r3, #4
 8005090:	d122      	bne.n	80050d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b04      	cmp	r3, #4
 800509e:	d11b      	bne.n	80050d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0204 	mvn.w	r2, #4
 80050a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fa57 	bl	8005572 <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa49 	bl	800555e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fa5a 	bl	8005586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d122      	bne.n	800512c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0208 	mvn.w	r2, #8
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2204      	movs	r2, #4
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa2d 	bl	8005572 <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fa1f 	bl	800555e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fa30 	bl	8005586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b10      	cmp	r3, #16
 8005138:	d122      	bne.n	8005180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b10      	cmp	r3, #16
 8005146:	d11b      	bne.n	8005180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0210 	mvn.w	r2, #16
 8005150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2208      	movs	r2, #8
 8005156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa03 	bl	8005572 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9f5 	bl	800555e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fa06 	bl	8005586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b01      	cmp	r3, #1
 800518c:	d10e      	bne.n	80051ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	d107      	bne.n	80051ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0201 	mvn.w	r2, #1
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f9cf 	bl	800554a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b6:	2b80      	cmp	r3, #128	; 0x80
 80051b8:	d10e      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c4:	2b80      	cmp	r3, #128	; 0x80
 80051c6:	d107      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fd5c 	bl	8005c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	d10e      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	d107      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f9cb 	bl	800559a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b20      	cmp	r3, #32
 8005210:	d10e      	bne.n	8005230 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b20      	cmp	r3, #32
 800521e:	d107      	bne.n	8005230 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0220 	mvn.w	r2, #32
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fd26 	bl	8005c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005252:	2302      	movs	r3, #2
 8005254:	e0ae      	b.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b0c      	cmp	r3, #12
 8005262:	f200 809f 	bhi.w	80053a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080053a5 	.word	0x080053a5
 8005274:	080053a5 	.word	0x080053a5
 8005278:	080053a5 	.word	0x080053a5
 800527c:	080052e1 	.word	0x080052e1
 8005280:	080053a5 	.word	0x080053a5
 8005284:	080053a5 	.word	0x080053a5
 8005288:	080053a5 	.word	0x080053a5
 800528c:	08005323 	.word	0x08005323
 8005290:	080053a5 	.word	0x080053a5
 8005294:	080053a5 	.word	0x080053a5
 8005298:	080053a5 	.word	0x080053a5
 800529c:	08005363 	.word	0x08005363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fa22 	bl	80056f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
      break;
 80052de:	e064      	b.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fa72 	bl	80057d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      break;
 8005320:	e043      	b.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fac7 	bl	80058bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
      break;
 8005360:	e023      	b.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fb1b 	bl	80059a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
      break;
 80053a2:	e002      	b.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
      break;
 80053a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIM_ConfigClockSource+0x1c>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e0b4      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x186>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005410:	d03e      	beq.n	8005490 <HAL_TIM_ConfigClockSource+0xd4>
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005416:	f200 8087 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	f000 8086 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x172>
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	d87f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b70      	cmp	r3, #112	; 0x70
 800542a:	d01a      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0xa6>
 800542c:	2b70      	cmp	r3, #112	; 0x70
 800542e:	d87b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b60      	cmp	r3, #96	; 0x60
 8005432:	d050      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005434:	2b60      	cmp	r3, #96	; 0x60
 8005436:	d877      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005438:	2b50      	cmp	r3, #80	; 0x50
 800543a:	d03c      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0xfa>
 800543c:	2b50      	cmp	r3, #80	; 0x50
 800543e:	d873      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d058      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d86f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005448:	2b30      	cmp	r3, #48	; 0x30
 800544a:	d064      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	d86b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d060      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d867      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d05c      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 800545c:	2b10      	cmp	r3, #16
 800545e:	d05a      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 8005460:	e062      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6899      	ldr	r1, [r3, #8]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f000 fb67 	bl	8005b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
      break;
 800548e:	e04f      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6899      	ldr	r1, [r3, #8]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f000 fb50 	bl	8005b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b2:	609a      	str	r2, [r3, #8]
      break;
 80054b4:	e03c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 fac4 	bl	8005a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2150      	movs	r1, #80	; 0x50
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fb1d 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 80054d4:	e02c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6859      	ldr	r1, [r3, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f000 fae3 	bl	8005aae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2160      	movs	r1, #96	; 0x60
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fb0d 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 80054f4:	e01c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6859      	ldr	r1, [r3, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	461a      	mov	r2, r3
 8005504:	f000 faa4 	bl	8005a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2140      	movs	r1, #64	; 0x40
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fafd 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005514:	e00c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f000 faf4 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005526:	e003      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
      break;
 800552c:	e000      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800552e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a40      	ldr	r2, [pc, #256]	; (80056c4 <TIM_Base_SetConfig+0x114>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ce:	d00f      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a3d      	ldr	r2, [pc, #244]	; (80056c8 <TIM_Base_SetConfig+0x118>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a3c      	ldr	r2, [pc, #240]	; (80056cc <TIM_Base_SetConfig+0x11c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d007      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3b      	ldr	r2, [pc, #236]	; (80056d0 <TIM_Base_SetConfig+0x120>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3a      	ldr	r2, [pc, #232]	; (80056d4 <TIM_Base_SetConfig+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d108      	bne.n	8005602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2f      	ldr	r2, [pc, #188]	; (80056c4 <TIM_Base_SetConfig+0x114>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d02b      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005610:	d027      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2c      	ldr	r2, [pc, #176]	; (80056c8 <TIM_Base_SetConfig+0x118>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d023      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2b      	ldr	r2, [pc, #172]	; (80056cc <TIM_Base_SetConfig+0x11c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d01f      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2a      	ldr	r2, [pc, #168]	; (80056d0 <TIM_Base_SetConfig+0x120>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01b      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a29      	ldr	r2, [pc, #164]	; (80056d4 <TIM_Base_SetConfig+0x124>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d017      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a28      	ldr	r2, [pc, #160]	; (80056d8 <TIM_Base_SetConfig+0x128>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a27      	ldr	r2, [pc, #156]	; (80056dc <TIM_Base_SetConfig+0x12c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00f      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a26      	ldr	r2, [pc, #152]	; (80056e0 <TIM_Base_SetConfig+0x130>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00b      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a25      	ldr	r2, [pc, #148]	; (80056e4 <TIM_Base_SetConfig+0x134>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d007      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a24      	ldr	r2, [pc, #144]	; (80056e8 <TIM_Base_SetConfig+0x138>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d003      	beq.n	8005662 <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a23      	ldr	r2, [pc, #140]	; (80056ec <TIM_Base_SetConfig+0x13c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d108      	bne.n	8005674 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <TIM_Base_SetConfig+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_Base_SetConfig+0xf8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <TIM_Base_SetConfig+0x124>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d103      	bne.n	80056b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	615a      	str	r2, [r3, #20]
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40010400 	.word	0x40010400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800
 80056e4:	40001800 	.word	0x40001800
 80056e8:	40001c00 	.word	0x40001c00
 80056ec:	40002000 	.word	0x40002000

080056f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0303 	bic.w	r3, r3, #3
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f023 0302 	bic.w	r3, r3, #2
 8005738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a20      	ldr	r2, [pc, #128]	; (80057c8 <TIM_OC1_SetConfig+0xd8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_OC1_SetConfig+0x64>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <TIM_OC1_SetConfig+0xdc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d10c      	bne.n	800576e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f023 0308 	bic.w	r3, r3, #8
 800575a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f023 0304 	bic.w	r3, r3, #4
 800576c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <TIM_OC1_SetConfig+0xd8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_OC1_SetConfig+0x8e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a14      	ldr	r2, [pc, #80]	; (80057cc <TIM_OC1_SetConfig+0xdc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d111      	bne.n	80057a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800578c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	621a      	str	r2, [r3, #32]
}
 80057bc:	bf00      	nop
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40010000 	.word	0x40010000
 80057cc:	40010400 	.word	0x40010400

080057d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0210 	bic.w	r2, r3, #16
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0320 	bic.w	r3, r3, #32
 800581a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a22      	ldr	r2, [pc, #136]	; (80058b4 <TIM_OC2_SetConfig+0xe4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_OC2_SetConfig+0x68>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a21      	ldr	r2, [pc, #132]	; (80058b8 <TIM_OC2_SetConfig+0xe8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d10d      	bne.n	8005854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a17      	ldr	r2, [pc, #92]	; (80058b4 <TIM_OC2_SetConfig+0xe4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC2_SetConfig+0x94>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <TIM_OC2_SetConfig+0xe8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d113      	bne.n	800588c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800586a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40010400 	.word	0x40010400

080058bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a21      	ldr	r2, [pc, #132]	; (800599c <TIM_OC3_SetConfig+0xe0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC3_SetConfig+0x66>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a20      	ldr	r2, [pc, #128]	; (80059a0 <TIM_OC3_SetConfig+0xe4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d10d      	bne.n	800593e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800593c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a16      	ldr	r2, [pc, #88]	; (800599c <TIM_OC3_SetConfig+0xe0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_OC3_SetConfig+0x92>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <TIM_OC3_SetConfig+0xe4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d113      	bne.n	8005976 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800595c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	621a      	str	r2, [r3, #32]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40010000 	.word	0x40010000
 80059a0:	40010400 	.word	0x40010400

080059a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	031b      	lsls	r3, r3, #12
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a12      	ldr	r2, [pc, #72]	; (8005a48 <TIM_OC4_SetConfig+0xa4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_OC4_SetConfig+0x68>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a11      	ldr	r2, [pc, #68]	; (8005a4c <TIM_OC4_SetConfig+0xa8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d109      	bne.n	8005a20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	019b      	lsls	r3, r3, #6
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	621a      	str	r2, [r3, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40010400 	.word	0x40010400

08005a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0201 	bic.w	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 030a 	bic.w	r3, r3, #10
 8005a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b087      	sub	sp, #28
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0210 	bic.w	r2, r3, #16
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	031b      	lsls	r3, r3, #12
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f043 0307 	orr.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	021a      	lsls	r2, r3, #8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e05a      	b.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a21      	ldr	r2, [pc, #132]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d022      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be8:	d01d      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1d      	ldr	r2, [pc, #116]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d018      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1b      	ldr	r2, [pc, #108]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1a      	ldr	r2, [pc, #104]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00e      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a18      	ldr	r2, [pc, #96]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d009      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a17      	ldr	r2, [pc, #92]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d004      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a15      	ldr	r2, [pc, #84]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10c      	bne.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	40010400 	.word	0x40010400
 8005c74:	40014000 	.word	0x40014000
 8005c78:	40001800 	.word	0x40001800

08005c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e03f      	b.n	8005d36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fc fcec 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2224      	movs	r2, #36	; 0x24
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fc7b 	bl	80065e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695a      	ldr	r2, [r3, #20]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b0ba      	sub	sp, #232	; 0xe8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10f      	bne.n	8005da6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <HAL_UART_IRQHandler+0x66>
 8005d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fb65 	bl	800646e <UART_Receive_IT>
      return;
 8005da4:	e256      	b.n	8006254 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 80de 	beq.w	8005f6c <HAL_UART_IRQHandler+0x22c>
 8005db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80d1 	beq.w	8005f6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <HAL_UART_IRQHandler+0xae>
 8005dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f043 0201 	orr.w	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <HAL_UART_IRQHandler+0xd2>
 8005dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f043 0202 	orr.w	r2, r3, #2
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <HAL_UART_IRQHandler+0xf6>
 8005e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d005      	beq.n	8005e36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f043 0204 	orr.w	r2, r3, #4
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d011      	beq.n	8005e66 <HAL_UART_IRQHandler+0x126>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d105      	bne.n	8005e5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f043 0208 	orr.w	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 81ed 	beq.w	800624a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_UART_IRQHandler+0x14e>
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 faf0 	bl	800646e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	bf0c      	ite	eq
 8005e9c:	2301      	moveq	r3, #1
 8005e9e:	2300      	movne	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <HAL_UART_IRQHandler+0x17a>
 8005eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d04f      	beq.n	8005f5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f9f8 	bl	80062b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d141      	bne.n	8005f52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3314      	adds	r3, #20
 8005ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3314      	adds	r3, #20
 8005ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005efa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1d9      	bne.n	8005ece <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d013      	beq.n	8005f4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	4a7d      	ldr	r2, [pc, #500]	; (800611c <HAL_UART_IRQHandler+0x3dc>)
 8005f28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fd f9cc 	bl	80032cc <HAL_DMA_Abort_IT>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d016      	beq.n	8005f68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f44:	4610      	mov	r0, r2
 8005f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f48:	e00e      	b.n	8005f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f99a 	bl	8006284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f50:	e00a      	b.n	8005f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f996 	bl	8006284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	e006      	b.n	8005f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f992 	bl	8006284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f66:	e170      	b.n	800624a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f68:	bf00      	nop
    return;
 8005f6a:	e16e      	b.n	800624a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	f040 814a 	bne.w	800620a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 8143 	beq.w	800620a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 813c 	beq.w	800620a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	f040 80b4 	bne.w	8006120 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8140 	beq.w	800624e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	f080 8139 	bcs.w	800624e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fee:	f000 8088 	beq.w	8006102 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800600c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800601e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800602a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1d9      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3314      	adds	r3, #20
 8006044:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800604e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3314      	adds	r3, #20
 800605e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006062:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006066:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800606a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e1      	bne.n	800603e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800608a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800608c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3314      	adds	r3, #20
 800609a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800609e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e3      	bne.n	800607a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d2:	f023 0310 	bic.w	r3, r3, #16
 80060d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80060e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e3      	bne.n	80060c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fd f875 	bl	80031ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800610a:	b29b      	uxth	r3, r3
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	b29b      	uxth	r3, r3
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f8c0 	bl	8006298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006118:	e099      	b.n	800624e <HAL_UART_IRQHandler+0x50e>
 800611a:	bf00      	nop
 800611c:	08006377 	.word	0x08006377
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006128:	b29b      	uxth	r3, r3
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 808b 	beq.w	8006252 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800613c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8086 	beq.w	8006252 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800615c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800616a:	647a      	str	r2, [r7, #68]	; 0x44
 800616c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e3      	bne.n	8006146 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3314      	adds	r3, #20
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	623b      	str	r3, [r7, #32]
   return(result);
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	f023 0301 	bic.w	r3, r3, #1
 8006194:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3314      	adds	r3, #20
 800619e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061a2:	633a      	str	r2, [r7, #48]	; 0x30
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e3      	bne.n	800617e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	330c      	adds	r3, #12
 80061ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0310 	bic.w	r3, r3, #16
 80061da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061e8:	61fa      	str	r2, [r7, #28]
 80061ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	69b9      	ldr	r1, [r7, #24]
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	617b      	str	r3, [r7, #20]
   return(result);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e3      	bne.n	80061c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f848 	bl	8006298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006208:	e023      	b.n	8006252 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800620a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <HAL_UART_IRQHandler+0x4ea>
 8006216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f8bb 	bl	800639e <UART_Transmit_IT>
    return;
 8006228:	e014      	b.n	8006254 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800622a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00e      	beq.n	8006254 <HAL_UART_IRQHandler+0x514>
 8006236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d008      	beq.n	8006254 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8fb 	bl	800643e <UART_EndTransmit_IT>
    return;
 8006248:	e004      	b.n	8006254 <HAL_UART_IRQHandler+0x514>
    return;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_UART_IRQHandler+0x514>
      return;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_UART_IRQHandler+0x514>
      return;
 8006252:	bf00      	nop
  }
}
 8006254:	37e8      	adds	r7, #232	; 0xe8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop

0800625c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b095      	sub	sp, #84	; 0x54
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	330c      	adds	r3, #12
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062d8:	643a      	str	r2, [r7, #64]	; 0x40
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e5      	bne.n	80062b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3314      	adds	r3, #20
 80062f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	64bb      	str	r3, [r7, #72]	; 0x48
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3314      	adds	r3, #20
 800630a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800630c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e5      	bne.n	80062ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	2b01      	cmp	r3, #1
 8006326:	d119      	bne.n	800635c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	330c      	adds	r3, #12
 800632e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	60bb      	str	r3, [r7, #8]
   return(result);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f023 0310 	bic.w	r3, r3, #16
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006348:	61ba      	str	r2, [r7, #24]
 800634a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6979      	ldr	r1, [r7, #20]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	613b      	str	r3, [r7, #16]
   return(result);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e5      	bne.n	8006328 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
}
 800636a:	bf00      	nop
 800636c:	3754      	adds	r7, #84	; 0x54
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff ff77 	bl	8006284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b21      	cmp	r3, #33	; 0x21
 80063b0:	d13e      	bne.n	8006430 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ba:	d114      	bne.n	80063e6 <UART_Transmit_IT+0x48>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d110      	bne.n	80063e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	1c9a      	adds	r2, r3, #2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	621a      	str	r2, [r3, #32]
 80063e4:	e008      	b.n	80063f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6211      	str	r1, [r2, #32]
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29b      	uxth	r3, r3
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4619      	mov	r1, r3
 8006406:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10f      	bne.n	800642c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800641a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800642a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e000      	b.n	8006432 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
  }
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006454:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fefc 	bl	800625c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b08c      	sub	sp, #48	; 0x30
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b22      	cmp	r3, #34	; 0x22
 8006480:	f040 80ab 	bne.w	80065da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648c:	d117      	bne.n	80064be <UART_Receive_IT+0x50>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d113      	bne.n	80064be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	1c9a      	adds	r2, r3, #2
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	629a      	str	r2, [r3, #40]	; 0x28
 80064bc:	e026      	b.n	800650c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d0:	d007      	beq.n	80064e2 <UART_Receive_IT+0x74>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <UART_Receive_IT+0x82>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e008      	b.n	8006502 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29b      	uxth	r3, r3
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	4619      	mov	r1, r3
 800651a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800651c:	2b00      	cmp	r3, #0
 800651e:	d15a      	bne.n	80065d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0220 	bic.w	r2, r2, #32
 800652e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800653e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695a      	ldr	r2, [r3, #20]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	2b01      	cmp	r3, #1
 800655e:	d135      	bne.n	80065cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	613b      	str	r3, [r7, #16]
   return(result);
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f023 0310 	bic.w	r3, r3, #16
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	330c      	adds	r3, #12
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	623a      	str	r2, [r7, #32]
 8006588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	69f9      	ldr	r1, [r7, #28]
 800658c:	6a3a      	ldr	r2, [r7, #32]
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	61bb      	str	r3, [r7, #24]
   return(result);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e5      	bne.n	8006566 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d10a      	bne.n	80065be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff fe67 	bl	8006298 <HAL_UARTEx_RxEventCallback>
 80065ca:	e002      	b.n	80065d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff fe4f 	bl	8006270 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e002      	b.n	80065dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3730      	adds	r7, #48	; 0x30
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e8:	b0c0      	sub	sp, #256	; 0x100
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006600:	68d9      	ldr	r1, [r3, #12]
 8006602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	ea40 0301 	orr.w	r3, r0, r1
 800660c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	431a      	orrs	r2, r3
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	431a      	orrs	r2, r3
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800663c:	f021 010c 	bic.w	r1, r1, #12
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800664a:	430b      	orrs	r3, r1
 800664c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	6999      	ldr	r1, [r3, #24]
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	ea40 0301 	orr.w	r3, r0, r1
 800666a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b8f      	ldr	r3, [pc, #572]	; (80068b0 <UART_SetConfig+0x2cc>)
 8006674:	429a      	cmp	r2, r3
 8006676:	d005      	beq.n	8006684 <UART_SetConfig+0xa0>
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4b8d      	ldr	r3, [pc, #564]	; (80068b4 <UART_SetConfig+0x2d0>)
 8006680:	429a      	cmp	r2, r3
 8006682:	d104      	bne.n	800668e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7fd ff0c 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 8006688:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800668c:	e003      	b.n	8006696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800668e:	f7fd fef3 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8006692:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a0:	f040 810c 	bne.w	80068bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066b6:	4622      	mov	r2, r4
 80066b8:	462b      	mov	r3, r5
 80066ba:	1891      	adds	r1, r2, r2
 80066bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80066be:	415b      	adcs	r3, r3
 80066c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066c6:	4621      	mov	r1, r4
 80066c8:	eb12 0801 	adds.w	r8, r2, r1
 80066cc:	4629      	mov	r1, r5
 80066ce:	eb43 0901 	adc.w	r9, r3, r1
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066e6:	4690      	mov	r8, r2
 80066e8:	4699      	mov	r9, r3
 80066ea:	4623      	mov	r3, r4
 80066ec:	eb18 0303 	adds.w	r3, r8, r3
 80066f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066f4:	462b      	mov	r3, r5
 80066f6:	eb49 0303 	adc.w	r3, r9, r3
 80066fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800670a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800670e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006712:	460b      	mov	r3, r1
 8006714:	18db      	adds	r3, r3, r3
 8006716:	653b      	str	r3, [r7, #80]	; 0x50
 8006718:	4613      	mov	r3, r2
 800671a:	eb42 0303 	adc.w	r3, r2, r3
 800671e:	657b      	str	r3, [r7, #84]	; 0x54
 8006720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006728:	f7f9 fd9e 	bl	8000268 <__aeabi_uldivmod>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4b61      	ldr	r3, [pc, #388]	; (80068b8 <UART_SetConfig+0x2d4>)
 8006732:	fba3 2302 	umull	r2, r3, r3, r2
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	011c      	lsls	r4, r3, #4
 800673a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800673e:	2200      	movs	r2, #0
 8006740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006744:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800674c:	4642      	mov	r2, r8
 800674e:	464b      	mov	r3, r9
 8006750:	1891      	adds	r1, r2, r2
 8006752:	64b9      	str	r1, [r7, #72]	; 0x48
 8006754:	415b      	adcs	r3, r3
 8006756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800675c:	4641      	mov	r1, r8
 800675e:	eb12 0a01 	adds.w	sl, r2, r1
 8006762:	4649      	mov	r1, r9
 8006764:	eb43 0b01 	adc.w	fp, r3, r1
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800677c:	4692      	mov	sl, r2
 800677e:	469b      	mov	fp, r3
 8006780:	4643      	mov	r3, r8
 8006782:	eb1a 0303 	adds.w	r3, sl, r3
 8006786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800678a:	464b      	mov	r3, r9
 800678c:	eb4b 0303 	adc.w	r3, fp, r3
 8006790:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067a8:	460b      	mov	r3, r1
 80067aa:	18db      	adds	r3, r3, r3
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
 80067ae:	4613      	mov	r3, r2
 80067b0:	eb42 0303 	adc.w	r3, r2, r3
 80067b4:	647b      	str	r3, [r7, #68]	; 0x44
 80067b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067be:	f7f9 fd53 	bl	8000268 <__aeabi_uldivmod>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4611      	mov	r1, r2
 80067c8:	4b3b      	ldr	r3, [pc, #236]	; (80068b8 <UART_SetConfig+0x2d4>)
 80067ca:	fba3 2301 	umull	r2, r3, r3, r1
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	2264      	movs	r2, #100	; 0x64
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	1acb      	subs	r3, r1, r3
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067de:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <UART_SetConfig+0x2d4>)
 80067e0:	fba3 2302 	umull	r2, r3, r3, r2
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067ec:	441c      	add	r4, r3
 80067ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006800:	4642      	mov	r2, r8
 8006802:	464b      	mov	r3, r9
 8006804:	1891      	adds	r1, r2, r2
 8006806:	63b9      	str	r1, [r7, #56]	; 0x38
 8006808:	415b      	adcs	r3, r3
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006810:	4641      	mov	r1, r8
 8006812:	1851      	adds	r1, r2, r1
 8006814:	6339      	str	r1, [r7, #48]	; 0x30
 8006816:	4649      	mov	r1, r9
 8006818:	414b      	adcs	r3, r1
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006828:	4659      	mov	r1, fp
 800682a:	00cb      	lsls	r3, r1, #3
 800682c:	4651      	mov	r1, sl
 800682e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006832:	4651      	mov	r1, sl
 8006834:	00ca      	lsls	r2, r1, #3
 8006836:	4610      	mov	r0, r2
 8006838:	4619      	mov	r1, r3
 800683a:	4603      	mov	r3, r0
 800683c:	4642      	mov	r2, r8
 800683e:	189b      	adds	r3, r3, r2
 8006840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006844:	464b      	mov	r3, r9
 8006846:	460a      	mov	r2, r1
 8006848:	eb42 0303 	adc.w	r3, r2, r3
 800684c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800685c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006864:	460b      	mov	r3, r1
 8006866:	18db      	adds	r3, r3, r3
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
 800686a:	4613      	mov	r3, r2
 800686c:	eb42 0303 	adc.w	r3, r2, r3
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800687a:	f7f9 fcf5 	bl	8000268 <__aeabi_uldivmod>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <UART_SetConfig+0x2d4>)
 8006884:	fba3 1302 	umull	r1, r3, r3, r2
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	2164      	movs	r1, #100	; 0x64
 800688c:	fb01 f303 	mul.w	r3, r1, r3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	3332      	adds	r3, #50	; 0x32
 8006896:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <UART_SetConfig+0x2d4>)
 8006898:	fba2 2303 	umull	r2, r3, r2, r3
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	f003 0207 	and.w	r2, r3, #7
 80068a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4422      	add	r2, r4
 80068aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068ac:	e105      	b.n	8006aba <UART_SetConfig+0x4d6>
 80068ae:	bf00      	nop
 80068b0:	40011000 	.word	0x40011000
 80068b4:	40011400 	.word	0x40011400
 80068b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068ce:	4642      	mov	r2, r8
 80068d0:	464b      	mov	r3, r9
 80068d2:	1891      	adds	r1, r2, r2
 80068d4:	6239      	str	r1, [r7, #32]
 80068d6:	415b      	adcs	r3, r3
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
 80068da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068de:	4641      	mov	r1, r8
 80068e0:	1854      	adds	r4, r2, r1
 80068e2:	4649      	mov	r1, r9
 80068e4:	eb43 0501 	adc.w	r5, r3, r1
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	f04f 0300 	mov.w	r3, #0
 80068f0:	00eb      	lsls	r3, r5, #3
 80068f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068f6:	00e2      	lsls	r2, r4, #3
 80068f8:	4614      	mov	r4, r2
 80068fa:	461d      	mov	r5, r3
 80068fc:	4643      	mov	r3, r8
 80068fe:	18e3      	adds	r3, r4, r3
 8006900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006904:	464b      	mov	r3, r9
 8006906:	eb45 0303 	adc.w	r3, r5, r3
 800690a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800691a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800692a:	4629      	mov	r1, r5
 800692c:	008b      	lsls	r3, r1, #2
 800692e:	4621      	mov	r1, r4
 8006930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006934:	4621      	mov	r1, r4
 8006936:	008a      	lsls	r2, r1, #2
 8006938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800693c:	f7f9 fc94 	bl	8000268 <__aeabi_uldivmod>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4b60      	ldr	r3, [pc, #384]	; (8006ac8 <UART_SetConfig+0x4e4>)
 8006946:	fba3 2302 	umull	r2, r3, r3, r2
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	011c      	lsls	r4, r3, #4
 800694e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006952:	2200      	movs	r2, #0
 8006954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006958:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800695c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006960:	4642      	mov	r2, r8
 8006962:	464b      	mov	r3, r9
 8006964:	1891      	adds	r1, r2, r2
 8006966:	61b9      	str	r1, [r7, #24]
 8006968:	415b      	adcs	r3, r3
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006970:	4641      	mov	r1, r8
 8006972:	1851      	adds	r1, r2, r1
 8006974:	6139      	str	r1, [r7, #16]
 8006976:	4649      	mov	r1, r9
 8006978:	414b      	adcs	r3, r1
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006988:	4659      	mov	r1, fp
 800698a:	00cb      	lsls	r3, r1, #3
 800698c:	4651      	mov	r1, sl
 800698e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006992:	4651      	mov	r1, sl
 8006994:	00ca      	lsls	r2, r1, #3
 8006996:	4610      	mov	r0, r2
 8006998:	4619      	mov	r1, r3
 800699a:	4603      	mov	r3, r0
 800699c:	4642      	mov	r2, r8
 800699e:	189b      	adds	r3, r3, r2
 80069a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069a4:	464b      	mov	r3, r9
 80069a6:	460a      	mov	r2, r1
 80069a8:	eb42 0303 	adc.w	r3, r2, r3
 80069ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069c8:	4649      	mov	r1, r9
 80069ca:	008b      	lsls	r3, r1, #2
 80069cc:	4641      	mov	r1, r8
 80069ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d2:	4641      	mov	r1, r8
 80069d4:	008a      	lsls	r2, r1, #2
 80069d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069da:	f7f9 fc45 	bl	8000268 <__aeabi_uldivmod>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4b39      	ldr	r3, [pc, #228]	; (8006ac8 <UART_SetConfig+0x4e4>)
 80069e4:	fba3 1302 	umull	r1, r3, r3, r2
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	2164      	movs	r1, #100	; 0x64
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	3332      	adds	r3, #50	; 0x32
 80069f6:	4a34      	ldr	r2, [pc, #208]	; (8006ac8 <UART_SetConfig+0x4e4>)
 80069f8:	fba2 2303 	umull	r2, r3, r2, r3
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a02:	441c      	add	r4, r3
 8006a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a08:	2200      	movs	r2, #0
 8006a0a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a0c:	677a      	str	r2, [r7, #116]	; 0x74
 8006a0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a12:	4642      	mov	r2, r8
 8006a14:	464b      	mov	r3, r9
 8006a16:	1891      	adds	r1, r2, r2
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	415b      	adcs	r3, r3
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a22:	4641      	mov	r1, r8
 8006a24:	1851      	adds	r1, r2, r1
 8006a26:	6039      	str	r1, [r7, #0]
 8006a28:	4649      	mov	r1, r9
 8006a2a:	414b      	adcs	r3, r1
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	00cb      	lsls	r3, r1, #3
 8006a3e:	4651      	mov	r1, sl
 8006a40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a44:	4651      	mov	r1, sl
 8006a46:	00ca      	lsls	r2, r1, #3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	4642      	mov	r2, r8
 8006a50:	189b      	adds	r3, r3, r2
 8006a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a54:	464b      	mov	r3, r9
 8006a56:	460a      	mov	r2, r1
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	663b      	str	r3, [r7, #96]	; 0x60
 8006a68:	667a      	str	r2, [r7, #100]	; 0x64
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a76:	4649      	mov	r1, r9
 8006a78:	008b      	lsls	r3, r1, #2
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a80:	4641      	mov	r1, r8
 8006a82:	008a      	lsls	r2, r1, #2
 8006a84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a88:	f7f9 fbee 	bl	8000268 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <UART_SetConfig+0x4e4>)
 8006a92:	fba3 1302 	umull	r1, r3, r3, r2
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	2164      	movs	r1, #100	; 0x64
 8006a9a:	fb01 f303 	mul.w	r3, r1, r3
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	3332      	adds	r3, #50	; 0x32
 8006aa4:	4a08      	ldr	r2, [pc, #32]	; (8006ac8 <UART_SetConfig+0x4e4>)
 8006aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4422      	add	r2, r4
 8006ab8:	609a      	str	r2, [r3, #8]
}
 8006aba:	bf00      	nop
 8006abc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ac6:	bf00      	nop
 8006ac8:	51eb851f 	.word	0x51eb851f

08006acc <__libc_init_array>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4d0d      	ldr	r5, [pc, #52]	; (8006b04 <__libc_init_array+0x38>)
 8006ad0:	4c0d      	ldr	r4, [pc, #52]	; (8006b08 <__libc_init_array+0x3c>)
 8006ad2:	1b64      	subs	r4, r4, r5
 8006ad4:	10a4      	asrs	r4, r4, #2
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	42a6      	cmp	r6, r4
 8006ada:	d109      	bne.n	8006af0 <__libc_init_array+0x24>
 8006adc:	4d0b      	ldr	r5, [pc, #44]	; (8006b0c <__libc_init_array+0x40>)
 8006ade:	4c0c      	ldr	r4, [pc, #48]	; (8006b10 <__libc_init_array+0x44>)
 8006ae0:	f000 f820 	bl	8006b24 <_init>
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	2600      	movs	r6, #0
 8006aea:	42a6      	cmp	r6, r4
 8006aec:	d105      	bne.n	8006afa <__libc_init_array+0x2e>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af4:	4798      	blx	r3
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7ee      	b.n	8006ad8 <__libc_init_array+0xc>
 8006afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afe:	4798      	blx	r3
 8006b00:	3601      	adds	r6, #1
 8006b02:	e7f2      	b.n	8006aea <__libc_init_array+0x1e>
 8006b04:	08007a10 	.word	0x08007a10
 8006b08:	08007a10 	.word	0x08007a10
 8006b0c:	08007a10 	.word	0x08007a10
 8006b10:	08007a14 	.word	0x08007a14

08006b14 <memset>:
 8006b14:	4402      	add	r2, r0
 8006b16:	4603      	mov	r3, r0
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d100      	bne.n	8006b1e <memset+0xa>
 8006b1c:	4770      	bx	lr
 8006b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b22:	e7f9      	b.n	8006b18 <memset+0x4>

08006b24 <_init>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr

08006b30 <_fini>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr
